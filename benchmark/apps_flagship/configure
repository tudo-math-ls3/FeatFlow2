#!/bin/sh
#
# This shell script is used to prepare the FEAT2 regression benchmark
# application for compilation. It is simply a wrapper for
# calling the FEAT2 configure script, but sets some standard flags
# that are tedious to add always manually.
#
# For a list of valid command line options to FEAT2's configure script, 
# invoke this script with '--help'.

extraflags=""


######################################################
# Don't let the script be confused by non-english messages
# from system information programs.
# (LC_ALL overrides the value of the LANG environment variable 
# and the values of any other LC_* environment variables.)
LC_ALL=C



######################################################
# We want to develop our code in the home directory (because that
# is not only stored on a RAID system, but also backuped regularly
# and we might accidentally delete some files which we can not 
# recover in the nobackup area), but the home directory has disk
# quota restrictions. Given that object files can be easily
# recovered we store them to some scratch area without quota restrictions
# ($HOME/nobackup) and save this way precious quota in the home directory.
#
# Try to come up with a reasonable location in $HOME/nobackup based on
# the current working directory. One could simply append the current
# working directory to a fixed object directory prefix, example:
#  Source directory: $HOME/experimental/Featflow2/area51/cc2dmedium
#  => Obj directory: $HOME/nobackup/feat2obj/$HOME/experimental/Featflow2/area51/cc2dmedium
#
# But in this case the path given to compilers to locate module files (-fmod,
# -J options) and the path to the object file (-o option) can get rather
# lengthy and some compilers don't accept absolute paths to module files that
# exceed 200 characters (e.g. PGI, see below). So, try to come up with
# something more useful: cut away the strings "$HOME" and "Featflow2" from the
# path to the current directory and use that:
#  Source directory: $HOME/experimental/Featflow2/area51/cc2dmedium
#  => Obj directory: $HOME/nobackup/feat2obj/experimental/area51/cc2dmedium

# Change to the directory where this script resides
# (it is possible to call this script via <some path>/configure,
# so change to <some path> first.)
SCRIPTPATH=`dirname $0`
cd ${SCRIPTPATH}

# Specify object directory prefix. Try to use a path without quota restrictions.
# If that one does not exist, put the object files to the main package
# directory.
NOQUOTADIR=${HOME}/nobackup
if test -e $NOQUOTADIR
  then
    BASEDIR_OBJFILES=${NOQUOTADIR}/feat2obj
  else
    BASEDIR_OBJFILES=`cd ../.. && pwd || echo`/feat2obj
  fi

# To support multiple working copies of FEAT2 which all store their object
# files beneath ${BASEDIR_OBJFILES}, but which should not interfere which each
# other, duplicate the hierarchy of these FEAT2 installations beneath
# ${BASEDIR_OBJFILES}. The procedure can be explained most easily with an
# example:
# Consider you have two FEAT2 installations, one in $HOME/Featflow and
# another in $HOME/tmp/Featflow2, then the object files should go to
# ${BASEDIR_OBJFILES} and ${BASEDIR_OBJFILES}/tmp, respectively.
CWD=`/bin/pwd`

# Try to shorten the directory hierarchy below ${BASEDIR_OBJFILES}.
# Why? Because it is used to create the object directory and some compilers
# enforce (silently) restrictions on include and module directories (e.g.
# PGI compiler version 7-15, see below).
# So, do not let path to object directory become too long!

# Step 1: 
#   try to cut off the leading part ending in your username.
FEAT2INSTDIR=${CWD}
# $USER is used later on, but not all Unix systems define
# this environment variable, Sun Solaris e.g. does not.
test -z "$USER" && USER="$LOGNAME"
# Username contained in path name?
FEAT2INSTDIR=`echo ${FEAT2INSTDIR} | sed "s|^.*/$USER/|/|;"`;

# Step 2: 
#   remove "featflow2/"
FEAT2INSTDIR=`echo ${FEAT2INSTDIR} | tr 'A-Z' 'a-z' | sed "s|/featflow2/|/|;"`;

# Concatenate directory strings to come up with a directory name
# for FEAT2 application object files
OBJDIRPREFIX=${BASEDIR_OBJFILES}${FEAT2INSTDIR}

# Create a likewise directory for all libraries which should
# be shared among all FEAT2 applications as - being a library - 
# they have no dependency on the FEAT2 kernel or a FEAT2 application
# and are all compiled with identical settings.
OBJDIRLIBPREFIX=`dirname \`dirname ${OBJDIRPREFIX}\``

# Append a directory level if an environment variable named
# FEAT2COMPILERVERSION is set.
# Motivation: When testing several compiler versions, the build ID is
# identical for all runs. As a result, the object directory for libraries is
# shared among these compiler versions. This can lead to linker errors when
# the object files get created by a compiler version that employs symbols not
# present in other versions. So, when compiling the libraries with a more
# recent compiler version and trying to link later using an older compiler
# release, this may fail. Also, when compiling with an older compiler version
# first and later with a newer, potential performance gains of the new
# compiler are squandered by still re-using the object files created by the
# older compiler version.
if test -n "${FEAT2COMPILERVERSION}"; then
    OBJDIRLIBPREFIX=${OBJDIRLIBPREFIX}/${FEAT2COMPILERVERSION}
fi


######################################################
# Specify header files which should be copied to the object directory
HEADER_FILES_TO_COPY="../../applications/flagship/src/flagship.h
 ../../applications/flagship/src/models/hydro/hydro.h
 ../../applications/flagship/src/models/hydro/hydro_callback.h
 ../../applications/flagship/src/models/mhd/mhd.h
 ../../applications/flagship/src/models/mhd/mhd_callback.h
 ../../applications/flagship/src/kernel/thermodynamics.h
 ../../applications/flagship/src/kernel/magnetohydrodynamics.h"

# Specify list of application source files
# (disable any ls alias setting)
SRCLIST_APP="`\ls ../../applications/flagship/src/*.f90 ../../applications/flagship/src/models/*/*.f90 ../../applications/flagship/src/kernel/*.f90 2>/dev/null` "
SRCEXTRA_APP=" "

################################################################
# Enable preprocessor support
APPONLYFLAGS="-DUSE_PREPROC_F90CPP"

################################################################
# Define global memory layout
APPONLYFLAGS="$APPONLYFLAGS,-DMEMORY_LAYOUT=COLUMN_MAJOR_ORDER"

################################################################
# Enable auto-tuning using genetic algorithms.
if ([ -n "${AUTOTUNE+x}" ] && [ "$AUTOTUNE" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DENABLE_AUTOTUNE"
fi

################################################################
# Enable use of coprocessor support (if available)
if ([ -n "${COPROC+x}" ] && [ "$COPROC" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DUSE_C_PTR_STORAGE=C_PTR_STORAGE_COPROC"
SRCEXTRA_APP="$SRCEXTRA_APP `\ls ../../applications/flagship/src/*.c ../../applications/flagship/src/*.h ../../applications/flagship/src/models/*/*.h ../../applications/flagship/src/kernel/*.h ../../applications/flagship/src/models/*/*.cu 2>/dev/null` "
COPROC="--coproc=cuda20"
else
COPROC=""
fi

################################################################
# Enable AGMG library
if ([ -n "${AGMG+x}" ] && [ "$AGMG" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DENABLE_AGMG"
fi

################################################################
# Enable external coloring library library
if ([ -n "${COLORINGTEST+x}" ] && [ "$COLORINGTEST" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DENABLE_COLORINGTEST"
SRCEXTRA_APP="$SRCEXTRA_APP ../../applications/flagship/src/coloring.c"
fi


######################################################
# Sanity check. Don't let the path of the object directory prefix become too
# long (unless the path determined above will not be used because
# --objdir-prefix gets overridden by the user explicitly on the command line
# (when this script is invoked).
# The reason for imposing a maximum length restriction on the path of the
# object directory is a deficiency of the PGI compiler. At least all versions
# between 7.1-6 and 15.5-0 are affected. They fail to locate a header file if
# the absolute path to said file exceeds 200 characters, the PGI compiler
# reports for such a header file "Unable to open include file: <name of header
# file>".
# The object directory of a FEAT2 application consists of the object directory
# prefix, the string "object/", the build ID and whether or not the current
# build should include support for coproc library and OpenMP as well as the
# optimisation level. On top of that comes the length of the longest header
# file transferred to this object directory (because the preprocessor can not
# operate directly on the header file as it should be altered itself) which is
# currently "intf_calcNodalTransformation_sim.inc". The length of the absolute
# path to this header file must not exceed 200 characters. Leaving a small
# margin this constraint limits the prefix for object directories to 104
# characters.
case "$@" in
    *--id=[A-Za-z0-9_-]*-pgi*)
        case "$@" in
	    *--objdir-prefix=*)
	        ;;
	    *)
		if [ "`echo ${OBJDIRPREFIX} | wc -c`" -gt "104" ]; then
		    echo "$0: ERROR."
		    echo "    Sorry, the object directory prefix path exceeds 104 characters:"
		    echo "   " ${OBJDIRPREFIX}
		    echo "    As a consequence, the full object directory path - which will also"
		    echo "    include build ID info, whether or not to use coprocessors and/or"
		    echo "    OpenMP and whether to compile a debug or release build - will most"
		    echo "    likely exceeds 164 characters and this, in turn, implies that the"
		    echo "    absolute path to the header file with the longest file name in FEAT2"
		    echo "    (currently: 36 characters) will exceed 200 characters."
		    echo "    This may lead to compilation problems with certain compilers (e.g."
		    echo "    PGI (at least all versions 7.1-6 until 15.5-0) will not be able to"
		    echo "    locate and include Fortran90 header files if the absolute path to"
		    echo "    said header file, stored in the object directory, exceeds 200"
		    echo "    characters)."
		    echo "    Please abbreviate the object directory which is currently set to:"
		    echo "<"${OBJDIRPREFIX}">"
		    echo
		    echo "Application not configured."
		    exit 1
		fi
		;;
	esac
	;;
esac


######################################################


# Invoke configure script in application directory
../../bin/configure \
	--appname=flagship \
	--programfile=../../applications/flagship/src/flagship.f90 \
        --srclist_app="${SRCLIST_APP}" \
        --srcextra_app="${SRCEXTRA_APP}" \
        --header-files-to-copy="${HEADER_FILES_TO_COPY}" \
	--objdir-prefix=${OBJDIRPREFIX} \
	--objdir-lib-prefix=${OBJDIRLIBPREFIX} \
	--apponlyflags="${APPONLYFLAGS}" \
	$@
