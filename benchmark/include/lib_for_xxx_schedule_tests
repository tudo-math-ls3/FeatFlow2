# -*- mode: sh -*-

# ================================================
# = library with functions needed for every      =
# = scheduling script (for NEC, LiDO, JUMP etc.) =
# = The scripts reside in 'bin' and are called   =
# = xxx_schedule_tests                           =
# ================================================


# 'fb_' in function names stands for 'FEAST benchmark'.
# Variables are written in capital letters if used globally


#   Function: usage prints how to use this script
fb_usage() {
    # Determine the script that includes this code piece
    case "$0" in
	*lido_*)
	    system="LiDO"
	    ;;
	*nec_*)	
	    system="NEC SX-8"
	    ;;
	*)
	    system="unknown system (please update include/lib_for_schedule_tests)"
	    ;;
    esac

    cat <<EOF
Usage: $0 [-h] [-p jobfile prefix] [-m email address] [-w wallclock limit] [-a jobid] <TEST ID | test suite> [<TEST ID | test suite>]

$0 provides a convenient way to schedule one 
or more FEAST benchmark tests (identified by test ID, given directly 
or in a *.fbconf file) on $system. The script creates a 
job file for every test ID, takes care of including instructions to 
load the very same modules at run time as are currently loaded and 
submits the job file to the scheduler.

  --afterjob <jobid>, -a <jobid>
      Optional parameter. If specified, the new job(s) is/are executed
      after the job <jobid> is finished. This allows sequential execution
      of jobs that are manually added to the queue system.
  --compilerversion <string>
      Optional parameter. If specified, the string is appended to the fourth
      token in the build ID when constructing the path to the reference file.
  --corespernode <cores>, -c <cores>
      Allows to define how many cores should be allocated on the cluster per
      compute node. If not being set, the standard behaviour is to allocate all
      cores of a node to prevent a node from being shared by multiple
      tasks. This is necessary e.g. for correct timings, to avoid getting memory
      eaten away by others or malicious threaded concurrent jobs.  Manually
      specifying e.g. a 1 here allows to share one compute node for multiple
      tasks if e.g. the execution time is not important.
      Default: $CORESPERNODE
  --email <email address>, -m <email address>
      Optional parameter that allows to specify an email address where
      a notification email is sent after completition of the job.
      Default: $EMAILADDRESS
  --help, -h
      prints this usage statement
  --overwrite-log-directory, -o
      In case a benchmark test ID's log directory does already exist, don't
      rename it to save its content, but re-use it. Potentially overwrites
      previously calculated data.
  --prefix <jobfile prefix>, -p <jobfile prefix>
      Optional prefix for job files. In particular used by nightly
      regression test to identify jobs compiled with different compilers.
      Based on this prefix, it can be automatically detected from 'qsub'
      output when all benchmark jobs (using the same compiler) are finished.
      Default: $JOBFILEPREFIX
  --wallclocklimit <wallclock time>, -w <wallclock time>
      Optional parameter that allows to specify the maximum allowed
      wallclock time the job may use; the cluster environment usually
      kills the job if it takes longer. The format is "hours:min:sec",
      e.g. "00:40:00".
      Default: $WALLCLOCKLIMIT
  --noschedule, --no-schedule
      Creates a job script but does not schedule the job. Used for
      debugging purposes.
  TEST ID
      a valid identifier for a FEAST benchmark test, defined in one of
      the *.fbdef files stored in directory benchmark/tests.
  test suite
      a *.fbconf file containing valid identifiers for FEAST benchmark tests


Example:
  # Perform quicktests
  $0 quicktests.fbconf

  # Perform singletests and additionally test SCARC005
  $0 singletests.fbconf SCARC005

  # Perform singletests and additionally test SCARC005, jobfiles are named "fb-intel.*"
  $0 -p fb-intel singletests.fbconf SCARC005

EOF
   exit
}


#   Function: handle command line options
fb_readargs() {
    while test -n "$*"
    do
      case "$1" in
	  --afterjob|-a*)  # job after completition of another job
	      AFTERJOB="$2"
	      shift
	      shift
	      ;;

	  --compiler-version)  # major and minor revision of compiler, used to determine path to reference solution
	      COMPILERVERSION="$2"
	      echo "$0: Assuming compiler version $COMPILERVERSION"
	      shift
	      shift
	      ;;

	  --compiler-version=*)  # major and minor revision of compiler, used to determine path to reference solution
	      COMPILERVERSION="`echo $1 | sed 's/^--compiler-version=//'`"
	      echo "$0: Assuming compiler version $COMPILERVERSION"
	      shift
	      ;;

	  --corespernode|-c*)  # Number of cores per node to use
	      CORESPERNODE="$2"
	      CORESPERQUADNODE="$2"
	      echo "$0: Using $CORESPERNODE nodes"
	      shift
	      shift
	      ;;

	  --email|-m*)  # email address
	      EMAILADDRESS="$2"
	      shift
	      shift
	      ;;

	  --help|-h*)    # help screen
	      fb_usage
	      exit
	      ;;

	  --noschedule|--no-schedule) # only create jobfile, don't submit to queue
	      NOSCHEDULE=1
	      shift
	      ;;

	  --overwrite-log-director*|-o) # don't rename existing log directories
	      OVERWRITE_LOG_DIRECTORY=1
	      shift
	      ;;

	  --prefix|-p*)  # jobfile prefix
	      JOBFILEPREFIX="$2"
	      shift
	      shift
	      ;;

	  --wallclocklimit|-w*)  # wallclock time address
	      WALLCLOCKLIMIT="$2"
	      echo "$0: Using wallclocklimit $WALLCLOCKLIMIT"
	      shift
	      shift
	      ;;

	  -*)
	      echo "$0: Invalid flag -- '$1'\n"
	      fb_usage
	      exit
	      ;;

	  *)
	      # Determine whether it is a file. If not, it is
	      # considered a test ID.
	      if [ -f "$1" ]; then
		  # Store all test IDs in one variable
		  ALLTESTS=`echo $ALLTESTS; sed -e 's/#.*//' $1`
	      else
		  ALLTESTS=`echo $ALLTESTS $1`
	      fi
	      shift
	      ;;
      esac
    done

    # empty list of test IDs
    if [ -z "$ALLTESTS" ]; then
	echo "$0: No benchmark test IDs specified. Nothing done."
	echo "For help invoke '$0 --help'."
	exit
    fi
}


#  Function: Ensure this script is called from correct working directory
fb_ensureCorrectWorkingDir() {
    # Ensure we are in benchmark folder
    lastdir=`/bin/pwd | sed 's/^.*\/\([^\/]*\)$/\1/'`
    case "$lastdir" in
	benchmark*)
	    # Everything's fine.
	    ;;
	*)
	    # Throw error
	    cat <<EOF 1>&2
$0: Error: Script must be called from directory Featflow2/benchmark
$0: as the GNUmakefile in this directory is needed.
EOF
	    exit 1001
	    ;;
    esac
}


#  Function: Delete files from previous invocations of this script
fb_cleanUpPreviousRun() {
    echo $0": Clearing batch files, log and output files ..."
    LOG_BASE_DIRECTORY=`$GNUMAKE --no-print-directory print-base-log-dir`
    \rm -rf ${LOG_BASE_DIRECTORY} ${JOBFILEPREFIX}.*.sh
}


#  Function: Map local identities to valid email addresses
#            If no identity is given, the email address must exist,
#            otherwise the script will not work.
#            Sets $EMAILADDRESS and $DOSENDMAIL (boolean variable whether to send email at all)
fb_setMailSender() {
    case "$USER" in
	cbecker|featflow|xambeck)
	    EMAILADDRESS=christian.becker@math.tu-dortmund.de
	    DOSENDMAIL=0
	    ;;

	buijssen|xamsbuij)
	    EMAILADDRESS=sven.buijssen@math.tu-dortmund.de
	    DOSENDMAIL=1
	    ;;

	goeddeke)
	    EMAILADDRESS=goeddeke@math.tu-dortmund.de
	    DOSENDMAIL=1
	    ;;

	wobker)
	    EMAILADDRESS=hilmar.wobker@math.tu-dortmund.de
	    DOSENDMAIL=1
	    ;;

	mkoester)
	    EMAILADDRESS=michael.koester@mathematik.tu-dortmund.de
	    DOSENDMAIL=1
	    ;;

	*)
	    if [ "$EMAILADDRESS" = ""]; then
	      cat <<EOF 1>&2
$0: Error: Unknown user $USER.
$0: Cannot determine the email address.
$0: Please update function fb_setMailSender.
EOF
	      exit 1002
	    else
	      cat <<EOF 1>&2
$0: Warning: Unknown user $USER.
$0: Please update function fb_setMailSender.
$0: Using email address: $EMAILADDRESS
EOF
	      DOSENDMAIL=1
	    fi
      ;;
    esac
}


#  Function: Find out how to call GNU make and set '$GNUMAKE' accordingly
fb_findGNUMake() {
    echo $0": Trying to find GNU make... "
    GNUMAKE=""
    for MAKE in make gmake
    do
    	# Check whether program exists
	stdoutput=`which $MAKE > /dev/null 2>&1`;

	# If program exists, check whether its GNU make
	if [ $? -eq 0 ]; then
	    stdoutput=`$MAKE --version > /dev/null 2>&1`
	    if [ $? -eq 0 ]; then
		echo $0": <$MAKE> seems to be GNU make. Using it."
		GNUMAKE=$MAKE
		break
	    fi
	fi
    done
    if [ -z "$GNUMAKE" ]; then
	cat <<EOF 1>&2
$0: Error: No GNU make found. Script aborted.
EOF
	exit 1003
    fi
}


#  Function: Creates all necessary instructions to be able to use exactly
#            these modules later on again (i.e. make 'module' command
#            available, tell 'module' where to find these modulefiles and
#            finally the modules to load).
fb_addModuleInstructions() {
    if [ -n "$MODULESHOME" ]; then
	# 'runtests' is a sh shell script. A jobfile must be a sh shell script 
	# as well, hence.
	echo ". $MODULESHOME/init/sh"
    else
	cat <<EOF 1>&2
$0: Error: \$MODULESHOME not set. Job files cannot be created.
EOF
	exit 1004
    fi

    if [ -n "$MODULEPATH" ]; then
	# Expand any environment variables inside $MODULEPATH by
	# 'eval echo', 'module use' needs space separated directories.
	echo "module use "`eval echo $MODULEPATH | sed 's/:/ /g'`
    else
	cat <<EOF 1>&2
$0: Error: \$MODULEPATH not set. Job files cannot be created.
EOF
	exit 1005
    fi

    if [ -n "$LOADEDMODULES" ]; then
	# Only load 3 modules at once.
	# Modules Enviroment 3.2.x randomly crashes when trying to
	# load/unload more at the same time.
	echo $LOADEDMODULES | sed 's/:/ /g' | xargs -n 3 echo "module load"
    else
	cat <<EOF 1>&2
$0: Error: \$LOADEDMODULES not set. Job files cannot be created.
EOF
	exit 1006
    fi
}


#  Function: Creates the core instructions for a jobfile ('runtests' script)
#            for a given test ID
fb_createRuntestsScript() {
    benchmarktest="$1"  # IN

    # Create a unique temporary file
    # (Unfortunately 'mktemp' does not support suffixes.
    #  So, get a temporary name, append the suffix ".fbconf", check whether
    #  such a file already exists. If so, remove the temporary file created
    #  by mktemp (the one without the suffix), create a new one and repeat 
    #  the test.)
    tmpfile="`mktemp feast.benchmark.schedulefile.XXXXX`";
    trap "rm -f ${tmpfile}; exit 1" 2 3 9
    while test -e ${tmpfile}.fbconf; do
	rm -f ${tmpfile}
	tmpfile="`mktemp feast.benchmark.schedulefile.XXXXX`";
    done
    rm -f ${tmpfile}
    tmpfile="${tmpfile}.fbconf";

    # Hardwired variant of temporary file
#    tmpfile="tempfile.for.schedulingsystem.fbconf"


    # Check whether GNUmakefile is available (i.e. whether configure has been run)
    if [ ! -s GNUmakefile ]; then
	cat <<EOF 1>&2
$0: Error: File 'GNUmakefile' not found. Please run './configure' first.
EOF
	exit 1007
    fi

    # Create a 'runtests' script which serves as base for the jobfile.
    # It's save to call 'make' as we checked for being in benchmark folder
    echo "$benchmarktest" > $tmpfile
    if [ $? -ne 0 ]; then
	cat <<EOF 1>&2
$0: Error: Creating temporary file failed. Script cancelled.
EOF
	exit 1008
    fi

    $GNUMAKE COMPILERVERSION=${COMPILERVERSION} `echo $tmpfile | sed 's/.fbconf$//'`
    # Purposely do not check for errors!
    # Typically, an error is reported if the test ID is unknown or the
    # according test is configured not to be run on the current host. COPROC
    # tests e.g. are part of 'dailytests.fbconf' and 'alltests.fbconf', but
    # should only be run on a supported host. LiDO does not support everything.
    # Checking error codes here would means that this script is aborted
    # as soon as the loop over the test IDs in e.g. 'dailytests.fbconf'
    # reaches the first unsupported test ID. That's not intended.
    # We set a return code, though, to prevent that incomplete or empty
    # jobfiles are submitted to the PBS scheduler.
    if [ $? -ne 0 ]; then
	returncode=1
    else
	returncode=0
    fi
    rm $tmpfile
    trap - 2 3 9;
    return $returncode;
}


#   Function: Determine number of processes to start
fb_getNTASKS() {
    # Feat2 is plain serial. No need to query the grid file and determine
    # the number of parallel blocks required. Neither do we need to respect
    # a hardcoded number of processes, given by an environment variable.
    NTASKS=1
}


#  Function: Create log directory if necessary
fb_createLogDir() {
    directory="$1"  # IN

    if [ -r $directory ]; then
	echo $0": Log directory exists."
    else
	echo $0": Creating log directory."
	mkdir $directory
    fi
}


# Function: Try hard to submit a jobfile
fb_submitJobfile() {
    jobfile="$1"           # IN
    maxjobsmessage="$2"    # IN

    success=0
    # time to wait (in seconds) between subsequent qstat calls
    sleeptime=60
    # how many cycles to wait till for all jobs to finish
    maxwaitcycles=512
    iteration=1
    while test $success -eq 0 -a $iteration -le $maxwaitcycles; do
	output="`qsub $jobfile 2>&1`"
	returncode=$?
	if [ $returncode -eq 0 ]; then
	    echo $output
	    success=1

	# Catch case "invalid credential" aka error code 171. Just
	# re-submit in this case.
	elif [ $returncode -eq 171 ]; then
	    echo $output
	    # Wait and try again
	    iteration=`expr $iteration + 1`
	    echo $0": Waiting 1 second, then retrying submission..."
	    sleep 1

	# Catch case "Maximum number of jobs already in queue".
	# Currently, the message seems not related one to one to
	# a particular return code of the qsub command.
	# So, check for the screen message itself.
	elif [ -n "`echo \"$output\" | grep \"$maxjobsmessage\"`" ]; then
	    echo $output
	    echo "(error code: $returncode)"
	    # Wait and try again
	    iteration=`expr $iteration + 1`
	    echo $0": Waiting $sleeptime seconds, then retrying submission..."
	    sleep $sleeptime

	# All other errors: end script
	else
	    echo $output
	    cat <<EOF 1>&2
$0: Error while submitting jobfile <$jobfile>:
$0: qsub returned error code $returncode.
EOF
	    exit 1010
	fi
    done

}


# Function: Print a nicely formatted list of all test IDs that had errors
fb_postprocess() {
    successfulTests="$1"    # IN
    testIDsWithErrors="$2"  # IN

    # empty list of test IDs
    if [ -z "$ALLTESTS" ]; then
	echo "$0: No benchmark test IDs specified. Nothing done."
	echo "For help invoke '$0 --help'."
	exit
    fi
    # include/create_script.pl reported only errors
    if [ "$successfulTests" -eq "0" ]; then
	cat <<EOF 1>&2
$0: Not a single jobfile could be created as no valid test ID was given.

EOF
	exit 1011
    fi
    # Some tests had errors
    if [ -n "$testIDsWithErrors" ]; then
	cat <<EOF 1>&2
$0: The following test IDs had errors:
EOF
	echo $testIDsWithErrors | tr ' ' '\n' | cat 1>&2
    fi
}
