#!/bin/sh

FORCE_COMPLETE_NODES=0    # If FORCE_COMPLETE_NODES=0, then the term
                          # 'nodes' in variable names actually refers
                          # to cores (e.g. in CORESPERNODE,
                          # CORESPERQUADNODE, eth_maxavailnodes[]).
FORCE_USE_QUAD_QUEUES=0

fb_call() {
    echo
    echo "Schedule script on the LIDO cluster."
    echo "------------------------------------"
    echo "Directly schedules a serial application on the cluster for execution."
    echo "The application must be present as executable."
    echo
    echo "Call of this script:"
    echo
    echo "  lido_schedule_direct [wallclock] [jobname] [email] [executable] [params]"
    echo
    echo "The following parameters must be present:"
    echo "  [jobname]    : is a user defined name for the job"
    echo "  [wallclock]  : Maximum time the executable is allowed to run."
    echo "                 A string like "08:00:00"."
    echo "  [email]      : EMail address of the user that invokes the job."
    echo
    echo "The following parameters are optional."
    echo "  [executable] : Name of the executable to schedule."
    echo "                 If not present, an interactive session will be started."
    echo "  [params]     : Optional parameters to pass to the executable"
    echo
    echo " If no executable is present, an interactive job is started!"
    echo
    echo
    echo "Examples:"
    echo
    echo " Start cc2d, allow at most 8 hours of computation:"
    echo "  lido_schedule_direct \"08:00:00\" mycc2d featflow@featflow.de cc2d"
    echo
    echo " Start an interactive session for 30 minutes:"
    echo "  lido_schedule_direct \"00:30:00\" mycomandline featflow@featflow.de"
    echo
}


########################################################################
#  Function: Query PBS to find out about available nodes and maximum walltime per queue
########################################################################
fb_queryPBSLiDO() {

    case "`hostname -f`" in
	*.lidocluster.hp)
	    ultralong_queue="ultralong_eth"
	    ;;
	*.cvos.cluster)
	    ultralong_queue="neternal_eth"
	    ;;
    esac
    eth[0]="short_eth"
    eth[1]="med_eth"
    eth[2]="long_eth"
    eth[3]=${ultralong_queue}
    ib[0]="short_ib"
    ib[1]="med_ib"
    ib[2]="long_ib"
    quad[0]="short_quad"
    quad[1]="med_quad"
    quad[2]="long_quad"

    # Create temporary file (with unique file name)
    qmgr=`mktemp`
    if test $? -ne 0; then
	cat <<EOF 1>&2
$0: Error: Creating temporary file failed. Script cancelled.
EOF
	exit 2
    fi

    # Query PBS queue manager and store result in temporary file
    qmgr -c 'list queue @master' > ${qmgr}
    if test $? -ne 0; then
	cat <<EOF 1>&2
$0: Error: Could not query PBS manager for available resources. Script cancelled.
EOF
	exit 3
    fi

    # Create temporary file (with unique file name)
    sedFileSuppressOfflineNodes="`mktemp`"".sed"
    if test $? -ne 0; then
	cat <<EOF 1>&2
$0: Error: Creating temporary file failed. Script cancelled.
EOF
	exit 4
    fi

    # Query PBS for offline nodes, transform the output into sed instructions
    # (that remove any occurrence of offline nodes from input strings) and
    # store it to a temporary file
    pbsnodes -l | grep offline | sed 's/^\([^ ]*\).*$/s\/\1+*\/\/;/' > ${sedFileSuppressOfflineNodes}
    if test $? -ne 0; then
	cat <<EOF 1>&2
$0: Error: Could not query PBS for offline nodes. Script cancelled.
EOF
	exit 5
    fi

    # Define a smaller helper routine for code repeatedly needed
    fb_getSettingsForQueue() {
	queue="$1"  # IN
	egrep "^(Queue |[[:space:]]+acl_hosts|[[:space:]]+[^=]+\.lidocluster\.hp|[[:space:]]+resources_max.walltime)" ${qmgr} | \
		# (Sed:) Unwrap acl_hosts list.
		sed ':x; /,$/ { N; s/\n[ ]*//; tx}' | \
		# Turn output into one line per queue
		grep -v "^Queue default" | \
		sed 'N; N; s/\n//g;' | \
		# Suppress offline nodes
		sed -f ${sedFileSuppressOfflineNodes} | \
		# Extract current queue
		grep -w ${queue}
    }

    # eth queue
    for i in 0 1 2 3; do
	queue=${eth[$i]};
	# Determine maximum wall clock time
	eth_wallclockseconds[$i]=`fb_getSettingsForQueue $queue | awk '{print $NF}' | awk -F: '{print $1*3600+$2*60+$3}'`
	# Determine maximum number of nodes available
	eth_maxavailnodes[$i]=`fb_getSettingsForQueue $queue | sed -e 's/^.*acl_hosts = \([^ \t]*\).*/\1/; s/[+,]/ /g;' | wc -w`
	if test "$FORCE_COMPLETE_NODES" -eq "0"; then
	    eth_maxavailnodes[$i]=`expr ${eth_maxavailnodes[$i]} \* ${CORESPERNODE}`
	fi
    done

    # ib queue
    for i in 0 1 2; do
	queue=${ib[$i]};
	# Determine maximum wall clock time
	ib_wallclockseconds[$i]=`fb_getSettingsForQueue $queue | awk '{print $NF}' | awk -F: '{print $1*3600+$2*60+$3}'`
	# Determine maximum number of nodes available
	ib_maxavailnodes[$i]=`fb_getSettingsForQueue $queue | sed -e 's/^.*acl_hosts = \([^ \t]*\).*/\1/; s/[+,]/ /g;' | wc -w`
	if test "$FORCE_COMPLETE_NODES" -eq "0"; then
	    ib_maxavailnodes[$i]=`expr ${ib_maxavailnodes[$i]} \* ${CORESPERNODE}`
	fi
    done

    # quad queue
    for i in 0 1 2; do
	queue=${quad[$i]};
	# Determine maximum wall clock time
	quad_wallclockseconds[$i]=`fb_getSettingsForQueue $queue | awk '{print $NF}' | awk -F: '{print $1*3600+$2*60+$3}'`
	# Determine maximum number of nodes available
	quad_maxavailnodes[$i]=`fb_getSettingsForQueue $queue | sed -e 's/^.*acl_hosts = \([^ \t]*\).*/\1/; s/[+,]/ /g;' | wc -w`
	if test "$FORCE_COMPLETE_NODES" -eq "0"; then
	    quad_maxavailnodes[$i]=`expr ${quad_maxavailnodes[$i]} \* ${CORESPERQUADNODE}`
	fi
    done

    rm -f ${qmgr} ${sedFileSuppressOfflineNodes} `echo ${sedFileSuppressOfflineNodes} | sed 's/\.sed$//'`
}


########################################################################
#  Function: Determine most suitable queue depending on node, walltime and interconnect requirements
########################################################################
fb_determineQueue() {
    nodes="$1"      # IN (format: integer)
    queuetype="$3"  # IN (valid: "_eth", "_ib" or "_quad")

    walltimeseconds="`echo $2 | awk -F: '{print $1*3600+$2*60+$3}'`"   # IN (format: hh:mm:ss)


    # Check ethernet queues
    # (Force use of ethernet queue for serial jobs)
    if test "${queuetype}" = "_eth" -o "${nodes}" = 1; then
	for i in 0 1 2 3; do
	    queue=${eth[$i]};
	    # Check whether enough nodes in queue available
	    if test ${nodes} -le ${eth_maxavailnodes[$i]}; then
		# Check whether wall time limits are not exceeded
		if test ${walltimeseconds} -le ${eth_wallclockseconds[$i]}; then
		    echo ${queue};
		    return;
		fi
	    fi
	done
    fi


    # Check infiniband queues
    # (Prohibit use of infiniband queue for serial jobs)
    if test "${queuetype}" = "_ib" -a "${nodes}" != 1; then
	for i in 0 1 2; do
	    queue=${ib[$i]};
	    # Check whether enough nodes in queue available
	    if test ${nodes} -le ${ib_maxavailnodes[$i]}; then
		# Check whether wall time limits are not exceeded
		if test ${walltimeseconds} -le ${ib_wallclockseconds[$i]}; then
		    echo ${queue};
		    return;
		fi
	    fi
	done
    fi


    # Check quadcore queues
    if test "${queuetype}" = "_quad"; then
	for i in 0 1 2; do
	    queue=${quad[$i]};
	    # Check whether enough nodes in queue available
	    if test ${nodes} -le ${quad_maxavailnodes[$i]}; then
		# Check whether wall time limits are not exceeded
		if test ${walltimeseconds} -le ${quad_wallclockseconds[$i]}; then
		    echo ${queue};
		    return;
		fi
	    fi
	done
    fi
}

########################################################################
########################################################################
########################################################################
# Actual script
########################################################################
########################################################################
########################################################################

echo

if test "$1" = ""; then
  fb_call
  echo
  echo "No wallclock given!"
  exit 1
fi

wallclock=$1

if test "$2" = ""; then
  fb_call
  echo
  echo "No jobname given!"
  exit 2
fi

jobname=$2

if test "$3" = ""; then
  fb_call
  echo
  echo "No Email address given!"
  exit 3
fi

emailaddress=$3

# run a serial application, we need one core (possibly allocating a complete node
# consisting of more than 1 core)
nodes=1

# Get the correct queue from lido
fb_queryPBSLiDO
if test "$FORCE_USE_QUAD_QUEUES" -eq "1"; then
    pbsOptionQueue=`fb_determineQueue "${nodes}" "${wallclock}" "_quad"`
else
    pbsOptionQueue=`fb_determineQueue "${nodes}" "${wallclock}" "_eth"`
fi

if test "$FORCE_COMPLETE_NODES" -eq "1"; then
    # Some people prefer to allocate complete nodes. The thing is just that syntax
    # differs for quad nodes on the one hand and nodes with ethernet/infiniband nodes
    # on the other. Determine syntax from queue choosen.
    # Idea of detection: Try cutting of substring "_quad" at the end of queue variable.
    # If this succeeds, we actually use one of the quad queues.
    if test "${pbsOptionQueue%_quad}" != "$pbsOptionQueue"; then
	pbsOptionNodes="#PBS -l nodes=$nodes:ppn=${CORESPERQUADNODE}";
    else
	pbsOptionNodes="#PBS -l nodes=$nodes:ppn=${CORESPERNODE}";
    fi
else
    # No complete nodes, just take the cores whereever we can get them.
    pbsOptionNodes="#PBS -l nodes=$nodes";
fi

echo Scheduling job \"$jobname\" on queue \"$pbsOptionQueue\" for \"$wallclock\"

if test $# -gt 3; then

    executable=$4

    # Shift the parameters, so the remaining parameters are passed
    # to the application by "$@" !
    shift 4

    # Write a job file
    cat <<EOF > ${jobname}.job
#!/bin/sh

#PBS -l walltime="${wallclock}"
${pbsOptionNodes}
#PBS -M $emailaddress
#PBS -b bae
#PBS -q $pbsOptionQueue
#PBS -j oe
#PBS -N ${jobname}
#PBS -o ${jobname}.output

cd $PWD
./$executable $@
EOF

    qsub ${jobname}.job

else

    echo Invoking interactive job...

    # Write a job file
    cat <<EOF > ${jobname}.job
#!/bin/sh

#PBS -l walltime="${wallclock}"
${pbsOptionNodes}
#PBS -M $emailaddress
#PBS -b bae
#PBS -q $pbsOptionQueue
#PBS -j oe
#PBS -N ${jobname}
#PBS -o ${jobname}.output

cd $PWD
EOF

    # Start an interactive job
    qsub -I ${jobname}.job

fi
