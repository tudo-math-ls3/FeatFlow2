# Base name of the test-set. Shall be unique.

testname = demotestset

# Test-id for the tests.
# ="": Determine test-id automatically (default)

testid =

# A comment for the test which may take several lines. Each line must end
# with a double-backslash if the comment continues in the next line.
# the comment is included with comment characters at teh beginning of the file.

comment = This is a demo testset.\\
 The set runs about a couple of levels and damping parameters.\\
 The NLMIN parameter changes with the NLMAX parameter.

# Application
# If empty (""), this is not printed.

appl = testapplication

# Test class.
# If empty (""), this is not printed.

class = DEFAULT

# An optional description of the test set.
# May optionally contain references to the variables below.

descr = Level $(NLMAX), Element $(ELNAME), OMEGA $(OMEGA), NSM $(NSM)

# Data file that is used by the application to provide parameters.
# May optionally contain references to the variables below.

datfile = "./data/demotestset.dat"

# Name + Path of one or multiple include file which is included prior to 
# every test. If multiple include files are to be defined, there must be
# one line "testinclude = "..." " for each include file.
# May optionally contain references to the variables below.

testinclude = "testdefaults.fbdef"

# List of parameters.
#
# The values of the parameters are separated via commas.
# Example:
#    NLMAX = 3,4,5,6,7,8
#
# If a parameter name ends with "*", it is dependent on the parameter in the
# previous line, so it proceeds a step if the previous parameter proceeds
# to the next step. In this case, if the list is shorter than the
# previous parameter, counting starts from the beginning if the end
# is reached. If the parent parameter is reset, counting starts always
# at the beginning.
# Example:
#    NLMAX = 3,4,5,6
#    NLMIN* = 2,3
# This generates:
#    (NLMAX,NLMIN) = (3,2) , (4,3) , (5,2) , (6,3)
# Example:
#    IELEMENT = 11,13
#    NLMAX = 3,4,5
#    NLMIN* = 2,3
# This generates:
#    (IELEMENT,NLMAX,NLMIN) = (11,3,2) , (11,4,3) , (11,5,2) ,
#                             (13,3,2) , (13,4,3) , (13,5,2)
#
# If a parameter name ends with a ".", it is dependent on the previous parameter
# (like "*"), but it is not included in the test-id of the test.
# Example:
#    IELEMENT. = 11,13
# In this case, IELEMENT changes between 11 and 13 together with its parent, 
# but it is not included in the test-id.
#
# If a parameter name ends with a "~", it is dependent on the previous parameter
# (like "*"), but it is not included in the default test-id of the test (like 
# ".") and it is not included in the test settings output at all. "~" parameters
# can be called "comment" parameters that allow to specify e.g. text strings 
# that quantify a parmeter for ither dependent parameters. 
# Example:
#    descr = Element: $(ELNAME)
#    IELEMENT = 11,13
#    ELNAME~ = Q1, Q2
# In this case, the description will contain the name of the element
# (either Q1 or Q2), but the parameter ELNAME is not included
# in the parameter output that specifies the test.
#
# A parameter modifier "!" proceeds the parameter until the end of the
# list is reached and stops there. The parameter is not reset until its parent
# is reset. "!" may appear in combination with "*", "~" and "."; if no
# other modifier is present, "!" works as "*" but stops at the end of the list.
# Example:
#    IELEMENT = 11, 13
#    ITIMESTEP = 0.7, 0.6, 0.5, 0.4, 0.3
#    SCOMMENT1!~ = "large", "large", "small"
#    SCOMMENT2~  = "odd", "even"
# This generates:
#    ( IELEMENT, ITIMESTEP, SCOMMENT1, SCOMMENT2)
#
#  = ( 11, 0.7, "large", "odd"  ),
#    ( 11, 0.6, "large", "even" ),
#    ( 11, 0.5, "small", "odd"  ),
#    ( 11, 0.4, "small", "even" ),
#    ( 11, 0.3, "small", "odd"  ),
#
#    ( 13, 0.7, "large", "odd"  ),
#    ( 13, 0.6, "large", "even" ),
#    ( 13, 0.5, "small", "odd"  ),
#    ( 13, 0.4, "small", "even" ),
#    ( 13, 0.3, "small", "odd"  )
# 
#
# The variable names which are not marked with a "." are included in
# the name of the test id with an index specifying the corresponding setting.
#
# If the value is a numerical value, it is acceptable to specify
# ranges in the form "start:end:stepsize", where "stepsize" is assumed
# to be =1 if not specified. Example: "2:8:3" generates a sequence "2 5 8".
# If the parameter is a dependent parameter (marked with "*"), either
# "start" or "end" can be skipped. 
# Example: Let the parent parameter have 3 entries. Then
#    "2::4" generates a sequence "2 6 10"
#    ":6:4" generates a sequence "-2 2 6".
#
# String parameters must be enclosed in "" and are acceptable either
# as single parameter or list of strings.
#
# A variable may contain another variable, either direct or by index.
# If the content of another variable should be included into the string, the
# variable to be included must be encoded as "$(NAME)". If the index should
# be included, it must be encoded as "$(%NAME)".
# Example:
#    NLMAX = 5,6,7
#    OMEGA* = 0.5, 0.7, 0.9
#    OUTPUTFILE. = "u_$(NLMAX)_$(%OMEGA).vtk"
# This generates the sequence
#    "u_5_1.vtk", "u_6_2.vtk", "u_7_3.vtk"
# The "%"-modifier allows to refer to the index which may be a better
# choice for variables containing float numbers. Indices start with 1.
#
# If the variable contains a string of the form ´command´, the 'command'
# is interpreted as a shell command and executed. The resulting command
# replaces the command string. This e.g. allows to use shell commands like
# "expr" to do complex operations to variable values or indices.
# Quotes inside of command must be escaped with a backslash.
# Example:
#    NSM. = `expr 2 \"*\" $(%NLMAX)`
# This executes the command 'expr 2 "*" $(NLMAX) - 1' and fetches its result
# into NSM. Therefore, this generates a sequence "2 4 6 8 ...".
#
# The parameter allows an associated alias.  The alias is the name of
# the parameter when writing out the test definition file. The parameter
# name is the internal name used to generate the test id.
# Definition:
#   internal name : external name = values
#
# The "\" character as last character in a line allows to break a parameter list
# to several lines.

# Level 3-8

NLMAX = 3,4,5,6,7,8

# min. level 2 3 2 3 ...

NLMIN* = 2,3

# Multiply the index of NLMAX by 2 and take that value ans number of
# smoothing steps; thus the number of smoothing steps doubles with
# every level. NSM is taken as constant and not included to the test-id.
# The index starts at 1.

NSM. = `expr 2 \"*\" $(%NLMAX)`

# Element ID, changing with every level. Not included in the test-id.
# The element id is followed by the element name which is an internal
# variable, not included in the test-id, but used for documentational
# purposes in "descr".

IELEMENT. = 11, 13
ELNAME~ = Q1, Q2

# Damping 0.3, 0.5, 0.7, 0.9

OMEGA:LINSOL_OMEGA = 0.3:0.9:0.2

# Name of the output file. Depends on the level and omega.
# The omega value itself is not included to the filename, only the
# corresponding index is included.

OUTPUTFILE. = "u_$(NLMAX)_$(%OMEGA).vtk"
