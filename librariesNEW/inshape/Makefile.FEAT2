# -*- makefile -*-

###############################################################
# 
#	Makefile for the inshape2d + opennurbs library
#       ----------------------------------------------
#       These libraries implement NURBS-curves and surfaces
#	as well as a collection of algorithms that solve 
#       geometrical problems related to NURBS
#       and polygonial curves
#
#       Date:
#       ****************************************************
#       ->02.03.2010
###############################################################

.PHONY: default
libinshape2d.a: $(OBJDIR)/libinshape2d.a

# Which compiler to use
CC = gcc
CXX = g++

# What options to be used by the compiler
COPTIONS = -D_GNU_SOURCE -DMY_ZCALLOC -DZ_PREFIX

# What options to be used by the loader
LDOPTIONS =

# What to use for create a library
ARCH = ar qvl 

# What to use for indexing the archive
RANLIB = ranlib

# Where to find inshape source files
SRCDIR = src

# Where to find the opennurbs source files
ONDIR = ../opennurbs

# Where to find the ZLIB source files 
ZLIBDIR = ../opennurbs/zlib

# Where to store the object files
OBJDIR = object

# Where to look for include files
INCLUDES = -Isrc -Iinclude -I$(ONDIR)

LD = LC_ALL=C $(CC) -L.

###############################################################
# We will need this set of rules to build our targets
###############################################################
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp  # kernel files
	$(CXX) $(CFLAGSCXX) $(COPTIONS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(ONDIR)/%.cpp   # opennurbs files
	$(CXX) $(CFLAGSCXX) $(COPTIONS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(ONDIR)/%.c     # opennurbs files
	$(CXX) $(CFLAGSCXX) $(COPTIONS) $(INCLUDES) -c $< -o $@

$(OBJDIR)/%.o: $(ZLIBDIR)/%.c
	$(CC) $(CFLAGSC) $(COPTIONS) $(INCLUDES) -c $< -o $@

###############################################################
#               List of source files
###############################################################
ON_HDR=opennurbs.h \
		opennurbs_3dm.h \
		opennurbs_3dm_attributes.h \
		opennurbs_3dm_properties.h \
		opennurbs_3dm_settings.h \
		opennurbs_annotation.h \
		opennurbs_annotation2.h \
		opennurbs_arc.h \
		opennurbs_arccurve.h \
		opennurbs_archive.h \
		opennurbs_array.h \
		opennurbs_array_defs.h \
		opennurbs_bezier.h \
		opennurbs_bitmap.h \
		opennurbs_bounding_box.h \
		opennurbs_brep.h \
		opennurbs_circle.h \
		opennurbs_color.h \
		opennurbs_cone.h \
		opennurbs_crc.h \
		opennurbs_curve.h \
		opennurbs_curveonsurface.h \
		opennurbs_curveproxy.h \
		opennurbs_cylinder.h \
		opennurbs_defines.h \
		opennurbs_detail.h \
		opennurbs_dimstyle.h \
		opennurbs_ellipse.h \
		opennurbs_error.h \
		opennurbs_evaluate_nurbs.h \
		opennurbs_extensions.h \
		opennurbs_font.h \
		opennurbs_fpoint.h \
		opennurbs_geometry.h \
		opennurbs_gl.h \
		opennurbs_group.h \
		opennurbs_hatch.h \
		opennurbs_instance.h \
		opennurbs_intersect.h \
		opennurbs_knot.h \
		opennurbs_layer.h \
		opennurbs_light.h \
		opennurbs_line.h \
		opennurbs_linecurve.h \
		opennurbs_linestyle.h \
		opennurbs_linetype.h \
		opennurbs_mapchan.h \
		opennurbs_massprop.h \
		opennurbs_material.h \
		opennurbs_math.h \
		opennurbs_matrix.h \
		opennurbs_memory.h \
		opennurbs_mesh.h \
		opennurbs_nurbscurve.h \
		opennurbs_nurbssurface.h \
		opennurbs_object.h \
		opennurbs_object_history.h \
		opennurbs_objref.h \
		opennurbs_offsetsurface.h \
		opennurbs_optimize.h \
		opennurbs_plane.h \
		opennurbs_planesurface.h \
		opennurbs_pluginlist.h \
		opennurbs_point.h \
		opennurbs_pointcloud.h \
		opennurbs_pointgeometry.h \
		opennurbs_pointgrid.h \
		opennurbs_polycurve.h \
		opennurbs_polyline.h \
		opennurbs_polylinecurve.h \
		opennurbs_rendering.h \
		opennurbs_revsurface.h \
		opennurbs_sphere.h \
		opennurbs_string.h \
		opennurbs_sumsurface.h \
		opennurbs_surface.h \
		opennurbs_surfaceproxy.h \
		opennurbs_system.h \
		opennurbs_textlog.h \
		opennurbs_texture.h \
		opennurbs_texture_mapping.h \
		opennurbs_torus.h \
		opennurbs_userdata.h \
		opennurbs_uuid.h \
		opennurbs_version.h \
		opennurbs_viewport.h \
		opennurbs_workspace.h \
		opennurbs_x.h \
		opennurbs_xform.h \
		opennurbs_zlib.h

# Prepend the correct path to the file name
ON_INC=$(patsubst %.h, $(ONDIR)/%.h, $(ON_HDR))

ON_CPP=opennurbs_3dm_attributes.cpp \
		opennurbs_3dm_properties.cpp \
		opennurbs_3dm_settings.cpp \
		opennurbs_annotation.cpp \
		opennurbs_annotation2.cpp \
		opennurbs_arc.cpp \
		opennurbs_arccurve.cpp \
		opennurbs_archive.cpp \
		opennurbs_array.cpp \
		opennurbs_basic.cpp \
		opennurbs_bezier.cpp \
		opennurbs_beziervolume.cpp \
		opennurbs_bitmap.cpp \
		opennurbs_bounding_box.cpp \
		opennurbs_brep.cpp \
		opennurbs_brep_changesrf.cpp \
		opennurbs_brep_extrude.cpp \
		opennurbs_brep_io.cpp \
		opennurbs_brep_isvalid.cpp \
		opennurbs_brep_kinky.cpp \
		opennurbs_brep_tools.cpp \
		opennurbs_brep_v2valid.cpp \
		opennurbs_circle.cpp \
		opennurbs_color.cpp \
		opennurbs_cone.cpp \
		opennurbs_crc.cpp \
		opennurbs_curve.cpp \
		opennurbs_curveonsurface.cpp \
		opennurbs_curveproxy.cpp \
		opennurbs_cylinder.cpp \
		opennurbs_defines.cpp \
		opennurbs_detail.cpp \
		opennurbs_dimstyle.cpp \
		opennurbs_ellipse.cpp \
		opennurbs_error.cpp \
		opennurbs_error_message.cpp \
		opennurbs_evaluate_nurbs.cpp \
		opennurbs_extensions.cpp \
		opennurbs_font.cpp \
		opennurbs_geometry.cpp \
		opennurbs_gl.cpp \
		opennurbs_group.cpp \
		opennurbs_hatch.cpp \
		opennurbs_instance.cpp \
		opennurbs_intersect.cpp \
		opennurbs_knot.cpp \
		opennurbs_layer.cpp \
		opennurbs_light.cpp \
		opennurbs_line.cpp \
		opennurbs_linecurve.cpp \
		opennurbs_linetype.cpp \
		opennurbs_massprop.cpp \
		opennurbs_material.cpp \
		opennurbs_math.cpp \
		opennurbs_matrix.cpp \
		opennurbs_memory.c \
		opennurbs_memory_util.c \
		opennurbs_mesh.cpp \
		opennurbs_mesh_tools.cpp \
		opennurbs_morph.cpp \
		opennurbs_nurbscurve.cpp \
		opennurbs_nurbssurface.cpp \
		opennurbs_nurbsvolume.cpp \
		opennurbs_object.cpp \
		opennurbs_object_history.cpp \
		opennurbs_objref.cpp \
		opennurbs_offsetsurface.cpp \
		opennurbs_optimize.cpp \
		opennurbs_plane.cpp \
		opennurbs_planesurface.cpp \
		opennurbs_pluginlist.cpp \
		opennurbs_point.cpp \
		opennurbs_pointcloud.cpp \
		opennurbs_pointgeometry.cpp \
		opennurbs_pointgrid.cpp \
		opennurbs_polycurve.cpp \
		opennurbs_polyline.cpp \
		opennurbs_polylinecurve.cpp \
		opennurbs_revsurface.cpp \
		opennurbs_sphere.cpp \
		opennurbs_string.cpp \
		opennurbs_sum.cpp \
		opennurbs_sumsurface.cpp \
		opennurbs_surface.cpp \
		opennurbs_surfaceproxy.cpp \
		opennurbs_textlog.cpp \
		opennurbs_torus.cpp \
		opennurbs_userdata.cpp \
		opennurbs_uuid.cpp \
		opennurbs_viewport.cpp \
		opennurbs_workspace.cpp \
		opennurbs_wstring.cpp \
		opennurbs_x.cpp \
		opennurbs_xform.cpp \
		opennurbs_zlib.cpp \
		opennurbs_zlib_memory.cpp

# Prepend the correct path to the file name
# and take care of mixed .c and .cpp sources
ON_SRC=$(patsubst %.cpp, $(ONDIR)/%.cpp, $(filter %.cpp,$(ON_CPP)))

ON_SRC+=$(patsubst %.c, $(ONDIR)/%.c, $(filter %.c,$(ON_CPP)))

ON_OBJ=$(patsubst %.cpp, $(OBJDIR)/%.o, $(filter %.cpp,$(ON_CPP)))

ON_OBJ+=$(patsubst %.c, $(OBJDIR)/%.o, $(filter %.c,$(ON_CPP)))

ZLIB_HDR= crc32.h \
	deflate.h \
	inffast.h \
	inffixed.h \
	inflate.h \
	inftrees.h \
	trees.h \
	zconf.h \
	zlib.h \
	zutil.h \

ZLIB_INC=$(patsubst %.h, $(ZLIBDIR)/%.h, $(ZLIB_HDR))

ZLIB_C= adler32.c \
	compress.c \
	crc32.c \
	deflate.c \
	infback.c \
	inffast.c \
	inflate.c \
	inftrees.c \
	trees.c \
	uncompr.c \
	zutil.c

ZLIB_SRC=$(patsubst %.c, $(ZLIBDIR)/%.c, $(ZLIB_C))

ZLIB_OBJ=$(patsubst %.c, $(OBJDIR)/%.o, $(ZLIB_C))	

KERNEL_HDR=dynamicarray.h \
	mathglobals.h \
	matrix2x2.h \
	matrix3x3.h \
	matrix4x4.h \
	quaternion.h \
	vector2.h \
	vector3.h \
	vector4.h \
	aabb2.h \
	aabbtree.h \
	obb2.h \
	bctree.h \
	sbbtree.h \
	sbb.h \
	approxcurve.h \
	basiccurve.h \
	binstree.h \
	feat2ops.h \
	paramline.h \
	bspline.h \
	distops.h \
	exception.h \
	fileParser.h \
	geomops.h \
	graham.h \
	macros.h \
	nurbs.h \
	primops.h \
	rootfinder.h \
	interface.h

KERNEL_INC=$(patsubst %.h, include/%.h, $(KERNEL_HDR))

KERNEL_CPP=dynamicarray.cpp \
	matrix2x2.cpp \
	quaternion.cpp \
	vector2.cpp \
	vector3.cpp \
	aabb2.cpp \
	aabbtree.cpp \
	obb2.cpp \
	bctree.cpp \
	sbbtree.cpp \
	sbb.cpp \
	approxcurve.cpp \
	basiccurve.cpp \
	feat2ops.cpp \
	paramline.cpp \
	bspline.cpp \
	distops.cpp \
	exception.cpp \
	fileParser.cpp \
	geomops.cpp \
	graham.cpp \
	nurbs.cpp \
	primops.cpp \
	rootfinder.cpp \
	interface.cpp

KERNEL_SRC=$(patsubst %.cpp, $(SRCDIR)/%.cpp, $(KERNEL_CPP))

KERNEL_OBJ=$(patsubst %.cpp, $(OBJDIR)/%.o, $(KERNEL_CPP))

OBJS = $(KERNEL_OBJ) $(ZLIB_OBJ) $(ON_OBJ)

#-------------------------------------------------------------------------------
# Create the library
#-------------------------------------------------------------------------------
# Note:
# Explicitly take precautions to reflect the considerations in Section 11.3 of 
# the GNU Make Manual, http://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls:
# This Makefile is potentially called simultaneously from multiple make processes,
# e.g. when compiling the FEAT2 regression benchmark in parallel. Concurrent 
# attempts to create the archive should not happen. Try to avoid it with the
# usual FEAT2 lock file mechanism.
include ../create_library.mk
$(OBJDIR)/libinshape2d.a:  LOCKFILE = ../LOCK.creating.libinshape2d.a
$(OBJDIR)/libinshape2d.a:  WAITTIME = 15
$(OBJDIR)/libinshape2d.a:  RETRIES  = 24
$(OBJDIR)/libinshape2d.a: $(OBJS)
	@$(CREATE_LIB)

# Function to delete a single file at once
define remove_file
 rm -f $(file)

endef

clean:
        # Delete every file separately to prevent errors of kind: 
        # execvp: rm: Arg list too long
	-$(foreach file, $(OBJS) $(OBJDIR)/libinshape2d.a, $(remove_file))
	-if test -d $(OBJDIR); then rmdir $(OBJDIR); fi;

purge:
        # Delete every file separately to prevent errors of kind: 
        # execvp: rm: Arg list too long
	-$(foreach file, $(OBJS) $(OBJDIR)/libinshape2d.a, $(remove_file))
	-for dir in $(OBJDIR); do if test -d $${dir}; then rmdir $${dir}; fi; done

# An order-only prerequisites shall not be put on the same line as a prerequisite 
# of an implicit rule. Otherwise the target defined in this implicit rule is
# rebuilt every time you invoke make!
$(OBJS): | $(OBJDIR)
$(OBJDIR)/%.o: GKlib/%.c
	LC_ALL=C $(CC) $(CFLAGS) -Iinclude -IGKlib -Ilibmetis -c $< -o $@

$(OBJDIR)/%.o: libmetis/%.c
	LC_ALL=C $(CC) $(CFLAGS) -Iinclude -IGKlib -Ilibmetis -c $< -o $@

$(OBJDIR):
	@test -d $(OBJDIR) || (rm -f $(OBJDIR); mkdir -p $(OBJDIR))

# Empty targets in order for all third party libraries to provide the same
getlib:
getlibs: