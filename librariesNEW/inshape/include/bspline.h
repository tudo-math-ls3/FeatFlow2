//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : CBSpline.h
//  @ Date : 16.06.2006
//  @ Author : Raphael Mnster
//
//


#if !defined(_CBSPLINE_H)
#define _CBSPLINE_H




#include <opennurbs.h>
#include <vector2.h>
#include <vector3.h>
#include <dynamicarray.h>
#include <vector>
#include <basiccurve.h>


//===================================================
//					DEFINES
//===================================================

#define TARGETDEPTH 3

//===================================================
//				Typedefs and structs
//===================================================

typedef CDynamicArray<Real> RealArray;
typedef CDynamicArray<VECTOR2> CPArray;
typedef CDynamicArray<VECTOR3> CP3Array;

class CSBBTree;
class CSBB;

/////////////////* HELPER FUNCTIONS */////////////////

/////////////////////////////////////////////////////////////////////
//                                                                 //
// Helper function that computes the binomial coefficient bin(n k) //
//                                                                 //
/////////////////////////////////////////////////////////////////////

inline int BinCoeff(int n, int k)
{
	if (n<2 || k==0 || k==n) return 1;
	int c=1;
	for (int j=1; j <= k; j++)
	c = c*(n-j+1)/j;
	return c;
}//end BinCoeff

inline int NodeCount(int iDepth, int nStartNodes)
{
	int iNodeCount = 0;
	int n = nStartNodes;
	for(int i = 0; i < iDepth; i++)
	{
		
		iNodeCount += n;
		n *= 2;

	}//end for
	return iNodeCount;
}//end NodeCount

/*!
    \fn CBSpline

///===========================================================================================================
/// This class is used to represent a BSpline curve and stores all the  
/// neccessary information. The array m_ControlPoints stores the        
/// control points, m_KnotVector holds the knots.                    
/// Member variables:                                                   
///          m_ControlPoints  : array of VECTOR2s
///			m_KnotVector	 : array of knots
///          m_Boxes			 : vector of segment bounding boxes                 
///          m_Hull			 : indices of the points that form the convex hull 
///          m_grH			 : class that contains alorithms to compute a convex
///								hull                                             
///          m_ideg			 : degree of the curve                              
///          m_inumPoints	 : number of control points                   
///          m_inumKnots		 : number of knots = numPoints + degree       
///		    m_vCog			 : center of gravity of the curve
///===========================================================================================================

 */

class CBSpline : public CBasicCurve {

public:

	//constructor
	CBSpline(int deg, int numP, Real *kV, VECTOR2 *cP, int numWrapped);

	//default constructor
	CBSpline(){};

	//deconstructor
	~CBSpline();

	int findKnotSpan(Real u_v);

	virtual VECTOR2 CoxDeBoor(Real u);

	VECTOR2 deBoor1(Real u_v, bool draw=false);

	Real** derivativeBasis(Real u, int n);

	virtual VECTOR2* curveDerivs(Real u, int n);

	/* inline get functions */
	
	inline int getNumPoints(){return m_inumPoints;}
	inline int getDeg(){return m_ideg;}
	inline int getNumKnots(){return m_inumKnots;}
	inline VECTOR2 getCog(){return m_vCog;}
	inline void setCog(VECTOR2 vCog){m_vCog = vCog;}
	inline int getBoxCount(){return m_iBoxes;};

	inline std::vector<CSBB*>& GetBoxes() {return m_Boxes;};

	inline RealArray& KnotVector(){return m_KnotVector;};

	inline Real GetKnot(int i)const {return m_KnotVector[i];};

	inline VECTOR2 GetCP(int i) const {return m_ControlPoints[i];};

	inline int NumBoxes() const {return (int)m_Boxes.size();};

	inline const std::vector<int>& GetHull() const {return m_Hull;};

	

	Real getIntervalLength(CSBB *box);
	void setNumPoints(int n){m_inumPoints = n;}
	void setNumKnots(int n){m_inumKnots = n;}
	void genBoxes();
	void genHull();
	void genHullBox();
	void createHierarchy();
	void subdivideBoxes();
	bool insertKnot(Real u, int t);
	void findMonotoneSegments(std::vector<VECTOR2>& vPoints, std::vector<Real>& vRoots);
	void wrapPoints();
	virtual void scale(Real dScale);
	virtual void translateCurve(VECTOR2 vTrans);
	virtual void rotateCurve(Real dAngle);
	virtual void rotateBack(Real dAngle);
	virtual void rotate(Real dAngle){};
	void updatebBox();
	void destroyHierarchy();
	int getMultiplicity(Real u);
	void updateCog();
	

	friend ostream& operator<<(ostream& out, CBSpline &pCurve);

	virtual void toFile(const char *fileName);
    virtual void GenSamples(std::vector<VECTOR2> &samples, int nS, Real start, Real end);

	CSBBTree **m_Hierarchy;


protected:
	int 	  m_sWrap;
	int		  m_ideg;
	int		  m_inumPoints;
	int		  m_inumKnots;
	int		  m_iBoxes;
	VECTOR2   m_vCog;

	CDynamicArray<Real>      m_KnotVector;
	CDynamicArray<VECTOR2>   m_ControlPoints;

	std::vector<CSBB*> m_Boxes;
	std::vector<int> m_Hull;
	
	
};



#endif  //_CBSPLINE_H
