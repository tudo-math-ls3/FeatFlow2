//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : graham.h
//  @ Date : 16.06.2006
//  @ Author : Raphael Mnster
//
//


#if !defined(_GRAHAM_H)
#define _GRAHAM_H


#include   "macros.h"
#include "vector2.h"
#include <search.h>
#include <vector>

#define EXIT_FAILURE   1
#define X   0
#define Y   1
//typedef enum { FALSE, TRUE }   bool;

#define FALSE 0
#define TRUE 1

#define DIM 2               /* Dimension of points */
typedef int tPointi[DIM];   /* Type integer point */


/*----------Point(s) Structure-------------*/
typedef struct tPointStructure tsPoint;
typedef tsPoint *tPoint;
struct tPointStructure {
   int     vnum;
   tPointi v;
   bool    del;
};
/* Global variables */
#define PMAX    1000               /* Max # of points */
typedef tsPoint tPointArray[PMAX];
static tPointArray P;


/*----------Stack Structure-------------*/
typedef struct tStackCell tsStack; /* Used on in NEW() */
typedef tsStack *tStack;
struct tStackCell {
   tPoint   p;
   tStack   next;
};

typedef struct
{
	int* indices;
	int  n;
}hull;

using namespace std;


class graham {

public: 

		std::vector<int>    compConvexHull();
		graham();
		VECTOR2* m_vPoints;
		int		m_inumPoints;
		int		size;
		int		sc;
		~graham();
		tStack	Pop( tStack s );
		std::vector<int>     PrintStack( tStack t );
		tStack  Push( tPoint p, tStack top );
		tStack  Graham( void );
		void    Squash( void );
		int*	cpyPoints(int num, tStack t);
		void	Copy( int i, int j );
		void    PrintPostscript( tStack t );
		//int     Compare( const void *tp1, const void *tp2 );
		void    FindLowest( void );
		void	Swap( int i, int j );

		int     AreaSign( tPointi a, tPointi b, tPointi c );
		int     Area2( tPointi a, tPointi b, tPointi c );
		bool    Left( tPointi a, tPointi b, tPointi c );
		int     ReadPoints(  );
		void    getPoints(VECTOR2* pvPts, int num, int scale);
		void    getPoints(vector<VECTOR2> vPts, int scale);
		void    PrintPoints( void );

};

#endif
