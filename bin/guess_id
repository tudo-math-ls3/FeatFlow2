#!/bin/sh
#$Id: guess_id,v 1.2 2006/02/27 10:33:57 mkoester Exp $
#
# inspired by
# ftp://ftp.gnu.org/pub/gnu/config/config.guess
# and
# http://people.debian.org/~falk/gcc-arch
#

# the gnu config.guess would be good choice but it doesn't seem to
# distinguish different pc processors like athlon/pentium4....

# Purpose:
# Checks the available machine/os information and creates an id of the
# form machine_architecture-cpu-os
#
# If this script is called with an additional parameter, then the 
# corresponding substring is return instead of the complete ID.
# Possible choices for the parameter are as follows:
#
# 0 : e
# 1 : arch
# 2 : cpu
# 3 : core
# 4 : os
# 5 : nproc
#
# in the ideal case it should be
# ( uname -m ) - ( uname -p ) - ( uname -s )
# but on pc/linux (uname -p) gives either unknown or very long answers
# containing characters which are problematic in directory names like
# parenthesis, '()'.
#


# Don't let the script be confused by non-english messages
# from system information programs.
# (LC_ALL overrides the value of the LANG environment variable 
# and the values of any other LC_* environment variables.)
LC_ALL=C


# standard ID settings
arch=`(uname -m || echo none) 2>/dev/null | tr ' [A-Z]' '_[a-z]' |tr -d '*?/()-'`
os=`(uname -s || echo none) 2>/dev/null | tr ' [A-Z]' '_[a-z]' |tr -d '*?/()-'`
cpu=`(uname -p || echo none) 2>/dev/null | tr ' [A-Z]' '_[a-z]' |tr -d '*?/()-'`
nproc=1

id=${arch}-${cpu}-${os}

# Try to specify the ID more precisely
case ${id} in
    x86_64-*-linux|i[65432]86-*-linux|x86-*-linux|*-*-cygwin*)  
        # all the pc-arch with linux/cygwin/etc..
    case ${arch} in
	ia64) arch="ia64";;
	x86_64) arch="pc64";;	
	*) arch="pc";;
    esac
		
    # generic version
    cpu=x86

    # try to guess the cpu specs 
    # (http://www.paradicesoftware.com/specs/cpuid/index.htm)
    vendor=`awk '/^vendor_id/ { print $3; exit;}' /proc/cpuinfo`
    family=`awk '/^cpu family/ { print $4; exit;}' /proc/cpuinfo`
    model=`awk '/^model/ { print $3; exit;}' /proc/cpuinfo`
    # The following syntax
    #   let nproc=`awk '/^processor/ { print $3; }' /proc/cpuinfo | tail -n 1`+1
    # is nicer, but only available in bash. For maximum portability use a syntax
    # only using POSIX compliant Unix shell commands.
    nproc=`awk '/^processor/ { print $3; }' /proc/cpuinfo | tail -n 1`
    nproc=`expr $nproc + 1`

    case "$vendor" in
	# Intel
	GenuineIntel)
	    case "$family" in
		4) 
		    case "$model" in
			0|1|3|7|8|9) core="DX";; # Intel 80486DX/DX2/DX4
			2|4|5) core="SX";;       # Intel 80486SX/SL (no math coprocessor)
		    esac
		    cpu="i486";;
		5) 
		    case "$model" in
			0|1|2|3) core="pentium";;   # Intel Pentium (P5/P54CS/Overdrive)
			4|7|8) core="pentium-mmx";; # Intel Pentium MMX (P54C/P55C)
		    esac
		    cpu="pentium";;
		6) 
		    case "$model" in
			0|1) cpu="pentiumpro" core=cpu;;         # Intel Pentium Pro
			3) cpu="pentium2" core="klamath";;       # Intel Pentium II (Klamath)
			4|5) cpu="pentium2" core="deschutes";;   # Intel Pentium II (Deschutes)
			6) cpu="pentium2" core="mendocino";;     # Intel Pentium II (Mendocino)
			7) cpu="pentium3" core="katmai";;        # Intel Pentium III / III Xeon (Katmai)
			8) cpu="pentium3" core="coppermine";;    # Intel Pentium III / III Xeon / Celeron (Coppermine) and mobile versions
			9) cpu="pentiumm" core="banias";;        # Intel Pentium M / Celeron M (Banias)
			10) cpu="pentium3" core="cascades";;     # Intel Pentium III Xeon (Cascades)
			11) cpu="pentium3" core="tualatin";;     # Intel Pentium III / Celeron (Tualatin)
			13) cpu="pentiumm" core="dothan";;       # Intel Pentium M / Celeron M (Dothan)
			14) cpu="coresolo" core="yonah";;        # Intel Core Solo / Core Duo (Yonah) and mobil versions
			15|21|22) cpu="coreduo" core=cpu;;       # Intel Core Duo / Core 2 Duo (Conroe / Merom / Allendale) /
                                                                 #       Core 2 Extreme Dual-/Quad-Core (Conroe / Kentsfield / Clovertown)
                                                                 #       and Xeon (Kentsfield / Clovertown / Woodcrest / Tigerton)
                                                                 #       as well as mobile versions
			23|29) cpu="penryn" core=cpu;;           # Intel Core 2 Duo (Wolfdale / Penryn / Yorkfield) 
                                                                 #       and Xeon (Wolfdale / Yorkfield / Hapertown / Dunnington)
                                                                 #       as well as mobile versions
			26|30|37|44|45|46) cpu="nehalem" core=cpu;; # Intel Core (Bloomfield / Lynnfield / Clarkdale / Arrandale / Gulftown) 
			                                         #       and Xeon (Bloomfield / Gainestown / Westmere-EP / Beckton /
                                                                 #       Jasper Forest / Clarkdale) as well as mobile versions
			28,38) cpu="atom" core=cpu;;             # Intel Atom
		    esac
		    ;;
		7) cpu="itanium" core=cpu;;                      # Intel Itanium (Merced)
		15) 
		    case "$model" in
			0|1) cpu="pentium4" core="willamette";;  # Intel Pentium 4 (Willamette)
			2) cpu="pentium4" core="northwood";;     # Intel Pentium 4 (Northwood) / Xeon (MP) (Prestonia / Gallatin)
			3|4|6) cpu="pentium4"                    # Intel Pentium 4 (Prescott / Cedar Mill) / Xeon (Nocona / Tulsa)
			    case "$arch" in
				pc)
				    core="prescott";;            # Intel Pentium 4 (Prescott / Cedar Mill) and movile versions
				pc64)
				    core="nocona";;              # Intel Xeon (Nocona / Tulsa)
			    esac
			    ;;
			*) cpu="itanium" core=cpu;;              # Intel Itanium (Merced)
		    esac
		    ;;
		31) cpu="itanium2" core=cpu;;                   # Intel Itanium2 (McKinley / Madison / Deerfield / Hondo / Madison / Fanwood)
		32) cpu="itanium2" core=cpu;;                   # Intel Itanium2 Dual-Core Processor 9x00 ( Montecito / Millington / Montvale / Tukwila)
		*) cpu="i386" core=cpu;;
	    esac
	    ;;

	
	# AMD
	AuthenticAMD)
	    case "$family" in
		4) cpu="amd486" core=cpu;; # AMD 80486
		5) 
		    case "$model" in
			0|1|2|3) cpu="k5" core=cpu;; # AMD 5k86
			6|7) cpu="k6" core=cpu;;     # AMD K6
			8) cpu="k6" core="k6-2";;    # AMD K6-2 (Chomper)
			9) cpu="k6" core="k6-3";;    # AMD K6-III (Sharptooth)
			13) cpu="k6" core="k6-2";;   # AMD K6-2+, K6-III+
		    esac
		    ;;
		6)
		    case "$model" in
			0|1|2|3) cpu="athlon" core=cpu;;        # AMD Athlon / Duron
			4) cpu="athlon" core="thunderbird";;    # AMD Athlon (Thunderbird)
			6) cpu="athlonxp" core="palomino";;     # AMD Athlon (MP) (Palomino)
			7) cpu="athlonxp" core="morgan";;       # AMD Duron (MP) (Morgan), all compiler treat it as Athlon XP
			8) cpu="athlonxp" core="thoroughbred";; # AMD Athlon (XP,MP) / Sempron / Duron (MP) (Thoroughbred)
			10) cpu="athlonxp" core="barton";;      # AMD Athlon (XP,MP) / Sempron (Barton)
		    esac
		    ;;
		15)
		    case "$model" in
                        5|37) cpu="opteron" core="sledgehammer";; # AMD Opteron (SledgeHammer / Athens)
			35|43|75|107) cpu="athlon64x2" core=cpu;; # AMD Dual-Core Opteron (Denmark) / Athlon 64 X2/FX (Toledo / Manchester)
                                                                  #     Athlon 64 X2 Dual-Core (Windsor / Brisbane)
                        33) cpu="opteron" core=cpu;;              # AMD Dual-Core Opteron; in fact it is a k8-64 revision e, but as far
                                                                  # as we know only PGI has a special flag for this cpu: -tp k8-64e
                        65|67) cpu="opteronx2" core=cpu;;         # AMD Dual-Core Opteron (Santa Rosa) / Athlon 64 X2/FX Dual-Core (Windsor)
                        72|104) cpu="turion64x2" core=cpu;;       # AMD Athlon 64 X2 Dual-Core (Windsor) / Turion 64 X2 (Taylor / Trinidad)
                        *) cpu="athlon64" core=cpu;;              # Family 15 is AMD Opteron / Athlon 64 and better
		    esac
		    ;;
		16)                        
		    case "$model" in
			2) cpu="phenom" core="barcelona";;        # AMD Quad-Core Opteron (Barcelona) / Phenom Triple-Core (Toliman) /
                                                                  #     Phenom Quad-Core (Agena) / Athlon Dual-Core (Kuma)
			4) cpu="phenomII" core="shanghai";;       # AMD Quad-Core Opteron (Shanghai) / Athlon Dual-Core (Regor / Propus) /
                                                                  #     Phenom II (Callisto / Heka / Deneb)
			5) cpu="athlonII" core=cpu;;              # AMD Athlon II X2 / X3 / X4 (Regor / Rana / Propus) /
			                                          #     Phenom II Triple-Core (Heka) / Quad-Core (Deneb)
			6) cpu="athlonII" core=cpu;;              # AMD Athlon II (Sargas) / Athlon II X2 (Regor) / Sempron II (Sargas) /
			                                          #     Sempron II X2 (Regor) / some mobile versions
			8) cpu="opteron4100" core="istanbul";;    # AMD Opteron 4100 (Lisbon) / Six-Core Opteron (Istanbul)
			9) cpu="opteron6100" core="magnycours";;  # AMD Opteron 6100 (Magny-Cours)
			10) cpu="phenomII" core=cpu;;             # AMD Phenom II X4 / X6 (Zosma / Thuban)
		    esac
		    ;;
		17)
		    case "$model" in
			3) cpu="athlon64x2" core=cpu;;            # AMD Turion X2 (Lion) / Athlon X2 (Lion) / Sempron (Sable)
		    esac
		    ;;
		*) cpu="i386" core=cpu;;
	    esac
	    ;;

	# Cyrix
	CyrixInstead)
	    case "$family" in
		4) cpu="mediagx";;
		5) 
		    case "$model" in
			2) cpu="6x86";;
			4) cpu="mediagx";;
		    esac
		    ;;
		6) 
		    case "$model" in
			0) cpu="6x86";;
			5) cpu="cyrixm2";;
			6|7|8|9) cpu="c5";;
		    esac
		    ;;
	    esac
	    ;;

	# Centaur
	CentaurHauls)
	    case "$family" in
		5)
		    case "$model" in
			4) cpu="c6";;
			8) cpu="c2";;
			9) cpu="c3";;
		    esac
		    ;;
	    esac
	    ;;
	
	# NexGen
	NexGenDriven)
	    case "$family" in
		5) cpu="nx586";;
	    esac
	    ;;

	# Transmeta
	GenuineTMx86)
	    case "$family" in
		5) cpu="crusoe";;
	    esac
	    ;;

	# Rise
	RiseRiseRise)
	    case "$family" in
		5) cpu="mp6";;
	    esac
	    ;;

	# UMC
	'UMC UMC UMC')
	    case "$family" in
		4) 
		    case "$model" in
			1) cpu="u5d";;
			2) cpu="u5s";;
		    esac
		    ;;
	    esac
	    ;;

	# SiS
	'SiS SiS SiS')
	    case "$family" in
		5) cpu="55x";;
	    esac
	    ;;

	# National Semiconductor
	'Geode by NSC')
	    case "$family" in
		5)
		    case "$model" in
			4) cpu="gx1";;
			5) cpu="gx2";;
		    esac
		    ;;
	    esac
	    ;;
	*)
	    cpu="generic";;
    esac
    ;;
    
    alpha-*-osf*)   # alpha more specific version
	family=`(/usr/sbin/psrinfo -v | sed -n 's/^  The alpha \([evEV0-9]*\).* processor.*$/\1/p' | head -n 1 )`
	cpu=`(echo ${family} | tr '[ A-Z]' '[_a-z]' || echo ${cpu})`
	nproc=`(/usr/sbin/psrinfo -n | sed 's/^number of processors on system = //g' )`
	;;

    sun*-*-sunos*|sun*-*-solaris*) # sparc more specific version
	family=`(/usr/sbin/psrinfo -v | sed -n 's/^  The \([sparcv0-9]*\).* processor.*$/\1/p' | head -n 1 )`
	cpu=`(echo ${family} | tr '[ A-Z]' '[_a-z]' || echo ${cpu})`
	nproc=`(/usr/sbin/psrinfo -p)`
	;;
    
    alpha-*-linux)   # alpha more specific version
	family=`(sed -n 's/^cpu model.*: \(.*\)$/\1/p' /proc/cpuinfo | head -n 1)`
	cpu=`(echo ${family} | tr 'A-Z' 'a-z' | tr -d ' ')`
	;;

    ia64-*-linux)
	family=`(sed -n 's/^family.*: \(.*\)$/\1/p' /proc/cpuinfo | head -n 1)`
	case "$family" in
	    32) cpu="itanium2x2";;
	    Itanium\ 2) cpu="itanium2";;
	esac
	;;

    *-*-hpux*)
	arch=hp`( echo ${arch} | tr '/' 's' )`;
	cpu=hppa;
	;;

    sr8000-*-hiux/mpp)
	cpu=hppa;
	os=hiuxmpp;
        ;;

    *-powerpc-aix)
        ibm_cpu_id=`/usr/sbin/lsdev -C -c processor -S available | head -1 | awk '{ print $1 }'`
        if /usr/sbin/lsattr -El ${ibm_cpu_id} | grep ' POWER' >/dev/null 2>&1; then
            cpu=rs6000
        else
            cpu=`/usr/sbin/lsattr -El ${ibm_cpu_id} | grep "Processor type" | awk '{print $2}' | tr 'A-Z' 'a-z' | tr -d ' '`
        fi
        
	arch=`uname -M | tr 'A-Z' 'a-z' | tr -d ' ' | awk -F, '{print $1; exit;}'`;
	;;

    ppc*-*-linux)
	family=`(sed -n 's/^cpu.*: \([^ ]*\).*$/\1/p' /proc/cpuinfo | head -n 1)`
	cpu=`(echo ${family} | tr 'A-Z' 'a-z' | tr -d ' ')`
        ;;

    armv7l-*-linux)
        cpu="cortexa9"
        os="linux" 
        ;;

    *-*-*bsd|*-*-darwin*)
	case ${arch} in
	    x86_64) arch="pc64";;	
	    *) arch="pc";;
	esac

        #from /usr/include/mach/machine.h
        cputype=`sysctl hw.cputype | awk '{print $2 ; exit;}'`
        cpusubt=`sysctl hw.cpusubtype | awk '{print $2; exit;}'`
	cpufamily=`sysctl hw.cpufamily | awk '{print $2; exit;}'`
        case "${cputype}" in
            7) cpu=x86
		case "${cpufamily}" in
		    1943433984) cpu="coresolo";; # Intel Core Solo / Core Duo (32-bit Pentim-M with SSE3) (Yonah)
		    1114597871) cpu="coreduo";;  # Intel Core Duo (Merom)
		    2028621756) cpu="penryn" ;;  # Intel Penryn
		    1801080018) cpu="nehalem" ;; # Intel Nehalem
		    *)	
			case "${cpusubt}" in
			    3) cpu="i386" ;;
			    4) cpu="i486" ;;
			    5) cpu="pentium" ;;
			    22) cpu="pentiumpro" ;;
			    54|86) cpu="pentium2" ;;
			    103|119) cpu="celeron" ;;
			    8|24|40) cpu="pentium3" ;;
			    9) cpu="pentiumm" ;;
			    10|26) cpu="pentium4" ;;
			    11) cpu="itanium" ;;
			    27) cpu="itanium2" ;;
			    12) cpu="xeon" ;;
			    28) cpu="xeon2" ;;
			esac
			;;
		esac
                ;;
            11) cpu=hppa ;;
            12) cpu=arm ;;
            14) cpu=sparc ;;
            16) cpu=alpha ;;
            18) cpu=ppc
                case "${cpusubt}" in
                    1) cpu=ppc_601 ;;
                    2) cpu=ppc_602 ;;
                    3|4|5) cpu=ppc_603 ;;
                    6|7) cpu=ppc_604 ;;
                    8) cpu=ppc_620 ;;
                    9) cpu=ppc_750 ;;
                    10) cpu=ppc_7400 ;;
                    11) cpu=ppc_7450 ;;
                    100) cpu=ppc_970 ;;
                esac
                ;;            
            82) cpu=ppc64   # 64+18
                case "${cpusubt}" in
                    100) cpu=ppc64_970 ;;
                esac
                ;;
        esac
        ;;
esac

if [ ! -n "$core" ]; then
    core=${cpu}
fi

# Set up ID string
id=${arch}-${cpu}-${os}

# So, what to do, return the complete ID-string or only substrings
if [ -n "$1" ]; then
    case $1 in
	0) 
	    if [ "$core" == "$cpu" ]; then
		echo ${id}
	    else
		echo ${arch}-${cpu}-${core}-${os}
	    fi;;
	1) echo ${arch};;
	2) echo ${cpu};;
	3) echo ${core};;
	4) echo ${os};;
	5) echo ${nproc};;
    esac
else
    echo ${id}
fi
