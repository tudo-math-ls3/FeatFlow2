# -*- makefile -*-

#-------------------------------------------------------------------------------
# AMD Makefile for compiling on Unix systems (for GNU make only)
# (adapted for the FEAT2 package, based on Lib/GNUmakefile from AMD 2.2)
#
# Whereever AMD Makefile instructions have been altered, the original
# ones immediately precede the new ones and carry the prefix #FEAT2#.
#-------------------------------------------------------------------------------

#FEAT2# default: ../Lib/libamd.a
.PHONY:	default
default: $(OBJDIR)/libamd.a

#FEAT2# include ../SuiteSparse_config/SuiteSparse_config.mk

#FEAT2# C = $(CC) $(CFLAGS) $(CONFIG) -I../Include -I../../SuiteSparse_config
C = LC_ALL=C $(CC) $(CFLAGS) $(CONFIG) -IInclude -I../SuiteSparse_config

#-------------------------------------------------------------------------------
# source files
#-------------------------------------------------------------------------------

AMD = amd_aat amd_1 amd_2 amd_dump amd_postorder amd_post_tree amd_defaults \
	amd_order amd_control amd_info amd_valid amd_preprocess

#FEAT2# SUITESPARSE_CONFIG = ../../SuiteSparse_config/SuiteSparse_config.h
SUITESPARSE_CONFIG = ../SuiteSparse_config/SuiteSparse_config.h \
                     ../SuiteSparse_config/SuiteSparse_config.c

#FEAT2# INC = ../Include/amd.h ../Include/amd_internal.h $(SUITESPARSE_CONFIG)
INC = Include/amd.h Include/amd_internal.h $(SUITESPARSE_CONFIG)

#-------------------------------------------------------------------------------
# object files for each version
#-------------------------------------------------------------------------------

#FEAT2# AMDI = $(addsuffix .o, $(subst amd_,amd_i_,$(AMD)))
AMDI = $(addsuffix .o, $(subst amd_,$(OBJDIR)/amd_i_,$(AMD)))
#FEAT2# AMDL = $(addsuffix .o, $(subst amd_,amd_l_,$(AMD)))
AMDL = $(addsuffix .o, $(subst amd_,$(OBJDIR)/amd_l_,$(AMD)))


#-------------------------------------------------------------------------------
# compile each int and long routine (with no real/complex version)
#-------------------------------------------------------------------------------

#FEAT2# amd_global.o: ../Source/amd_global.c $(INC)
$(OBJDIR)/amd_global.o: Source/amd_global.c $(INC)
	$(C) -c $< -o $@

#FEAT2# amd_i_%.o: ../Source/amd_%.c $(INC)
$(OBJDIR)/amd_i_%.o: Source/amd_%.c $(INC)
	$(C) -DDINT -c $< -o $@

#FEAT2# amd_l_%.o: ../Source/amd_%.c $(INC)
$(OBJDIR)/amd_l_%.o: Source/amd_%.c $(INC)
	$(C) -DDLONG -c $< -o $@

#-------------------------------------------------------------------------------
# Create the libamd.a library (C versions only)
#-------------------------------------------------------------------------------

#FEAT2# ../Lib/libamd.a: amd_global.o $(AMDI) $(AMDL)
#FEAT2#	$(AR) ../Lib/libamd.a $^
#FEAT2#	- $(RANLIB) ../Lib/libamd.a

#-------------------------------------------------------------------------------
# compile the Fortran versions and the libamdf77.a library
#-------------------------------------------------------------------------------

#FEAT2# fortran: ../Lib/libamdf77.a
.PHONY:	fortran
fortran: $(OBJDIR)/libamdf77.a

#FEAT2# AMDF77 = amd.o amdbar.o
AMDF77 = $(OBJDIR)/amd.o $(OBJDIR)/amdbar.o

#FEAT2# amd.o: ../Source/amd.f
#FEAT2# 	$(F77) $(F77FLAGS) -c ../Source/amd.f -o amd.o
$(OBJDIR)/amd.o: Source/amd.f
	$(F77) $(F77FLAGS) -c Source/amd.f -o $(OBJDIR)/amd.o

#FEAT2# amdbar.o: ../Source/amdbar.f
#FEAT2# 	$(F77) $(F77FLAGS) -c ../Source/amdbar.f -o amdbar.o
$(OBJDIR)/amdbar.o: Source/amdbar.f
	$(F77) $(F77FLAGS) -c Source/amdbar.f -o $(OBJDIR)/amdbar.o

#FEAT2# ../Lib/libamdf77.a: $(AMDF77)
#FEAT2# 	$(AR) ../Lib/libamdf77.a $^
#FEAT2# 	- $(RANLIB) ../Lib/libamdf77.a
$(OBJDIR)/libamdf77.a: $(AMDF77)
	$(AR) $(OBJDIR)/libamdf77.a $^
	- $(RANLIB) $(OBJDIR)/libamdf77.a

#-------------------------------------------------------------------------------
# Remove all but the files in the original distribution
#-------------------------------------------------------------------------------

#FEAT2# clean:
#FEAT2#	- $(RM) $(CLEAN)
#FEAT2#
#FEAT2# purge: distclean
#FEAT2#
#FEAT2# distclean: clean
#FEAT2#	- $(RM) ../Lib/libamd.a ../Lib/libamdf77.a


#-------------------------------------------------------------------------------
# From here till the end of the file are additional instructions added for
# smooth FEAT2 integration:
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Create the library
#-------------------------------------------------------------------------------
# Note:
# Explicitly take precautions to reflect the considerations in Section 11.3 of
# the GNU Make Manual, http://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls:
# This Makefile is potentially called simultaneously from multiple make processes,
# e.g. when compiling the FEAT2 regression benchmark in parallel. Concurrent
# attempts to create the archive should not happen. Try to avoid it with the
# usual FEAT2 lock file mechanism.
include ../create_library.mk
$(OBJDIR)/libamd.a:  LOCKFILE = ../LOCK.creating.libamd.a
$(OBJDIR)/libamd.a:  WAITTIME = 15
$(OBJDIR)/libamd.a:  RETRIES  = 24
$(OBJDIR)/libamd.a: $(OBJDIR)/amd_global.o $(AMDI) $(AMDL)
	@$(CREATE_LIB)



#-------------------------------------------------------------------------------
# Before creating any object file, first create the object directory.
#-------------------------------------------------------------------------------
# Note:
# An order-only prerequisite shall not be put on the same line as a prerequisite
# of an implicit rule. Otherwise the target defined in this implicit rule is
# rebuilt every time you invoke make!
$(OBJDIR)/amd_global.o $(AMDI) $(AMDL): | $(OBJDIR)

$(OBJDIR):
	@test -d $(OBJDIR) || (rm -f $(OBJDIR); mkdir -p $(OBJDIR))


#-------------------------------------------------------------------------------
# Unpack tarballs as required.
#-------------------------------------------------------------------------------
# Note: This is trickier than one might think:
# A tarball should only get extracted (and possibly patched) once. If already
# extracted, there is no need to reextract it. Parallel make runs should stick
# to this rule as well.
# All source files are created by one rule, the extract command. But
# implementing it like:
#   $(SRC_AMD):
#         <extract tarball>
# would mean that e.g. in a 4-way parallel make run, a tarball would get
# extracted 4 times in parallel, because make is not aware that the rule is
# identical for the first 4 items of $(SRC_AMD). The same holds for
# $(SRC_SUITESPARSE_CONFIG). Extracting the same tarball several times
# simultaneously, gives rise to several problems. Among those is the case
# where a source file gets already compiled while it is being overwritten by
# its copy from the tarball. Beware of doing that.
# Things get worse when multiple external Makefiles call this Makefile in
# parallel and ask for the compilation of the library. This happens regularly
# when compiling the FEAT2 regression benchmark as this is usually done in
# parallel with up to 32 processes.
# The extraction of tarballs needs to be serialised somehow - which is not
# possible with GNU Make 3.81 (or earlier) intrinsics (in particular the target
# .NOTPARALLEL is not an option.)


# Function to download a tarball - as a serialised operation
# using a locking mechanism
include ../download.mk

# Function to unpack a tarball - as a serialised operation
# using a locking mechanism
include ../unpack.mk


#-------------------------------------------------------------------------------
# Automatically extract AMD tarball when required.
#-------------------------------------------------------------------------------

AMD_TARBALL = ../AMD-2.3.1.tar.gz

# List of required source files from AMD package. Purpose: let them share
# a single common prerequisite that in turn is created by unpacking the tarball.
# That's the key to serialise the unpacking process.
SRC_AMD = Include/amd_internal.h Include/amd.h \
	  Source/amd.f Source/amdbar.f Source/amd_global.c \
	  $(addprefix Source/, $(addsuffix .c,$(AMD)))

# Choose the last file that is extracted from the AMD tarball. It's
# existence indicates that the AMD tarball has been unpacked already
# completely. This approach is a hack to serialise a parallel make run,
# parallel threads pause till make has passed through this needle's eye.
LAST_FILE_FROM_AMD_TARBALL = ../AMD/MATLAB/amd_mex.c
$(SRC_AMD): $(LAST_FILE_FROM_AMD_TARBALL) $(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL)

# To catch the case where several applications simultaneously
# try to build the UMFPACK library (e.g. parallel make of the
# FEAT2 regression benchmark), this extractions needs to deploy
# a locking mechanism.
$(LAST_FILE_FROM_AMD_TARBALL):  NAME     = "AMD 2.3.1 sources"
$(LAST_FILE_FROM_AMD_TARBALL):  TARBALL  = $(AMD_TARBALL)
$(LAST_FILE_FROM_AMD_TARBALL):  LOCKFILE = ../LOCK.unpack.amd-2.3.1.tar.gz
$(LAST_FILE_FROM_AMD_TARBALL):  WAITTIME = 15
$(LAST_FILE_FROM_AMD_TARBALL):  RETRIES  = 24
$(LAST_FILE_FROM_AMD_TARBALL):  PATCHCMD = echo
$(LAST_FILE_FROM_AMD_TARBALL): | $(AMD_TARBALL)
	@$(call UNPACK)

# Try to download tar ball if not present
$(AMD_TARBALL):  URL      = http://www.cise.ufl.edu/research/sparse/amd/AMD-2.3.1.tar.gz
$(AMD_TARBALL):  TARBALL  = $(AMD_TARBALL)
$(AMD_TARBALL):  LOCKFILE = ../LOCK.download.amd-2.3.1.tar.gz
$(AMD_TARBALL):  WAITTIME = 15
$(AMD_TARBALL):  RETRIES  = 24
$(AMD_TARBALL):
	@$(call DOWNLOAD)


#-------------------------------------------------------------------------------
# Automatically extract SuiteSparse_config tarball when required.
#-------------------------------------------------------------------------------

SUITESPARSE_CONFIG_TARBALL = ../SuiteSparse_config-4.2.1.tar.gz

# List of required source files from SuiteSparse_config package. Purpose: let
# them share a single common prerequisite that in turn is created by unpacking
# the tarball.
# That's the key to serialise the unpacking process.
SRC_SUITESPARSE_CONFIG = $(SUITESPARSE_CONFIG)

# Choose the last file that is extracted from the SuiteSparse_config tarball. It's
# existence indicates that the SuiteSparse_config tarball has been unpacked already
# completely. This approach is a hack to serialise a parallel make run,
# parallel threads pause till make has passed through this needle's eye.
LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL = ../SuiteSparse_config/SuiteSparse_config.h
# Avoid (in this case harmless) warning of kind:
#   Circular ../SuiteSparse_config/SuiteSparse_config.c <- ../SuiteSparse_config/SuiteSparse_config.c dependency dropped.
$(filter-out $(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL), $(SRC_SUITESPARSE_CONFIG)): $(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL)

$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL):  NAME     = "SuiteSparse_config 4.2.1 sources"
$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL):  TARBALL  = $(SUITESPARSE_CONFIG_TARBALL)
$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL):  LOCKFILE = ../LOCK.unpack.suitesparse_config-4.2.1.tar.gz
$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL):  WAITTIME = 15
$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL):  RETRIES  = 24
$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL):  PATCHCMD = echo
$(LAST_FILE_FROM_SUITESPARSE_CONFIG_TARBALL): | $(SUITESPARSE_CONFIG_TARBALL)
	@$(call UNPACK)

# Try to download tar ball if not present
$(SUITESPARSE_CONFIG_TARBALL):  URL      = http://www.cise.ufl.edu/research/sparse/SuiteSparse_config/SuiteSparse_config-4.2.1.tar.gz
$(SUITESPARSE_CONFIG_TARBALL):  TARBALL  = $(SUITESPARSE_CONFIG_TARBALL)
$(SUITESPARSE_CONFIG_TARBALL):  LOCKFILE = ../LOCK.download.suitesparse_config-4.2.1.tar.gz
$(SUITESPARSE_CONFIG_TARBALL):  WAITTIME = 15
$(SUITESPARSE_CONFIG_TARBALL):  RETRIES  = 24
$(SUITESPARSE_CONFIG_TARBALL):
	@$(call DOWNLOAD)


#-------------------------------------------------------------------------------
# Automatically download tarballs when required.
#-------------------------------------------------------------------------------
getlib:   $(AMD_TARBALL) $(SUITESPARSE_CONFIG_TARBALL)
getlibs:  getlib


#-------------------------------------------------------------------------------
# Clean up targets
#-------------------------------------------------------------------------------

# Functions to delete a single file / directory at once
# (The reason why we need this and the magic why this works lies within
#  the blank line after the remove command. This way the remove commands
#  in a foreach-loop are triggered one after another - in separate
#  sub-shells. Not in a single sub-shell command. As this may result
#  on some machines in error messages of type:
#  execvp: rm: Arg list too long)
define remove_file
    rm -f $(file)

endef


# Recursively remove directories. For the first two directory levels
# print an error message if removal failed. (The restriction to two
# levels is rather arbitrary. It's the least number of directory levels
# created by a FEAT2 Makefile. To show an error message unconditionally
# is not desired as one would eventually always get an error message, at
# least when trying to remove /)
# The for loop is to deal with given directory wildcards like object/pc-*-*-*.
define remove_directory
    @rmdirFailures=""; \
     for dir in $(dir); do \
	depth=0; \
	while test -d "$${dir}" -a "$${dir}" != '.' -a "$${dir}" != '/'; do \
	    if rmdir "$${dir}" 2>/dev/null; then \
		echo "rmdir $${dir}"; \
		dir=`dirname $${dir}`; \
	    else \
		test $${depth} -lt 2 && rmdirFailures="$${rmdirFailures} $${dir}"; \
		dir='.'; \
	    fi; \
	    depth=`expr $${depth} + 1`; \
	done; \
    done; \
    for dir in $${rmdirFailures}; do \
	if test -d "$${dir}"; then \
	    $(print_directory_not_empty); \
	fi; \
    done

endef

# Function to be called if directory removal did not work unexpectedly.
define print_directory_not_empty
    (echo; \
     echo '# ---------------------------------------------------------------------'; \
     echo '# This Makefile previously created the directory '; \
     echo '#'; \
     echo "# $${dir}"; \
     echo '#'; \
     echo '# and was about to remove it. Since there are files in that directory'; \
     echo '# that this Makefile did not create, it will not be removed.'; \
     echo '# ---------------------------------------------------------------------')
endef


.PHONY:	clean
clean:
#	-rm $(OBJ) $(OBJDIR)/libamd.a # *.il work.*
        # Delete every file separately to prevent errors of kind:
        # execvp: rm: Arg list too long
	-$(foreach file, $(OBJDIR)/amd_global.o $(AMDI) $(AMDL) $(OBJDIR)/libamd.a, $(remove_file))
	$(foreach dir, $(OBJDIR), $(remove_directory))

.PHONY:	purge
purge:
        # Delete every file separately to prevent errors of kind:
        # execvp: rm: Arg list too long
	-$(foreach file, $(OBJDIR)/SuiteSparse_config.o $(OBJDIR)/amd_global.o $(AMDI) $(AMDL) $(OBJDIR)/libamd.a, $(remove_file))
	$(foreach dir, $(OBJDIR), $(remove_directory))
	-rm -rf Demo Doc Include Lib MATLAB Makefile README.txt Source
	-rm -rf ../SuiteSparse_config/Makefile ../SuiteSparse_config/README.txt \
                ../SuiteSparse_config/SuiteSparse_config.c ../SuiteSparse_config/SuiteSparse_config.h \
                ../SuiteSparse_config/SuiteSparse_config.mk ../SuiteSparse_config/SuiteSparse_config_Mac.mk \
                ../SuiteSparse_config/SuiteSparse_config_GPU.mk ../SuiteSparse_config/xerbla
	-rmdir ../SuiteSparse_config
