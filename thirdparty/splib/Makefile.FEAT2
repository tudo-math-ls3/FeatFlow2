# -*- makefile -*-

#-------------------------------------------------------------------------------
# Default values for compiler and archiver. Usually explicitly overritten
# by call from FEAT2 application.
#-------------------------------------------------------------------------------
FORTRAN = gfortran
OPTS    = -O
ARCH    = ar -rv
RANLIB  = ranlib
OBJDIR  = object



#-------------------------------------------------------------------------------
# From here till the end of the file are additional instructions added for
# smooth FEAT2 integration:
#-------------------------------------------------------------------------------

.PHONY:	default
default: $(OBJDIR)/libsplib.a

SRCLIST= precond/ilus.f precond/lusl.f precond/numfac.f precond/symbfac.f precond/tridsl.f

OBJS = $(patsubst %.f, $(OBJDIR)/%.o, $(notdir $(SRCLIST)))



#-------------------------------------------------------------------------------
# Create the library
#-------------------------------------------------------------------------------
# Note:
# Explicitly take precautions to reflect the considerations in Section 11.3 of
# the GNU Make Manual, http://www.gnu.org/software/make/manual/make.html#Archive-Pitfalls:
# This Makefile is potentially called simultaneously from multiple make processes,
# e.g. when compiling the FEAT2 regression benchmark in parallel. Concurrent
# attempts to create the archive should not happen. Try to avoid it with the
# standard FEAT2 lock file mechanism.
include ../create_library.mk
$(OBJDIR)/libsplib.a:  LOCKFILE = ../LOCK.creating.libsplib.a
$(OBJDIR)/libsplib.a:  WAITTIME = 10
$(OBJDIR)/libsplib.a:  RETRIES  = 24
$(OBJDIR)/libsplib.a: $(OBJS)
	@$(CREATE_LIB)



#-------------------------------------------------------------------------------
# Before creating any object file, first create the object directory.
#-------------------------------------------------------------------------------
# Note:
# An order-only prerequisite shall not be put on the same line as a prerequisite
# of an implicit rule. Otherwise the target defined in this implicit rule is
# rebuilt every time you invoke make!
$(OBJS): | $(OBJDIR)
$(OBJDIR)/%.o: precond/%.f
	$(FORTRAN) $(OPTS) -c $< -o $@

$(OBJDIR):
	@test -d $(OBJDIR) || (rm -f $(OBJDIR); mkdir -p $(OBJDIR))


#-------------------------------------------------------------------------------
# Unpack tarballs as required.
#-------------------------------------------------------------------------------
# Note: This is trickier than one might think:
# A tarball should only get extracted (and possibly patched) once. If already
# extracted, there is no need to reextract it. Parallel make runs should stick
# to this rule as well.
# All source files are created by one rule, the extract command. But
# implementing it like:
#   $(SRC_SPLIB):
#         <extract tarball>
# would mean that e.g. in a 4-way parallel make run, a tarball would get
# extracted 4 times in parallel, because make is not aware that the rule is
# identical for the first 4 items of $(SRC_SPLIB). Extracting the same tarball
# several times simultaneously, gives rise to several problems. Among those is
# the case where a source file gets already compiled while it is being
# overwritten by its copy from the tarball. Beware of doing that.
# Things get worse when multiple external Makefiles call this Makefile in
# parallel and ask for the compilation of the library. This happens regularly
# when compiling the FEAT2 regression benchmark as this is usually done in
# parallel with up to 32 processes.
# The extraction of tarballs needs to be serialised somehow - which is not
# possible with GNU Make 3.81 (or earlier) intrinsics (in particular the target
# .NOTPARALLEL is not an option.)


# Function to download a tarball - as a serialised operation
# using a locking mechanism
include ../download.mk

# Function to unpack a tarball - as a serialised operation
# using a locking mechanism
include ../unpack.mk


#-------------------------------------------------------------------------------
# Automatically extract SPLIB tarball when required.
#-------------------------------------------------------------------------------

SPLIB_TARBALL = ../splib.tar.gz

# List of required source files from SPLIB package. Purpose: let them share
# a single common prerequisite that in turn is created by unpacking the tarball.
# That's the key to serialise the unpacking process.
SRC_SPLIB = $(SRCLIST)

# Choose the last file that is extracted from the SPLIB tarball. It's
# existence indicates that the SPLIB tarball has been unpacked already
# completely. This approach is a hack to serialise a parallel make run,
# parallel threads pause till make has passed through this needle's eye.
LAST_FILE_FROM_SPLIB_TARBALL = ../splib/Samples
$(SRC_SPLIB): $(LAST_FILE_FROM_SPLIB_TARBALL)

# To catch the case where several applications simultaneously
# try to build the UMFPACK library (e.g. parallel make of the
# FEAT2 regression benchmark), this extractions needs to deploy
# a locking mechanism.
$(LAST_FILE_FROM_SPLIB_TARBALL):  NAME       = "SPLIB sources"
$(LAST_FILE_FROM_SPLIB_TARBALL):  TARBALL    =  $(SPLIB_TARBALL)
$(LAST_FILE_FROM_SPLIB_TARBALL):  LOCKFILE   = ../LOCK.unpack.splib.tar.gz
$(LAST_FILE_FROM_SPLIB_TARBALL):  WAITTIME   = 10
$(LAST_FILE_FROM_SPLIB_TARBALL):  RETRIES    = 24
$(LAST_FILE_FROM_SPLIB_TARBALL):  PATCHCMD   = cat ../splib_no.mytime.declaration.patch | patch -p0
$(LAST_FILE_FROM_SPLIB_TARBALL):  PATCHTEXT1 = "\# Patching SPLIB sources to get rid of an unused variable declaration causing a"
$(LAST_FILE_FROM_SPLIB_TARBALL):  PATCHTEXT2 = "\# dependency on a symbol not required otherwise. This prevents linker problems"
$(LAST_FILE_FROM_SPLIB_TARBALL):  PATCHTEXT3 = "\# with g95."
$(LAST_FILE_FROM_SPLIB_TARBALL): | $(SPLIB_TARBALL)
	@$(call UNPACK)

# Try to download tar ball if not present
$(SPLIB_TARBALL):  URL      = http://www.cs.indiana.edu/ftp/bramley/splib.tar.gz
$(SPLIB_TARBALL):  TARBALL  = $(SPLIB_TARBALL)
$(SPLIB_TARBALL):  LOCKFILE = ../LOCK.download.splib.tar.gz
$(SPLIB_TARBALL):  WAITTIME = 15
$(SPLIB_TARBALL):  RETRIES  = 24
$(SPLIB_TARBALL):
	@$(call DOWNLOAD)


#-------------------------------------------------------------------------------
# Automatically download tarballs when required.
#-------------------------------------------------------------------------------
getlib:   $(SPLIB_TARBALL)
getlibs:  getlib


#-------------------------------------------------------------------------------
# Clean up targets
#-------------------------------------------------------------------------------

# Function to delete a single file at once
define remove_file
    rm -f $(file)

endef

.PHONY:	clean
clean:
        # Delete every file separately to prevent errors of kind:
        # execvp: rm: Arg list too long
	-$(foreach file, $(OBJS) $(OBJDIR)/libsplib.a, $(remove_file))
	-if test -d $(OBJDIR); then rmdir $(OBJDIR); fi;

.PHONY:	purge
purge:
        # Delete every file separately to prevent errors of kind:
        # execvp: rm: Arg list too long
	-$(foreach file, $(OBJS) $(OBJDIR)/libsplib.a, $(remove_file))
	-for dir in $(OBJDIR); do if test -d $${dir}; then rmdir $${dir}; fi; done
	-rm -rf blas driver.f include LICENSE make.driver makefile make.inc \
		make.splib matrix methods precond README rmfiles Samples \
		solvers splib.f splib.F tools