# In this file we decide what we want to calculate
# if it shall be calculated, set the variable to 1
#
# Important notes:
# 1) u means the entire velocity and not just the x-component
# 2) f* means all functions in the solution vector, so f = (u,p) \in R^3
# 2) if you want to calculate |f1(x) - f2(x)|, you will automatically
#   calculate f1(x) and f2(x)

##############
[GENERALSETTINGS]
##############

# calculate ||u_1 - u_2||_L2
calcL2DifferenceVelocity = 1

# calculate ||u_1||_L2
calcL2NormVelocityFirst = 1

# calculate ||u_2||_L2
calcL2NormVelocitySecond = 1

# calculate ||p_1 - p_2||_L2
calcL2DifferencePressure = 1

# calculate ||p_1||_L2
calcL2NormPressureFirst = 1

# calculate ||p_2||_L2
calcL2NormPressureSecond = 1

# calculate |f1(x) - f2(x)|
calcPointDifference = 1

# calculate f1(x)
calcPointFirst = 1

# calculate f2(x)
calcPointSecond = 1

#-----------------------------------------------------#
##########
[DOMAININFO]
##########
# Here we specify the area where we want to calculate
# the L2-norms and the dimension of the space (1d, 2d, 3d)
# Therefore this section is always important, even 
# if you do not calculate  L2-Errors/L2-Norms

# These expressions need to be 1 where the error/norm shall be calculated
# Have a look at the parser documentation to see
# which expressions are supported.
# on the part "common" we calculate ||u1 - u2|| and ||p1 - p2||
# on the part "onlyFirst" we calculate ||u1|| and ||p1||
# on the part "onlySecond" we calculate ||u2|| and ||p2||
# Important: They must depend on x and y (or are constant 0 or 1)
# constant 1 means: on the entire geometry that we have in this

#common = if(x >= 1 & x<= 1.2 & y>=0.4 & y<=0.6,0,1)
common = if( (x - 0.2)^2 + (y - 0.2)^2 <= 0.0025  ,0,1)
onlyFirst = if( (x - 0.2)^2 + (y - 0.2)^2 <= 0.0025  ,1,0)
onlySecond = 1

# Is it a 1D, 2D or 3D-Problem
# (Reagarding the mesh, not the number of unknowns!)
# at the moment only 2D is supported, so this is here for
# future purpose!
dim=2

#-----------------------------------------------------#
################
[POINTVALUESETTING]
################

# Here you specify the points where you want to evaluate the functions
# Important note: We use this list for all (!) operations, so it is
# not possible to specify e.g. to evaluate u1 at (0.1,0.1) and u2 at (0.2,0.2)
# but it is only possible to specify (0.1,0.1) and (0.2,0.2) as evaluation points
# and both functions are evaluated at this points.
# If this leads to the case that you would evaluate u1 at a point where it
# has no function values, this routine returns a 0
# The program will also calculate |u1(x) - u2(x)| in such a case (since u1(x) = 0),
# so you cannot use it in a black-box style but have to check wether this calculation
# makes sense or not.

# How do you specify the points?
#  The number in braces "(n)" defines the number
# of points to evaluate. Afterwards follows a list of points in the
# format
#   "x y type der"
# with x=x-coordinate, y=y-coordinate, type=type of quantity to evaluate,
# der=derivative quantifier. Here:
#   type=1: x-velocity, =2: y-velocity, =3: pressure
#   der =0: function value, =1: x-derivative, =2: y-derivative
# each point needs to be written in a seperate line.
#
# Example: to evaluate the x-velocity in (0.1,0.1) and
# and the first derivative of the y-velocity in (0.2,0.2)
# and the pressure in (0.3,0.3)
# evaluationpoints(3) =
# 0.1 0.1 1 0
# 0.2 0.2 2 1
# 0.3 0.3 3 0


evaluationpoints(3) = 
 0.1 0.1 1 0
 0.2 0.2 2 1
 0.3 0.1 3 0