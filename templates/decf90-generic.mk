# -*- mode: makefile -*-

##############################################################################
# DEC/HP Alpha Compiler suite
#
##############################################################################
COMPILERNAME = DEC

# Default: No compiler wrapper commands
# This works both for builds of serial and parallel applications
F77       = f77
F90       = f95
CC        = cc
CXX       = c++
LD        = f95

# Compiler flag to specify the directory where module files should be
# placed when created and where they should be searched for.
# Note: Do not remove ticks and whitespace!
MODOPTION = '-module '

# If preprocessor switch -DENABLE_SERIAL_BUILD does not occur in compiler flags,
# a build for parallel execution is requested.
ifeq (,$(findstring -DENABLE_SERIAL_BUILD ,$(APPONLYFLAGS) $(CFLAGSF90) ))
ifeq ($(strip $(MPIWRAPPERS)), YES)
F77       = mpif77
F90       = mpif90
CC        = mpicc
CXX	  = mpic++
LD        = mpif90
endif
endif


##############################################################################
# Commands to get version information from compiler
##############################################################################
F77VERSION = $(F77) -version 2>/dev/null
F90VERSION = $(F90) -version 2>/dev/null
CCVERSION  = $(CC) -V
CXXVERSION = $(CXX) --version | head -n 1


##############################################################################
# compiler flags
# (including non-architecture specific optimisation flags)
##############################################################################

# Set default compile flags
ifeq ($(call optimise), YES)
CFLAGSF77     := -DUSE_COMPILER_DEC $(CFLAGSF77) -fast -O5
CFLAGSF90     := -DHAS_INTRINSIC_FLUSH $(CFLAGSF90) $(CFLAGSF77)
CFLAGSC       := -DUSE_COMPILER_DEC $(CFLAGSC) -fast -O5
LDFLAGS       := $(LDFLAGS)
else
CFLAGSF77     := -DUSE_COMPILER_DEC $(CFLAGSF77) -O0 -recursive
CFLAGSF90     := -DHAS_INTRINSIC_FLUSH $(CFLAGSF90) $(CFLAGSF77)
CFLAGSC       := -DUSE_COMPILER_DEC $(CFLAGSC) -O0 -recursive
LDFLAGS       := $(LDFLAGS)
endif

# FEAT2 compilations with Compaq Compiler crash at run time in comm_exchange
# when using immediate mpi send/receive functions.
# IDENTIFIED_BUG test if the switch below is still necessary [dom June 09 2008]
#CFLAGSF90 := -DENABLE_BUFFERED_EDGE_COMM $(CFLAGSF90)



##############################################################################
# Extension compiler uses for name of generated module information files
# (some compilers generate .mod files, others .MOD files)
##############################################################################
MODEXTENSION = mod


##############################################################################
# Manual moving of generated module information files to
# object directory needed?
##############################################################################
MOVEMOD   = NO


##############################################################################
# Commands needed by the Sparse Banded Blas benchmark
##############################################################################
SBB_CVERSIONCMD  = $(F77) -version 2>&1 | sed 's/^[  ]+//g; 1!d;'


# The settings needed to compile a FEAT2 application are "wildly" distributed
# over several files ((Makefile.inc and templates/*.mk) and if-branches
# (in an attempt to reduce duplicate code and inconsistencies among all build
# IDs that e.g. use the same MPI environment). Not having all settings at
# *one* place entails the risk (especially in the event of setting up a new
# build ID) that settings are incompletely defined. A simple typo in a matching
# rule in Makefile.inc may prevent that the compiler and compiler command line
# flags are set. Compilation would fail with the most peculiar errors - if not
# the Makefile had been set up to catch such a case.
# Each build ID in FEAT2 has 6 tokens: architecture, cpu, operating system,
# compiler family, BLAS implementation, MPI environment. Whenever setting
# one of these, an according flag is set. They are named TOKEN1 up to TOKEN6.
# Before starting to actually compile a FEAT2 application, every Makefile
# generated by bin/configure checks whether all six tokens are set *for the
# choosen build ID*. If not, the user gets an error message describing exactly
# what information is missing, e.g. token 5 not set which means there is no
# information available which BLAS implementation to use and where to find the
# library.
#
# In this file, the fourth token has been set: compiler and compiler command
# line options. Set the flag accordingly.
TOKEN4 := 1
