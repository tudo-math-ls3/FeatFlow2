program gridgen_otype
  implicit none

  ! Definition of double precision
  integer, parameter  :: DP = selected_real_kind(15,307)

  ! Definition of mathematical constant PI
  real(DP), parameter :: pi = asin(1.0_DP)*2.0_DP

  ! Definition of the inner radius
  real(DP), parameter :: dinnerRadius = 0.25_DP

  ! Definition of the outer radius
  real(DP), parameter :: douterRadius = 1.25_DP

  ! Definition of the number of segments
  integer, parameter  :: n = 32

  ! Definition of minimum number of segments in the inner layer
  integer, parameter :: nmin = 4

  ! Definition of the number of outer layers
  integer, parameter  :: m = 3
  
  ! local variables
  character(len=32) :: cbuffer1,cbuffer2,cbuffer3,cbuffer4
  real(DP) :: x,y,r,phi,daux
  integer :: i,j,ivt,i1,i2,i3,i4,nvt,nvt1,nn,nn1,mm


  !-----------------------------------------------------------------------------
  ! Generate PRM-file
  !-----------------------------------------------------------------------------

  open(unit=100, file='test.prm')

  write(100,'(A)') 'NBCT'
  write(100,'(A)') '1'
  write(100,'(A)') 'IBCT'
  write(100,'(A)') '1 '
  write(100,'(A)') 'NCOMP'
  write(100,'(A)') '1'
  write(100,'(A)') 'ITYP NSPLINE NPAR'
  write(100,'(A)') '2 1 3 '
  write(100,'(A)') 'PARAMETERS'
  write(100,'(A)') '0.00000 0.00000'
  write(cbuffer1, '(F20.12)') douterRadius
  write(100,'(A)') trim(adjustl(cbuffer1))//' 0.0E0'
  write(cbuffer1, '(F20.12)') 2.0_DP*pi
  write(100,'(A)') '0.0 '//trim(adjustl(cbuffer1))
  
  close(100)
  
  !-----------------------------------------------------------------------------
  ! Determine the number of inner layers
  !-----------------------------------------------------------------------------
  nn = n; mm = 1
  inner1: do
    if (nn .le. nmin) exit inner1
    if (mod(nn,2) .eq. 0) then
      nn = nn/2
      mm = mm+1
    else
      exit inner1
    end if
  end do inner1
   
  ! Number of inner vertices (including the vertex at the origin)
  nvt = nn*(2**(mm-1)-1)+1

 
  !-----------------------------------------------------------------------------
  ! Generate TRI-file
  !-----------------------------------------------------------------------------

  open(unit=100, file='test.tri')

  write(100,'(A)') 'Coarse mesh 2D'
  write(100,'(A)') 'Generated by gridgen-otype'
  
  write(cbuffer1, '(I)') n*(m-1)+12
  write(cbuffer2, '(I)') n*m+nvt

  write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))//' 0 4 1  NEL NVT NMT NVE NBCT'

  !-----------------------------------------------------------------------------
  write(100,'(A)') 'DCORVG'
  !-----------------------------------------------------------------------------
  
  ! Write vertex at origin
  write(100,'(A)') '0.000000000000 0.000000000000'

  ! Write interior vertices in the inner layer
  nn1 = nn
  do j = 1, mm-1
    do i = 1, nn1
      
      ! Compute radius
      r = j*(dinnerRadius)/mm

      ! Compute angle
      phi = (i-1)*2.0_DP*pi/nn1

      write(cbuffer1, '(F20.12)') r * cos(phi)
      write(cbuffer2, '(F20.12)') r * sin(phi)

      write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))
    end do

    ! Double the number of segments
    nn1 = 2*nn1
  end do
  
  ! Write interior vertices in the outer layer
  do i = 1, n
    do j = 1, m-1

      ! Compute radius
      r = dinnerRadius + (j-1)*(douterRadius-dinnerRadius)/(m-1)
      
      ! Compute angle
      phi = (i-1)*2.0_DP*pi/n

      write(cbuffer1, '(F20.12)') r * cos(phi)
      write(cbuffer2, '(F20.12)') r * sin(phi)

      write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))
    end do

    ! Write parameter for boundary vertex
    r = real(i-1,DP)/real(n,DP)
    write(cbuffer1, '(F20.12)') r
    write(100,'(A)') trim(adjustl(cbuffer1))//' 0.0'
  end do
  
  !-----------------------------------------------------------------------------
  write(100,'(A)') 'KVERT'
  !-----------------------------------------------------------------------------

  nn1 = nn; nvt1 = 1
  
  do j = 1, mm-1

    daux = nvt1

    print *, int(daux)
    print *, "---"

    do i = 1, nn1

      ! Compute base vertex number
      ivt = i-1
      
      i1 = mod(ivt,   nn1) + nvt1+1
      i2 = mod(ivt+1, nn1) + nvt1+1
      i3 = i + ivt + nvt1 + nn1 + 1


      write(cbuffer1, '(I)') i1
      write(cbuffer2, '(I)') i2
      write(cbuffer3, '(I)') i3

      i4 = ceiling(daux)
      daux = daux + 0.5_DP

!      print *, i4

      if (i3 .le. nvt) then
        write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))//' '//&
                         trim(adjustl(cbuffer3))//' '//' 0'
      end if
    end do
    
    ! Increase the number of vertices
    nvt1 = nvt1 + nn1

    ! Double the number of segments
    nn1 = 2*nn1
    print *, "---"
  end do
!  stop

!!$  nn1 = nn
!!$  
!!$  do i = 1, nn1
!!$
!!$    ! Compute base vertex number
!!$    ivt = i-
!!$
!!$    print *, 
!!$  end do
!!$
!!$  print *, nn,mm
!!$  stop

!!$  print *, nvt
!!$  stop
!!$
  do i = 1, n
    do j = 1, m-1

      ! Compute base vertex number
      ivt = j-1 + m*(i-1)
      
      write(cbuffer1, '(I)') mod(ivt,     n*m)+nvt+1
      write(cbuffer2, '(I)') mod(ivt+1,   n*m)+nvt+1
      write(cbuffer3, '(I)') mod(ivt+m+1, n*m)+nvt+1
      write(cbuffer4, '(I)') mod(ivt+m,   n*m)+nvt+1
      
      write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))//' '//&
                       trim(adjustl(cbuffer3))//' '//trim(adjustl(cbuffer4))
    end do
  end do

!!$  do i = 1, n
!!$    
!!$    write(cbuffer1, '(I)') mod(m*(i-1), n*m)+nvt+1
!!$    write(cbuffer2, '(I)') mod(m*i,     n*m)+nvt+1
!!$    
!!$    write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))//' 1 0'
!!$    
!!$  end do
  
  !-----------------------------------------------------------------------------
  write(100,'(A)') 'KNPR'
  !-----------------------------------------------------------------------------
  
  ! Write nodal property for vertex at origin
  do i = 1, nvt
    write(100,'(A)') '0'
  end do

  do i = 1, n
    ! Write nodal property for interior vertex
    do j = 1, m-1
      write(100,'(A)') '0'
    end do
    ! Write nodal property for boundary vertex
    write(100,'(A)') '1'
  end do
  
  !-----------------------------------------------------------------------------
  write(100,'(A)') 'KMM'
  !-----------------------------------------------------------------------------
  
  write(cbuffer1, '(I)') m+nvt
  write(cbuffer2, '(I)') m*n+nvt

  write(100,'(A)') trim(adjustl(cbuffer1))//' '//trim(adjustl(cbuffer2))
  
  close(100)

end program gridgen_otype
