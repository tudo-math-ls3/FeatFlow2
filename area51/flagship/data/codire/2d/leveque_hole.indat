# -*- mode: sh; -*-

#
# Input data for LeVeque benchmark
#

defconst: r0 = 0.15
defconst: x0 = 0.5
defconst: y0 = 0.75
defconst: x1 = 0.5
defconst: y1 = 0.25
defconst: x2 = 0.25
defconst: y2 = 0.5
defexpr:  sqr1 = SQRT((x-_x0)^2+(y-_y0)^2)
defexpr:  sqr2 = SQRT((x-_x1)^2+(y-_y1)^2)
defexpr:  sqr3 = SQRT((x-_x2)^2+(y-_y2)^2)
defexpr:  sqr4 = SQRT((x-_x1)^2+(y-_y1)^2)/_r0
defexpr:  sqr5 = SQRT((x-_x2)^2+(y-_y2)^2)

# Specify the initial solution by logical expressions and solution values
[initial_solution]
NCOMP
1
if(@sqr1 <= _r0  & (ABS(x-0.5)>=0.025 | ABS(y-0.6) >=0.25), 1,...
if(@sqr2 <= _r0, 1-@sqr4,...
if(@sqr3 <= _r0, 0.25*(1+COS(_pi*(MIN(@sqr5,_r0))/_r0)), 0)))

[exact_solution]
NCOMP
1
if(@sqr1 <= _r0  & (ABS(x-0.5)>=0.025 | ABS(y-0.6) >=0.25), 1,...
if(@sqr2 <= _r0, 1-@sqr4,...
if(@sqr3 <= _r0, 0.25*(1+COS(_pi*(MIN(@sqr5,_r0))/_r0)), 0)))

# Specify the initial velocity by logical expressions and solution values
[initial_velocity]
NCOMP
2
0.5 - y
x   - 0.5


# Specify the boundary conditions for the primal problem
# 1. The first item of the parameter section always contains 
#    the right value of the boundary interval.
# 2. The second item defines whether the right endpoint belongs 
#    to the interval (ieptyp=1) or no (ieptyp=0)
# 3. The third item defines the boundary type: 
#    Neumann boundary condition   ibctyp = 0
#    Dirichlet boundary condition ibctyp = 1
[boundary_conditions_primal]
NBCT
2
NEXPR
1
IBCT
1
NCOMP
1
IBCT
2
NCOMP
1
PARAMETERS
4.0  T  0
