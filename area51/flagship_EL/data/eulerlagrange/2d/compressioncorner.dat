# -*- mode: any-ini; -*-

################################################################################
#                     Input parameters for the FEM-AFC solver                  #
#                                                                              #
#                  Oblique Shock on a 15 Degree Wedge at Mach 2.5              #
#                                                                              #
################################################################################

simportdatafiles(2) =
  'data/eulerlagrange/default.dat'
  'data/solverdefault.dat'

################################################################################

application = eulerlagrange

################################################################################
[Eulerlagrange]
################################################################################

# file which contains the application specific data
indatfile = data/eulerlagrange/2d/compressioncorner.indat

# section name of boundary condition for primal problem
sprimalbdrcondname = boundary_conditions_primal

# section name of boundary condition for dual problem
sdualbdrcondname = boundary_conditions_dual

# number of spatial dimensions
ndimension = 2

# solution algorithm
algorithm = transient_primal


################################################################################ 
# Initialisation for Euler-Lagrange
################################################################################

#-------------------------------------------------------------------------------
# number of particles
#-------------------------------------------------------------------------------

nPart = 1000

#-------------------------------------------------------------------------------
# searchalgorithm for the particle
#-------------------------------------------------------------------------------
# bruteforce	Brute force method
# raytrace2D	Raytracing method in 2D
# midpoint		Find element with the nearest midpoint
#-------------------------------------------------------------------------------
search = midpoint

#-------------------------------------------------------------------------------
# startingposition of the particles
#-------------------------------------------------------------------------------
# 0 random startingposition 
#	xmin = minval(p_DvertexCoords(1,:))
#	xmax = 0.2*maxval(p_DvertexCoords(1,:))
#	ymin = minval(p_DvertexCoords(2,:))
#	ymax = maxval(p_DvertexCoords(2,:))
# 1 individual startingposition
# 2 initialize the starting position by the data of a graymap image
# 3 uniformly distributed over the domain
#-------------------------------------------------------------------------------
startpos = 3

# PGM-file for startingpositions
filestartpoints = data/eulerlagrange/2d/drop.pgm

# minimum particle-position in x-direction 
xmin = 1.5e-4
# maximum particle-position in x-direction
xmax = 8e-2
# minimum particle-position in y-direction 
ymin = 1.5e-3
# maximum particle-position in y-direction
ymax = 9.0e-2

#-------------------------------------------------------------------------------
# density of the particle
#-------------------------------------------------------------------------------
# 0 all particles have the same density (particledensity) 
# 1 random density of the particles (0 to particledensity)
# 2 random density of the particles (particledensitymin to particledensitymax)
#-------------------------------------------------------------------------------
idensitypart = 0

# particle density in kg/m^3
particledensity = 4000

# particle density minimum in kg/m^3
particledensitymin = 4000
# particle density maximum in kg/m^3
particledensitymax = 4000

#-------------------------------------------------------------------------------
# diameter of the particle 
#-------------------------------------------------------------------------------
# 0 all particles have the same diameter 
# 1 random diameter of the particles (0 to particlediam)
# 2 random diameter of the particles (particlediammin to particlediammax)
#-------------------------------------------------------------------------------
idiampart = 0

#-------------------------------------------------------------------------------
# typical diameters
#-------------------------------------------------------------------------------
# combustions or terpene: 	1e-10 m to 1e-9 m
# soot from a blast furnace:	1e-9 m to 1e-6 m
#-------------------------------------------------------------------------------
# diameter of the particle in m
particlediam = 1e-6

# particle diameter minimum in m
particlediammin = 1e-8
# particle diameter maximum in m
particlediammax = 1e-6


#-------------------------------------------------------------------------------
# initial velocity of the particles (particles have the same velocity)
#-------------------------------------------------------------------------------

# velocity in x-direction in m/s
velopartx = 767.5719291044e0

# velocity in y-direction in m/s
veloparty = 0e0 
               

#-------------------------------------------------------------------------------
# scaling for the domain (to handle very small domains)
#-------------------------------------------------------------------------------

# scalar in x-direction
domscalex = 767.5719291044e0

# scalar in y-direction
domscaley = 767.5719291044e0


#-------------------------------------------------------------------------------
# scalars for the gas phase (from .indat file)
#-------------------------------------------------------------------------------

# scalar for the velocity in x-direction
velogasx = 767.5719291044e0

# scalar for the velocity in y-direction
velogasy = 767.5719291044e0

# scalar for density of the gas phase
rho_gas= 1.5e0 
    
                                 
#-------------------------------------------------------------------------------
# boundarybehaviour of the particles
#-------------------------------------------------------------------------------
# 0 ideal wall collision (incidence angle is equal to emergent angle)
# 1 slip condition (particle slips along the boundary)
# 2 no slip condition 
#-------------------------------------------------------------------------------
boundbehav = 0


#-------------------------------------------------------------------------------
# gravity
#-------------------------------------------------------------------------------

# gravity in x-direction in m/s^2
gravityx = 0

# gravity in y-direction in m/s^2 (conventional standard value: -9.80665)
gravityy = -9.80665


#-------------------------------------------------------------------------------
# temperature of the particles
#-------------------------------------------------------------------------------
# 0 all particles have the same temperature 
# 1 random temperature of the particles (0 to parttemp)
# 2 random temperature of the particles (parttempmin to parttempmax)
#-------------------------------------------------------------------------------
itemppart = 0

# temperature of the particles in Kelvin
parttemp = 277

# particle temperature minimum in Kelvin
parttempmin = 150
# particle temperature maximum in Kelvin
parttempmax = 300


#-------------------------------------------------------------------------------
# gas phase
#-------------------------------------------------------------------------------

# kinematic viscosity of the gas
gas_nu = 1e-5

# gas temperature in Kelvin
temp_gas = 277

#-------------------------------------------------------------------------------
# specitic heats at konstant volumes (in J / kg * K)
#-------------------------------------------------------------------------------

# gas phase
c_v_gas = 718

# particle phase
c_v_part = 1380

#-------------------------------------------------------------------------------
# output particle phase (additional to the data of the output file of the gasphase)
#-------------------------------------------------------------------------------
# 0 no output
# 1 only particle positions
# 2 position, velocity, diameter, mass, density and temperatur of the particles
#-------------------------------------------------------------------------------
ipartoutput = 2

#-------------------------------------------------------------------------------
# choice coupling mode (one-way or two-way coupling)
#-------------------------------------------------------------------------------
# 1 	one-way coupling (particles have no influence on the gas phase)
# 2 	two-way coupling (!!!TODO!!!)
#-------------------------------------------------------------------------------
icouplingpart = 1

#-------------------------------------------------------------------------------
# choice solution algorithmn for the particle phase
#-------------------------------------------------------------------------------
# 1 	Runge-Kutta first order / explicit Euler method (interfacial forces)
# 2 	Runge-Kutta second order / improved Euler or Heuns' method (interfacial forces)
# 3	Runge-Kutta fourth order / classic Runge-Kutta (interfacial forces)
# -1 	Runge-Kutta first order / explicit Euler method (particle tracing)
# -2 	Runge-Kutta second order / improved Euler method (particle tracing)
# -3	Runge-Kutta fourth order / classic Runge-Kutta (particle tracing)
# 11 	implicit Euler method (interfacial forces)
#-------------------------------------------------------------------------------
isolutionpart = 11

#-------------------------------------------------------------------------------
# select interfacial forces for the particle movement
#-------------------------------------------------------------------------------
# dragforce (most important one)
# gravity
# virtualmassforce (TODO)
# bassetforce (TODO) 
# magnusforce (TODO)
# saffmanforce (TODO)
#-------------------------------------------------------------------------------
sselectforce(1) =
 dragforce

#-------------------------------------------------------------------------------
# domain with triangle or rectangles (!!!TODO!!!)
#-------------------------------------------------------------------------------
# 1 	triangles
# 2 	rectangles
# 3 	both
#-------------------------------------------------------------------------------
idomtype = 1


################################################################################
################################################################################

# type of mass matrix
# 0 = no mass matrix
# 1 = consistent mass matrix
# 2 = lumped mass matrix
imasstype = 2

# type of mass antidiffusion
# 0 = no mass antidiffusion
# 1 = consistent mass antidiffusion
imassantidiffusiontype = 0

# type of dissipation
# 0 = no dissipation
# 1 = scalar dissipation (-1 = dimensional splitting)
# 2 = tensorial dissipation (-2 = dimensional splitting)
# 3 = Rusanov type (-3 = dimensional splitting)
idissipationtype = 1

# type of system coupling
# 0 = segregated approach
# 1 = fully-coupled approach
isystemcoupling = 0

# type of preconditioner
# 0 = Galerkin scheme
# 1 = low-order scheme with scalar dissipation
# 2 = low-order scheme with tensorial dissipation
# 3 = low-order schemes of Rusanov type
isystemPrecond = 2

# variables for flux correction
# (i)  for synchronized flux correction list 
#      all variables in alphabetical(!) order, e.g.
#
# slimitingvariable = density,pressure,velocity
#
# (ii) for sequential/multiplicative flux correction list
#      all variables one by one, e.g.
#
# slimitingvariable(3) =
#      density
#      pressure
#      velocity
slimitingvariable = density,energy,momentum

# number of failsafe steps
nfailsafe = 4

# variables for failsafe flux correction
sfailsafevariable(3) =
  pressure
  velocity_x
  velocity_y

# type of initial solution profile
# 0 = zero initial solution
# 1 = analytical initial solution: pointwise values
# 2 = PGM image
# 3 = anayltical initial solution: consistent L2-projection
# 4 = anayltical initial solution: lumped L2-projection
isolutiontype = 3

# section name of initial solution
ssolutionname(4) = 
  @initsol_rho
  @initsol_vel_x
  @initsol_vel_y
  @initsol_Etot

# type of exact solution profile
# 0 = no exact solution available
# 1 = analytical initial solution
iexactsolutiontype = 0

# section name of exact solution
sexactsolutionname = 

#-------------------------------------------------------------------------------

# file which contains the boundary parametrisation
prmfile = grids/2d/compression_15deg_unstruct_trias.prm

# file which contains the triangulation
trifile = grids/2d/compression_15deg_unstruct_trias.tri

# type of finite element space
#  1 = P1 finite elements
#  2 = P2 finite elements
# 11 = Q1 finite elements
# 12 = Q2 finite elements
# -1 = mixed P1/Q1 finite elements
# -2 = mixed P2/Q2 finite elements
celement = 1

# convert mesh to triangular mesh?
iconvToTria = 0

# type of matrix format
# 7 = matrix format 7
# 9 = matrix format 9
imatrixformat = 9

# type of system format
# 0 = interleave scalar format
# 1 = block system
isystemformat = 0

#-------------------------------------------------------------------------------

# section name of the inviscid stabilization
inviscid = Inviscid

# section name of the time-stepping algorithm
timestep = Timestepping

# section name of the top-level solver
solver = FullMultigridSolver

# section name of the output configuration
output = Output

# section name of the adaptation configuration
adaptivity = Adaptivity

# section name of the error estimation configuration
errorestimator = ErrorEstimator


################################################################################
[Inviscid]
################################################################################

# type of spatial stabilization:
#  0 = no stabilization (Galerkin)
#  1 = discrete upwinding
# 10 = semi-impl. FEM-FCT
# 11 = semi-expl. FEM-FCT
# 12 = linearised FEM-FCT
# 13 = iterative FEM-FCT
# 14 = characteristic FEM-FCT
# 20 = FEM-TVD
# 21 = FEM-GP
istabilisation = 1

# perform prelimiting
iprelimiting = 1


################################################################################
[Output]
################################################################################

# type of UCD output format
# 0 = no output
# 1 = GMV
# 2 = AVS
# 3 = Paraview (VTK)
iformatUCD = 3

# time interval for UCD output
dstepUCD = 0.001

# file for UCD output of solution
sucdsolution = out/compressioncorner

# file for UCD output of error
sucderror = out/compressioncorner_error

# variables for ucd output
sucdvariable(7) =
 density
 velocity
 energy
 pressure
 velo_part
 vol_part
 vol_partaver


################################################################################
[Timestepping]
################################################################################

# level of output information:
# 0 = no output
# 1 = errors
# 2 = errors+warnings
# 3 = information
# 4 = verbose output
ioutputlevel = 3

# type of time-stepping algorithm
# 1 = two-level theta-scheme
# 2 = explicit Runge-Kutta scheme
# 5 = full MG
ctimestepType = 1

# norm to use for solution variation checking
# 0 = Euclidian norm
# 1 = L1-norm
# 2 = L2-norm
# 3 = MAX-norm
isolNorm = 0

# implicitness parameter: Valid values of THETA are in the range [0,1]
theta = 1.0

# number of steps for multisteps scheme
multisteps = 0

# initial time for the simulation
dinitialTime = 0.0

# final time for the simulation.
dfinalTime = 1.000

# initial time step size
dinitialStep = 0.001

# lower bound for the admissible time step
dminStep = 0.001

# upper bound for the admissible time step
dmaxStep = 1.0

# adaptive time stepping algorithm
iadaptTimestep = 0

# initial time for adaptive time stepping
dadaptTime = 0.0

# minimum factor by which time step may change
ddecreaseFactor = 0.75

# maximum factor by which time step may change
dincreaseFactor = 1.5

# reduction factor by which time step is reduced if simulation fails
dstepReductionFactor = 0.8

# target tolerace for relative changes
depsRel = 0.0

# absolute tolerance for relative changes
depsAbs = 0.0

# tolerance for steady state convergence
depsSteady = 1e-6


################################################################################
[FullMultigridSolver]
 csolverType = 5
################################################################################

# level of output information:
# 0 = no output
# 1 = errors
# 2 = errors+warnings
# 3 = information
# 4 = verbose output
ioutputlevel = 3

# minimum multigrid level number
nlmin = 3

# maximum multigrid level number
nlmax = 3

# type of multigrid cycle
# 0 = F-cylce
# 1 = V-cycle
# 2 = W-cycle
# 3,4,5 = corresponding saw tooth variants
icycle = 0

# minimum number of multigrid steps
ilmin = 1

# maximum number of multigrid steps
ilmax = 1

# nonlinear subsolver
# 1 = nonlinear single-grid solver
# 3 = nonlinear multigrid solver
isolver = 1

# name of the subsolver
ssolvername = NonlinearSolver


################################################################################
[NonlinearMultigridSolver]
 csolverType = 3
################################################################################

# level of output information:
# 0 = no output
# 1 = errors
# 2 = errors+warnings
# 3 = information
# 4 = verbose output
ioutputlevel = 0

# norm to use for defect checking
# 0 = Euclidian norm
# 1 = L1-norm
# 2 = L2-norm
# 3 = MAX-norm
iresNorm = 0

# minimum multigrid level number
# If NLMIN = NLMAX then the nonlinear problem is solved by a single-grid solver
nlmin = 1

# maximum multigrid level number (see NLMIN)
nlmax = 1

# minimum number of linear mg steps
ilmin = 1

# maximum number of linear mg steps
ilmax = 1

# type of multigrid cycle
# 0 = F-cylce
# 1 = V-cycle
# 2 = W-cycle
# 3,4,5 =  corresponding saw tooth variants
icycle = 1

# nonlinear coarse grid solver
# 1 = nonlinear single-grid solver
# 3 = nonlinear multigrid solver
isolver = 1

# name of nonlinear coarse grid solver
ssolvername = NonlinearSolver

# smoother for the nonlinear multigrid solver
# =1, nonlinear single-grid smoother, =3 nonlinear multigrid smoother
ismoother = 1

# name of nonlinear smoother
ssmoothername = NonlinearSolver

# number of presmoothing steps (if saw tooth variant is used, then no
# presmoothing steps are performed in the coarse-to-fine part of the cycle)
npresmooth = 2

# number of postsmoothing steps (if saw tooth variant is used, then no
# postsmoothing steps are performed in the coarse-to-fine part of the cycle)
npostsmooth = 2

# factor for pre/postsm. on coarser levels (On each level l, the number of
# smoothing steps is computed from SM_l=SM_L*NSFAC**(L-l), where L stands
# for the finest grid level and SM_L is the prescribed number of smoothing steps)
nsfac = 1

# nonlinear relaxation parameter
domega = 1.0

# absolute tolerance for residual
depsAbs = 1e-12

# relative tolerance for residual
depsRel = 0.0

# relative tolerance for stagnation
depsStag = 0.0


################################################################################
[NonlinearSolver]
 csolverType = 1
################################################################################

# level of output information:
# 0 = no output
# 1 = errors
# 2 = errors+warnings
# 3 = information
# 4 = verbose output
ioutputlevel = 3

# norm to use for defect checking
# 0 = Euclidian norm
# 1 = L1-norm
# 2 = L2-norm
# 3 = MAX-norm
iresNorm = 0

# minimum number of nonlinear steps
nminIterations = 1

# maximum number of nonlinear steps
nmaxIterations = 10

# preconditioner for the nonlinear solver
# 1 = block-diagonal preconditioner
# 2 = defect-correction algorithm
# 3 = algebraic Newton algorithm
iprecond = 2

# nonlinear solver
# 101 = fixed-point iteration
# 102 = predictor-corrector fixed-point iteration
isolver = 101

# strategy for choosing the perturbation parameter in Newton's method
# 1 = NITSOL
# 2 = SQRT(EPS)
# otherwise, user-defined value
dperturbationStrategy = 1

# strategy for choosing the forcing term in Newton's method
# 1 = choice 1 by Eisenstat/Walker
# 2 = choice 2 by Eisenstat/Walker
# 3 = choice by Brown/Saad
# 4 = choice by Dembo/Steihaug
# otherwise, user-defined fixed value
dforcingStrategy = 1

# check sufficient decrease condition in globalization
# 0 = apply Newton increment without globalization
# 1 = check sufficient decrease condition and perform backtracking if required
icheckSufficientDecrease = 1

# maximum number of backtracking steps
nmaxBacktrackingSteps = 5

# update frequency of Jacobian
iupdateFrequency = 0

# nonlinear relaxation parameter
domega = 1.0

# absolute tolerance for residual
depsAbs = 1e-12

# relative tolerance for residual
depsRel = 1e-2

# relative tolerance for stagnation
depsStag = 0.0

# name of linear sub-solver
ssolvername = LinearSolver


################################################################################
[LinearMultigridSolver]
 csolverType = 4
################################################################################

# level of output information:
# 0 = no output
# 1 = errors
# 2 = errors+warnings
# 3 = information
# 4 = verbose output
ioutputlevel = 0

# norm to use for defect checking
# 0 = Euclidian norm
# 1 = L1-norm
# 2 = L2-norm
# 3 = MAX-norm
iresNorm = 0

# minimum multigrid level number
# If NLMIN = NLMAX then the nonlinear problem is solved by a single-grid solver
nlmin = 1

# maximum multigrid level number (see NLMIN)
nlmax = 1

# minimum number of linear mg steps
ilmin = 1

# maximum number of linear mg steps
ilmax = 100

# type of multigrid cycle
# 0 = F-cylce
# 1 = V-cycle
# 2 = W-cycle
# 3,4,5 =  corresponding saw tooth variants
icycle = 1

# linear coarse grid solver
# 2 = linear single-grid solver
isolver = 2

# name of linear coarse grid solver
ssolvername = LinearSolver

# smoother for the linear multigrid solver
# 2 = linear single-grid solver
# 4 = linear multigrid solver
ismoother = 2

# name of smoother
ssmoothername = LinearSmoother

# number of presmoothing steps (if saw tooth variant is used, then no
# presmoothing steps are performed in the coarse-to-fine part of the cycle)
npresmooth = 2

# number of postsmoothing steps (if saw tooth variant is used, then no
# postsmoothing steps are performed in the coarse-to-fine part of the cycle)
npostsmooth = 2

# factor for pre/postsm. on coarser levels (On each level l, the number of
# smoothing steps is computed from SM_l=SM_L*NSFAC**(L-l), where L stands
# for the finest grid level and SM_L is the prescribed number of smoothing steps)
nsmoothfactor = 1

# linear relaxation parameter
domega = 1

# absolute tolerance for residual
depsAbs = 1e-12

# relative tolerance for residual
depsRel = 1e-2

# relative tolerance for stagnation
depsStag = 0.0


################################################################################
[LinearSmoother]
 csolverType = 2
################################################################################

# smoother for the linear multigrid solver
#  2 = Jacobi
#  4 = SOR
#  5 = SSOR
#  7 = BiCGSTAB
#  8 = FGMRES
# 50 = ILU
isolver = 4

# dimension of the Krylov subspace for FGMRES method
nkrylov = 15

# tolerance of (M)ILU-preconditioner
depsILU = 1e-12

# size of fill-in for (M)ILU(s)
ifill = 0

# (M)ILU(s) relaxation
domega = 1.0

# name of preconditioner
sprecondName = LinearPrecond


################################################################################
[LinearSolver]
 csolverType = 2
################################################################################

# level of output information:
# 0 = no output
# 1 = errors
# 2 = errors+warnings
# 3 = information
# 4 = verbose output
ioutputlevel = 2

# norm to use for defect checking
# 0 = Euclidian norm
# 1 = L1-norm
# 2 = L2-norm
# 3 = MAX-norm
iresNorm = 0

# minimum number of linear steps
nminIterations = 1

# maximum number of linear steps
nmaxIterations = 100

# type of linear solver
#  2 = Jacobi
#  4 = SOR
#  5 = SSOR
#  7 = BiCGSTAB
#  8 = FGMRES
# 11 = UMFPACK4
isolver = 7

# dimension of the Krylov subspace for FGMRES method
nkrylov = 10

# linear relaxation parameter
domega = 1.0

# absolute tolerance for residual
depsAbs = 1e-14

# relative tolerance for residual
depsRel = 1e-2

# relative tolerance for stagnation
depsStag = 0.0

# name of preconditioner
sprecondName = LinearPrecond


################################################################################
[LinearPrecond]
 csolverType = 2
################################################################################

# preconditioner for the linear single-grid solver
#  2 = Jacobi
#  4 = SOR
#  5 = SSOR
# 50 = ILU
isolver = 50

# tolerance of (M)ILU-preconditioner
depsILU = 1e-12

# size of fill-in for (M)ILU(s)
ifill = 0

# (M)ILU(s) relaxation
domega = 1.0


################################################################################
[Adaptivity]
################################################################################

# number of pre-adaptation steps
npreadapt = 0

# number of adaptation steps
nadapt = 10

# time for grid adaptivity
dtimeadapt = 0.0

# time step for grid adaptivity
dstepadapt = 0.0

# maximum number of refinement levels
nsubdividemax = 3

# adaptation strategy
# 1 = red-green
iadaptationStrategy = 1

# refinement tolerance
drefinementTolerance = 0.1

# coarsening tolerance
dcoarseningTolerance = 0.05


################################################################################
[ErrorEstimator]
################################################################################

# type of error estimator
# 1 = L2-projection
# 2 = node-based SPR
# 3 = element-based SPR
# 4 = face-based SPR
# 5 = limited gradient averaging
# 6 = second-difference indicator
ierrorestimator = 7

# type or grid indicator
# 0 = as is
# 1 = equidistribution
# 2 = logarithmic equidistribution
igridindicator = 0

# noise filter
dnoisefilter = 0.001

# absolute filter
dabsfilter = 0.0001

# number of protection layers
nprotectLayers = 0

# tolerance for protection layers
dprotectLayerTolerance = 0.0
