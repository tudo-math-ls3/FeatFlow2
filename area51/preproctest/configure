#!/bin/sh
#
# This small shell script is used to create a default makefile
# for the application.
#

################################################################
# Don't let the perl configure script be confused by non-english
# messages from system information programs.
# (LC_ALL overrides the value of the LANG environment variable
# and the values of any other LC_* environment variables.)
LC_ALL=C
export LC_ALL

# Use this app-only flag and compile your application with
#
#   ./configure && make
#
# to compiler the application the default way, that is, f90cpp uses
# the C preprocessor cpp to preprocess the source code and line breaks
# need to be enforced manually by placing the string MYNEWLINE in the
# source code. If you want to pass the source code through the Fortran
# preprocessor (fpp) making use of the f90cpp script type
#
#  ./configure && make CPP="fpp"
#
# If you want to compile your application without making use of the
# f90cpp script then type:
#
#  ./configure && make F90CPP=
#
# The last approach only works for those compiler suites which support
# built-in source file preprocessing making use of cpp or fpp internally.

# The following compilers have been tested so far:
#
# GNU Gfortran compiler:
#   gfortran -cpp -ffree-line-length-none src/preproctest.f90 -o preproctest
#
# Intel Fortran compiler:
#   ifort -fpp src/preproctest.f90 -o preproctest
#
# SUN Studio Fortran compiler:
#   sunf90 -fpp -e src/preproctest.f90 -o preproctest
#
# Open64 Fortran compiler:
#   openf90 -cpp src/preproctest.f90 -o preproctest
#
# PathScale Fortran compiler:
#   pathf90 -cpp src/preproctest.f90 -o preproctest
#

APPONLYFLAGS=""

../../bin/configure \
        --appname=preproctest \
        --programfile=src/preproctest.f90 \
        --header-files-to-copy=src/preproctest.h \
        --apponlyflags="$APPONLYFLAGS"\
	--buildlib=""\
	--libs=""\
        "$@"
