################
[OPTIMALCONTROL]
################

# Section defining the boundary expressions
ssectionBoundaryExpressions = BDEXPRESSIONS

# Section defining the boundary conditions of the primal equation
ssectionBoundaryCondPrimal = BDCONDITIONS_PRIMAL

# Section defining the boundary conditions of the dual equation
ssectionBoundaryCondDual = BDCONDITIONS_DUAL

# Section defining the boundary conditions of the linearised primal equation
ssectionBoundaryCondPrimalLin = BDCONDITIONS_PRIMALLIN

# Section defining the boundary conditions of the linearised dual equation
ssectionBoundaryCondDualLin = BDCONDITIONS_DUALLIN

# Section defining the boundary conditions of the Poincare-Steklov operator
# for H^1/2 Dirichlet boundary control
ssectionBoundaryCondPCSteklov = BDCONDITIONS_PCSTEKLOV

# Name of the section that defines the target flow.
stargetFunction = OPTCTARGETFUNCTION

# Name of the section that defines the initial condition.
sinitialCondition = INITIALCONDITION

# Name of the section that defines the initial solution of the iteration
sinitialIterate = INITIALITERATE

# Name of the section that defines the primal RHS of the (Navier-)Stokes equation
srhsPrimal = RIGHTHANDSIDE_PRIMAL

# Name of the section that defines the primal RHS of the (Navier-)Stokes equation
srhsDual = RIGHTHANDSIDE_DUAL

# Name of the section defining the physics
ssectionPhysics = CC-PHYSICS

# Name of the section defining the constraints in the distributed control
ssectionConstrDistCtrl = CONSTRAINTS_DISTCTRL

# Name of the section defining the constraints in the L2 boundary control
ssectionConstrL2BdC = CONSTRAINTS_L2BDC

# Name of the section defining the constraints in the H^1/2 boundary control
ssectionConstrH12BdC = CONSTRAINTS_H12BDC

# Name of the section defining the constraints in the state control
ssectionConstrState = CONSTRAINTS_STATE

# sigma-parameter that controls the blending in
# F(u) = u - P( u-\sigma(\alpha u + \lambda) ). Defaults to 1.0.
# A value of sigma=1/alpha would give
# F(u) = u - P( -1/alpha \lambda) ) which seems to be more instable.
dsigmaC = 1.0

# Regularisation parameter ALPHA for the ||u||-term in the optimal-control problem.
# -1.0 = no distributed control
# It is possible to specify multiple parameters here, e.g. "0.1 0.05 0.25".
# In this case, a path following algorithm will be applied, i.e.,
# the parameter is reduced with every nonlinear step.
#
# Note: The section CONSTRAINTS_DISTCTRL allows to specify constraints.
dalphaDistC = 0.1

# Regularisation parameter ALPHA for the ||u||-term in the optimal-control problem
# on the boundary (L2 Dirichlet boundary control).
# -1.0 = no boudary control control
# It is possible to specify multiple parameters here, e.g. "0.1 0.05 0.25".
# In this case, a path following algorithm will be applied, i.e.,
# the parameter is reduced with every nonlinear step.
#
# Note: Boundary parts with L2 boundary control (type 7) must be
# specified in the boundaryconditions.dat if dalphaL2BdC >= 0!
# The section CONSTRAINTS_L2BDC allows to specify constraints.
dalphaL2BdC = -1.0

# Regularisation parameter ALPHA for the <Su,u>-term in the optimal-control problem
# on the boundary (H^1/2 Dirichlet boundary control).
# -1.0 = no boudary control control
# It is possible to specify multiple parameters here, e.g. "0.1 0.05 0.25".
# In this case, a path following algorithm will be applied, i.e.,
# the parameter is reduced with every nonlinear step.
#
# Note: Boundary parts with L2 boundary control (type 7) must be
# specified in the boundaryconditions.dat if dalphaH12BdC >= 0!
# The section CONSTRAINTS_H12BDC allows to specify constraints.
dalphaH12BdC = -1.0

# Regularisation parameter for the terminal condition ||y(T)-z(T)|| in the
# nonstationary optimal control problem.
# It is possible to specify multiple parameters here, e.g. "0.1 0.05 0.25".
# In this case, a path following algorithm will be applied, i.e.,
# the parameter is reduced with every nonlinear step.
dalphaEndTimeC = 0.0  # 1.0

# Penalty parameter for the dirichlet boundary control
ddirichletBCPenalty = 4.0

# Penalty parameter for the end time condition in the dual equation.
# This value is added to the weight of the mass matrix in the last timestep
# of the dual equation. Standard=0.0, which implements the 
# "first-optimise-then-discretise = first-discretise-then-optimise" strategy.
# A higher value can be used to impose lamnda(T)=0.
dendTimeCondDualPenalty = 0.0

# Formulation of the Space-time problem.
# =0: Formulation for the generation of reference results from papers
# =1: usual formulation as specified in the DFG applicance
# The two formulations differ in a "-"-sign in front of the dual velocity.
ispaceTimeFormulation = 0

# Whether to treat the convection explicitly or implicitly.
# =0: Treat the convection implicitely.
# =1: Treat the convection explicitely. (This is the formulation of the paper
#     of Baerwolff and Hinze!)
iconvectionExplicit = 0

# Type of scaling of the global system.
# =0: no scaling.
# =1: System scaled by Delta(t) to normalise diagonal blocks.
csystemScaling = 0

# Area of observation.
# This defines an observation box in the format
#   DobservationArea = x1 y1 x2 y2
# For example
#   DobservationArea = -0.5 -0.4 0.4 0.5
# defines the box [-0.4,0.4] x [-0.5,0.5].
# If not specified, the whole domain is observed.

dobservationArea = 

######################
[CONSTRAINTS_DISTCTRL]
######################

# Type of constraints to apply to the control u.
# =0: No constraints.
# =1: Constant constraints on u active: dmin1 <= u_1 <= dmax1, dmin2 <= u_2 <= dmax2.
#     Implemented by DOF.
# =2: Constant constraints on u active: dmin1 <= u_1 <= dmax1, dmin2 <= u_2 <= dmax2.
#     Implemented by cubature point (more exact). Analytic Newton matrix.
cconstraints = 0

# Type of definition of the constraints if cdistVelConstraints <> 0.
# =0: constants specified in dmin1/2, dmax1/2.
# =1: functions defined in the sections ssectionmin1/2, ssectionmax1/2.
constrType = 0

# Constraints on u_1
dmin1 = -0.5 #5 #-1E10 #-0.01
dmax1 = 0.5 #2 #1E10 #0.01

ssectionmin1 = 
ssectionmax1 = 

# Constraints in u_2
dmin2 = -0.5 #2 #-1E10 #-0.01
dmax2 = 0.5 #5 #1E10 #0.01

ssectionmin2 = 
ssectionmax2 = 

###################
[CONSTRAINTS_L2BDC]
###################

# Type of constraints to apply to the control u.
# =0: No constraints.
# =1: Constant constraints on u active: dmin1 <= u_1 <= dmax1, dmin2 <= u_2 <= dmax2.
#     Implemented by DOF.
cconstraints = 0

# Type of definition of the constraints if cdistVelConstraints <> 0.
# =0: constants specified in dmin1/2, dmax1/2.
# =1: functions defined in the sections ssectionmin1/2, ssectionmax1/2.
constrType = 0

# Constraints on u_1
dmin1 = -1E10
dmax1 = 1E10

ssectionmin1 = 
ssectionmax1 = 

# Constraints in u_2
dmin2 = 0.0
dmax2 = 0.0

ssectionmin2 = 
ssectionmax2 = 

####################
[CONSTRAINTS_H12BDC]
####################

# Type of constraints to apply to the control u.
# =0: No constraints.
# =1: Constant constraints on u active: dmin1 <= u_1 <= dmax1, dmin2 <= u_2 <= dmax2.
#     Implemented by DOF.
cconstraints = 0

# Type of definition of the constraints if cdistVelConstraints <> 0.
# =0: constants specified in dmin1/2, dmax1/2.
# =1: functions defined in the sections ssectionmin1/2, ssectionmax1/2.
constrType = 0

# Constraints on u_1
dmin1 = -1E10
dmax1 = 1E10

ssectionmin1 = 
ssectionmax1 = 

# Constraints in u_2
dmin2 = 0.0
dmax2 = 0.0

ssectionmin2 = 
ssectionmax2 = 

###################
[CONSTRAINTS_STATE]
###################

# Type of constraints to apply to the state y
# =0: No constraints.
# =1: Constant constraints on y active: dumin1 <= u_1 <= dumax1, dumin2 <= u_2 <= dumax2.
#     Implemented by DOF. Moreau-Yosida regularisation.
# =2: Constant constraints on u active: dumin1 <= u_1 <= dumax1, dumin2 <= u_2 <= dumax2.
#     Implemented by cubature point (more exact). Analytic Newton matrix.
#     Moreau-Yosida regularisation.
cconstraints = 0

# Type of definition of the constraints if ccontrolConstraints <> 0.
# =0: constants specified in dumin1/2, dumax1/2.
# =1: functions defined in the sections ssectionumin1/2, ssectionumax1/2.
cconstrType = 0

# Regularisation parameter for the Moreau-Yosida regularisation
dregularisation = 1.0

# Constraints on u_1
dmin1 = -0.5
dmax1 = 0.5

ssectionMin1 = 
ssectionMax1 = 

# Constraints in u_2
dmin2 = -0.5
dmax2 = 0.5

ssectionMin2 = 
ssectionMax2 = 

