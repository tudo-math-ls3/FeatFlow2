# -------------------------------------------------------------------
# This optional master file is the entry point for all data
# which is processed by the software. The simportdatafiles(.) parameter
# below defines a list of 'child' data files which are read during
# the initialisation. All parameters and sections following
# this parameter overwrite data from the DAT files; this allows
# to centrally define crucial parameters in numeric tests while
# the data files specify the general setting.
#
# If simportdatafiles(.) is not present as first parameter in this
# file, all parameters of the software must be defined here. This
# allows to collect all parameters in one file.
#
# If this file is missing, the software will search for parameters in
# a standard set of data files.
# -------------------------------------------------------------------

# In the following we define some basic directories that can be used
# in all sub-data-files as path specifications for input/output
# files. This allows to run the application in a benchmark
# environment with different settings

# Directory of the application
sappdirectory = .

# Directory with data files
sdatadirectory = %{sappdirectory}/data

# Directory for log files
slogdirectory = %{sappdirectory}/log

# Directory for visualisation files
spostdirectory = %{sappdirectory}/gmv

# Directory containing/receiving plain solution files
ssolutiondirectory = %{sappdirectory}/ns

# Directory for preprocessing files
spredirectory = %{sappdirectory}/pre

# The following defines a list of data files to read. The files may optionally
# contain a path specification. If no path os specified, the files
# are searched for in the same subdirectory as the master.dat.
# By default, we specify the sdatadirectory variable here as path specifier.

simportdatafiles(8) = 
  "%{sdatadirectory}/discretisation.dat"
  "%{sdatadirectory}/linsol_cc2d.dat"
  "%{sdatadirectory}/nonlinsol_cc2d.dat"
  "%{sdatadirectory}/output.dat"
  "%{sdatadirectory}/paramtriang.dat"
  "%{sdatadirectory}/bdconditions.dat"
  "%{sdatadirectory}/timediscr.dat"
  "%{sdatadirectory}/postprocessing.dat"
  
# From this point on, it's possible to additionally define 'alternative'
# parameter settings that overwrite settings in the DAT files. The
# parameters here must be introduced by the corresponding section
# to be overwritten. You can for example define:
#

[CC-DISCRETISATION]
# Type of equation (ISTOKES); 0=Navier Stokes, 1=Stokes calculation
iequation1    = 0
iequation2    = 0
NLMIN = 1
NLMAX = 5
dmu1 = 0.5
dmu2 = 0.5
RE1 = 10
RE2 = 1
ielementType = 4

[CC-LINEARSOLVER]
isolverType = 1
ismootherType = 1
icoarseGridSolverType = 0


[CC-POSTPROCESSING]
ioutputUCD = 1
sfilenameUCD = '%{spostdirectory}/u.gmv'
sfilenameUCD2 = '%{spostdirectory}/v.gmv'

#####################
[TIME-DISCRETISATION]
#####################

# Type of problem (ISTAT): 0=steady,1=nonsteady

itimedependence = 0                       # ISTAT

[CC-LINEARSOLVER]
isolverType = 1

nmaxIterations     = 100
depsRel            = 1E-13

[CC-COARSEGRIDSOLVER]
depsRel            = 1E-13
