################
[OPTIMALCONTROL]
################

# Section defining the boundary expressions
ssectionBoundaryExpressions = BDEXPRESSIONS

# Section defining the boundary conditions of the optimal control problem
ssectionBoundaryConditions = BDCONDITIONS

# Name of the section that defines the target flow.
stargetFunction = OPTCTARGETFUNCTION

# Name of the section that defines the initial condition.
sinitialCondition = INITIALCONDITION

# Name of the section that defines the RHS of the (Navier-)Stokes equation
srhs = RIGHTHANDSIDE

# Name of the section defining the physics
ssectionPhysics = "CC-PHYSICSPRIMAL"

# Regularisation parameter ALPHA for the ||u||-term in the optimal-control problem.
# -1.0 = no distributed control
dalphaC = 0.01 # 1.0

# Regularisation parameter ALPHA for the ||u||-term in the optimal-control problem
# on the boundary (Dirichlet boundary control).
# -1.0 = no boudary control control
dbetaC = 0.01 # 1.0

# Penalty parameter for the dirichlet boundary control
ddirichletBCPenalty = 4.0

# Regularisation parameter for the terminal condition ||y(T)-z(T)|| in the
# nonstationary optimal control problem.
dgammaC = 0.0  # 1.0

# Formulation of the Space-time problem.
# =0: Formulation for the generation of reference results from papers
# =1: usual formulation as specified in the DFG applicance
# The two formulations differ in a "-"-sign in front of the dual velocity.
ispaceTimeFormulation = 0

# Whether to treat the convection explicitly or implicitly.
# =0: Treat the convection implicitely.
# =1: Treat the convection explicitely. (This is the formulation of the paper
#     of Baerwolff and Hinze!)
iconvectionExplicit = 0

# Type of scaling of the global system.
# =0: no scaling.
# =1: System scaled by Delta(t) to normalise diagonal blocks.
csystemScaling = 0

# Type of constraints to apply to the control u.
# =0: No constraints.
# =1: Constant constraints on u active: dumin1 <= u_1 <= dumax1, dumin2 <= u_2 <= dumax2.
#     Implemented by DOF.
# =2: Constant constraints on u active: dumin1 <= u_1 <= dumax1, dumin2 <= u_2 <= dumax2.
#     Implemented by cubature point (more exact). Analytic Newton matrix.
# =3: Constant constraints on u active: dumin1 <= u_1 <= dumax1, dumin2 <= u_2 <= dumax2.
#     Implemented by DOF. Newton matrix is approximative.
# =4: Constant constraints on u active: dumin1 <= u_1 <= dumax1, dumin2 <= u_2 <= dumax2.
#     Implemented by cubature point (more exact). Adaptive integration.
ccontrolConstraints = 0

# Type of definition of the constraints if ccontrolConstraints <> 0.
# =0: constants specified in dumin1/2, dumax1/2.
# =1: functions defined in the sections ssectionumin1/2, ssectionumax1/2.
cconstraintsType = 0

# Constraints on u_1
dumin1 = -0.5 #5 #-1E10 #-0.01
dumax1 = 0.5 #2 #1E10 #0.01

ssectionumin1 = 
ssectionumax1 = 

# Constraints in u_2
dumin2 = -0.5 #2 #-1E10 #-0.01
dumax2 = 0.5 #5 #1E10 #0.01

ssectionumin2 = 
ssectionumax2 = 

# Area of observation.
# This defines an observation box in the format
#   DobservationArea = x1 y1 x2 y2
# For example
#   DobservationArea = -0.5 -0.4 0.4 0.5
# defines the box [-0.4,0.4] x [-0.5,0.5].
# If not specified, the whole domain is observed.

dobservationArea = 
