simportdatafiles(12) = 
  "main.dat"
  "bdconditions.dat"
  "discretisation.dat"
  "flows.dat"
  "linsol.dat"
  "forwardsolver.dat"
  "optcontrol.dat"
  "output.dat"
  "paramtriang.dat"
  "postprocessing.dat"
  "spacetimesolver.dat"
  "timediscr.dat"

#####################################################################
# reference configuration with full coupling for Navier-Stokes
#
# lambda := (t-1)^2 (-x1,x2)
#      y := t^2 (-x1,x2)
#      p := 0
#     xi := 0
#
# =>
#
# y\grad(y) = t^4 (x1,x2)
#####################################################################

[PARAMTRIANG]
sParametrisation = './pre/QUAD.prm'
sMesh = './pre/QUAD.tri'

[CC-PHYSICSPRIMAL]
iequation          = 0
RE                 = 1.0

[CC-DISCRETISATION]
NLMIN              = 2
NLMAX              = 3
iElementType       = 6

[TIME-PREPROCESSING]
ctypeStartVector   = 3

[RIGHTHANDSIDE]
ctype = 3
sflowExpressionY1 = '(2*TIME+((TIME-1)^2)/%{OPTIMALCONTROL.dalphaC})*(-X)+TIME^4*X'
sflowExpressionY2 = '(2*TIME+((TIME-1)^2)/%{OPTIMALCONTROL.dalphaC})*Y+TIME^4*Y'
sflowExpressionP = '0'

[INITIALITERATE]
ctype = 0

[INITIALCONDITION]
ctype = 3
sflowExpressionY1 = '%{REFERENCE-FUNCTION.sflowExpressionY1}'
sflowExpressionY2 = '%{REFERENCE-FUNCTION.sflowExpressionY2}'
sflowExpressionP = '%{REFERENCE-FUNCTION.sflowExpressionP}'

[BDEXPRESSIONS]
bdExpressions(4) =
  'yx1'           -1    %{REFERENCE-FUNCTION.sflowExpressionY1}
  'yx2'           -1    %{REFERENCE-FUNCTION.sflowExpressionY2}
  'lambdax1'      -1    '(TIME-1)^2*(-X)'
  'lambdax2'      -1    '(TIME-1)^2*(Y)'

[BDCONDITIONS]
bdComponent1(1)=
  4.0  3  4  'yx1'  'yx2'  'lambdax1'  'lambdax2' # [0.0,1.0] : Dirichlet-0 boundary

[TIME-DISCRETISATION]
niterations = 2
TIMENLMIN = 1
TIMENLMAX = 2
dtimeStepTheta = 0.5

[REFERENCE-FUNCTION]
ctype = 3
sflowExpressionY1 = 'TIME^2*(-X)'
sflowExpressionY2 = 'TIME^2*(Y)'
sflowExpressionP = '0'
sflowExpressionL1 = '(TIME-1)^2*(-X)'
sflowExpressionL2 = '(TIME-1)^2*(Y)'
sflowExpressionXI = '0'

[OPTCTARGETFLOW]
ctype = 3
sflowExpressionY1 = '2*(TIME-1)*(-X)+TIME^2*(-X)'
sflowExpressionY2 = '2*(TIME-1)*(Y)+TIME^2*(Y)'

[TIME-POSTPROCESSING]
#sgmvFileName = 'gmv/utest2quad.gmv' 
icalcError = 1

[TIME-SOLVER]
nminIterations         = 1
nmaxIterations         = 100
depsRel                = 1E-13
cpreconditioner        = 2
ctypeNonlinearIteration = 2
ioutputLevel = 2

[SPACETIME-REFINEMENT]
ispacelevelcoupledtotimelevel = 1

[TIME-MULTIGRID]
nmaxIterations     = 100
depsRel            = 1E-2

[TIME-SMOOTHER]
cspaceTimeSmoother = 9
domega = 1.0
nsmPre = 0
nsmPost = 1
ioutputLevel = 1

[TIME-SMOOTHERPRECOND]
ioutputLevel = 1
nmaxIterations = 1
domega = 1.0

[TIME-SINGLEGRIDSOLVER]
ctypeSolver = 9
nmaxIterations = 100
depsRel = 1E-5
depsAbs = 1E-15
depsdiff = 1E-10
domega = 1.0
drelax = 0.0
ioutputlevel = 2

[TIME-SINGLEGRIDPRECOND]
domega = 1.0
drelax = 1.0
nmaxIterations = 1
ioutputlevel = 1

[CC-LINEARSOLVER]
ismootherType = 0
icoarseGridSolverType = 6
#nmaxiterations = 0

[CC-MULTIGRIDSOLVER]
depsRel            = 1E-10
#nminiterations=5
ioutputlevel=0

[CC-COARSEGRIDSOLVER]
ioutputLevel       = 0
depsAbs            = 1E-15
istoppingCriterion = 1
ioutputlevel = 0
