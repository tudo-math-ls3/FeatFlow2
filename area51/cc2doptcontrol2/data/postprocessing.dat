# ========================================================================
# Configures various postprocessing settings
# ------------------------------------------------------------------------

#####################
[POSTPROC_FORWARDSIM]
#####################

# Standard postprocessing during a forward simulation.

# Type of output file to generate from solutions.
# 0=disabled
# 1=GMV
# 2=AVS
# 3=Paraview (VTK)

ioutputUCD = 3

# Filename for UCD output.
# In a nonstationary simulation, a number '.0001','.0002',... is appended
# to this.

sfilenameUCD = './gmv/u.vtk'


####################
[TIME-PREPROCESSING]
####################

# How to generate the start vector of the iteration.
# =0: All timesteps are initialised with zero 
#     (except the 1st one, which is taken as the initial solution).
# =1: The start vector is created by propagating the initial solution
#     to all timesteps (stationary sequence).
# =2: The start vector is created by evaluating the section sstartVector.
# =3: The start vector is created by a forward simulation starting from
#     the initial condition. The dual solution is initialised to zero.

ctypeStartVector = 3

# Name of the section that defines the initial iterate if ctypeStartVector=2.

sstartVector = INITIALITERATE

# Name of the section configuring the forward solver if ctypeStartVector=2.

sstartVectorSolver = CC-NONLINEAR

# Name of the section defining the boundary conditions of the start vector
# if ctypeStartVector=2.

sstartVectorBoundaryConditions = BDCONDITIONS

# Section with postprocessing settings during a forward 
# simulation if ctypeStartVector=2.

sstartVectorPostprocessing = POSTPROC_FORWARDSIM


#####################
[TIME-POSTPROCESSING]
#####################

# Type of output file to generate from solutions.
# 0=disabled
# 1=GMV
# 2=AVS
# 3=Paraview (VTK)

ioutputUCD = 3

# Filename prefix for visualisation output.
# ='': Disable visualisation output

sfilenameUCD = ''

# Filename prefix for output of the solution vector. If this is '',
# the solution vector is not written out.

sfinalSolutionFileName = ''

# Whether or not calculate drag/lift forces

icalcForces = 1

# Whether to calculate functional values (J(.)) during and after the computation.

icalcFunctionalValues = 1

# Whether or not calculate the error of the solution.
# =0: No error analysis.
# =1: Calculate the error to a given analytical expression 
#     specified by the section in ssectionReferenceFunction below.

icalcError = 0

# Name of a section containing the definition of the reference function
# to use if icalcError <> 0

ssectionReferenceFunction = REFERENCE-FUNCTION

# Write final solution vector to a file. After a stationary simulation,
# the stationary solution is written out. After a nonstationary simulation,
# the solution after the last timestep is written out.
# 0=don't write
# |.|=1: write start vector to sSolutionWrite vector on level NLMAX,
# |.|=2: write start vector to sSolutionWrite on level NLMAX-1.
# etc...
# <0: sSolutionWrite is unformatted file 
#     (smaller, but processor dependent and not human readable)

iSolutionWrite     = 0

# Name of file for writing the final solution

sSolutionWrite     = 'ns/DX4'

