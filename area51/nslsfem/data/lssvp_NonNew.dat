#-----------------------------------------------------
# This is the data file for the LSFEM to solve 2D
# Non-Newtonian fluid governed by Navier-Stokes Eqs.
# This initializes the SVP formulation.
# This provides the general parameters involved in
# the whole solution process and the 
# pre/post processing steps.
# Each set of variables is categorized in a section 
# which is declared with capital letters between [].
#----------------------------------------------------
# General Flow and Problem Properties
#-----------------------------------------------------
[GFPROPER]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Select the problem to solve :)
#  Of course this is crazy, but 
#  since I'm in the research state
#  this does realy help.
#   = 0  Reg. Cavity Flow
#   = 1  FAC, zero stress outflow 
#   = 9  Fully developed power law flow
#   = 10 Sudden expansion
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Problem = 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Kinematic viscosity \nu(z) model
#  z = Dii(u) = 1/2 ( 2D(u):2D(u) )
#  D(u) = 1/2 ( grad(u) + grad(u)^T )
#   = 1 Power Law (PL)
#   = 2 Carreau Law (CL)
#   = 3 ...
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
viscosity_model = 1

# Constants in viscosity models
# Power Law = PL
PL_nu0 = 1E-3
PL_r = 2.5

# Carreau Law = CL
CL_nu0 = 1
CL_nuinf = 1
CL_r = 0.5
CL_landa = 1


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Scaling factors or whighting parameters
#  the least-squares functionals can be scaled
#  with a physical parameter, here viscosity, to
#  obtain more balanced terms.
#   ~ 1/noo * ||R||^2_{L^2}
#    scPhysic = 1 lets this happens :)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scPhysic = 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Scaling the continuity eq.
#   We scale the functional related to the continuity as:
#        \alpha * || \nabla \cdot \bu ||^2
#   default value = 1.0   no scaling
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
alpha = 1.0

#-----------------------------------------------------
# Mesh Parameters and Finite Element Types
#-----------------------------------------------------
[MESH]

# Mesh file name and path:
sFilenamePathMesh = './pre/channelflow_2d_346elem_FerzigerPeric2002'

# Final mesh level to solve the problem:
NLMAX = 3

# Coarse mesh level, used in multigrid:
NLMIN = 3

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Change Quadrilaterals to triangles
#  0 =  No please don't touch it x-(
#  1 =  Yes, we need to check new ideas :)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detTri = 0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Type of finite elements:
#  EL_Q1, EL_Q2
#  EL_EM30, EL_EB50
#  EL_EN51_2D, Q3~
#  EL_P1, EL_P2
#  EL_RT0_2D, EL_DCTP0_2D, EL_QP1
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Type of Stress finite element:
Selm = EL_Q2
Stild = 0

# Type of Velocity finite element:
Velm = EL_Q2
Vtild = 0

# Type of Pressure finite element:
Pelm = EL_Q2
Ptild = 0

# Perturbed grid percentage
#  =0.0 by default (No purturbation)
dPert = 0.0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Type of 2D cubature rule for numerical integration
#   G3_2D            3-by-3 Gauss quadrature rule
#   G2_2D            2-by-2 Gauss quadrature rule
#   PG2X2            2-by-2 Piecewise Gauss quadrature rule
#   Standard(exact): G3_2D    G3_T   G3MP_T
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ccubType = G3_2D

# Print mesh statistics or not
detPMesh = 1

# Print discretization statistics or not
detPDisc = 1


#-----------------------------------------------------
# Non-linear Loop Control Parameters
#-----------------------------------------------------
[NLLOOP]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Type of linearization
#   =1 Fixed-point (successive substitution)
#   =2 Newton's
#   =3 Mixed
#     (start with fixed-point and after 'FPIter',
#      continue with Newton's method)
# ~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~
LinTyp = 2

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Number of Fixed-point irerations
#  before Newton's method is active.
#  This is applicable ONLY if Mixed linearization
#  i.e. 'LinTyp=3' is set.
#    FPIter must be .le. NLN_MAX otherwise, it'll
#    be replaced with NLN_MAX.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FPIter = 10

# Nonlinear loop Max number of iterations
NLN_MAX = 50

# Nonlinear loop stopping criteria
#  Serves as a measure of relative residual
dNLEpsi = 1E-7

# The damping parameter in nonlinear
#  deferred correction loop
omega = 1.0


#-----------------------------------------------------
# RHS Treatment
#-----------------------------------------------------
[RHS]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine which RHS function (force) do we have
#   = 0    Standard NS without body force
#   = 1    NS with analytic polynomial function 
#           u(x,y) = 2*x^2 * (1-x)^2 * (y*(1-y)^2 - y^2*(1-y))
#           v(x,y) = 2*y^2 * (1-y)^2 * (x*(1-x)^2 - x^2*(1-x))
#           p(x,y) = C*(x^3 - y^3)
#           which leads to crazy f_x and f_y.
#        OR
#           The static bubble problem.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detRHS = 0

# The constant in the analytic pressure filed
#   OR
# the coefficient of surface tension, sigma
#  Applicable ONLY if detRHS = 1
dC = 1


#-----------------------------------------------------
# Initial Solution
#-----------------------------------------------------
[ISOLUTION]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine how to initialize the non-linear solver
#  nlinit = 0 ----> Initialize the solution with
#                   constant values for u,v,p,w
#  nlinit = 1 ----> Read the data from file and
#                   initialize the solution
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
nlinit = 0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Constant values for the initial solution
#  ONLY applicable if nlinit=0
#  initValues = u_init v_init p_init s123_init
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
initValues = 0.0e0 0.0e0 0.0e0 0.0e0 0.0e0 0.0e0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The file name and path to read the data
#  ONLY applicable if nlinit = 1
#         .AND.
#  detWriteResult=1 (in section [POST]) must 
#  have been set in the previous solution. 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sFilenamePathResult = './files/ali.dat'

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The data file solution level
#  ONLY applicable if nlinit = 1
#         .AND.
#  detWriteResult=1 (in section [POST]) must 
#  have been set in the previous solution. 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iinitialSolutionLevel = 2


#-----------------------------------------------------
# Jump Stabilization (Velocity, Stress)
#-----------------------------------------------------
[JUMP]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  First, we go to the velocities
#   detVJump =1 on, =0 off
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detVJump = 0

# Relaxation parameter for Jump stabilisation.
# Standard value: 0.01
dJumpV = 1E4

# 2nd Relaxation parameter in the jump stabilisation. Standard = 0.0
dJumpStarV = 0.0

# Exponent for edge length weight in the jump stabilisation. Standard = 2
# (corresponds to a weight dJump*h^2).

deojEdgeExpV = 2.0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Second, we go to the stress
# Jump of the function itself.
#  detSJump =1 on, =0 off
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detSJump = 0

# Relaxation parameter for Jump stabilisation.
# Standard value: 0.1
dJumpS = 5.0

dJumpS_matrix = 0.5
dJumpS_defect = 0.5

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Third, we go to the pressure
#  detPJump =1 on, =0 off
#  setup NO viscosity parameter!!
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detPJump = 0

# Relaxation parameter for Jump stabilisation.
# Standard value: 0.01
dJumpP = 1

# 2nd Relaxation parameter in the jump stabilisation. Standard = 0.
dJumpStarP = 0.0

# Exponent for edge length weight in the jump stabilisation. Standard = 2
# (corresponds to a weight dJump*h^2).

deojEdgeExpP = 2.0


#-----------------------------------------------------
# Linear Solver Properties
#-----------------------------------------------------
[LINSOL]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Our linear solver is either a
#  stand-alone multigrid solver, or, a
#  multigrid-preconditioned (CG\BiCGStab) solver
#    =1  Stand-alone Multigrid solver
#    =2  Multigrid-preconditioned (CG\BiCGStab) solver
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LINsolverType = 2

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# If we have a Multigrid-preconditioned solver, then,
#  what is the Krylov subspace linear solver?
#    =1  CG
#    =2  BiCGStab
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LINsolver = 1

# If we have a Multigrid-preconditioned solver, then,
#  what is the Krylov subspace linear solver relative error
depsRelLS = 1e-3

# If we have a Multigrid-preconditioned solver, then,
#  what is the Krylov subspace linear solver Max. number of iterations
#  "=10 for flow around cylinder"
nmaxItsLS = 20

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# If we have a Multigrid-preconditioned solver, then,
#  what is the Krylov subspace linear solver output level
# = 2:extended output
# = 1:minimal output
# = 0:no output except for warning messages 
# =-1:no output (standard)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ioutputLevelLS = 1


#-----------------------------------------------------
# Multi-Grid Solver Properties
#-----------------------------------------------------
[MULTI]

# Multi-grid cycle: 0= F-Cycle  1= V-Cycle  2= W-Cycle
ctMG = 0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#        Coarse Grid Solver
#  Based on my experience, it could be
#  either UMFPACK or the same as the smoother
#    =1  UMFPACK
#    =2  Smoother as coarse grid solver
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CGsolverMG = 1

# Number of iteration of the coarse grid solver,
#  if it is the same as our smoother
NItCGsolverMG = 10

# Rlative coarse grid error,
#  if it is the same as our smoother
depsRelCGsolverMG = 1e-5

# Coarse grid solver output level,
#  if it is the same as our smoother
# = 2:extended output
# = 1:minimal output
# = 0:no output except for warning messages 
# =-1:no output (standard)
ioutputLevelCG = -1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#            Smoother
# Type of multigrid smoother
#  This applies to both, pre and post smoothing steps.
#   =1 CG
#   =2 BiCGStab
#   =3 SSOR
#   =4 Jacobi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
smoothMG = 1

# Damping pramater for the smoother
# ONLY applicable if smoothMG >= 3 
#  default = 1.0
DampSmoothMG = 1.0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Smoother's preconditioner
#  This sets a preconditioner for the
#  smoother which is set in 'smoothMG'
#  =0 No preconditioner
#  =1 General Vanka
#  =2 SSOR
#  =3 Jacobi
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PrecSmoothMG = 2

# Damping pramater for the preconditioner
#  in PreSmoothMG.
#  Could be used with Vanka or SSOR
#  default = 1.0
DampPrecSmoothMG = 1.0

# Number of smoothing steps
# 4 flow around cylinder
nsmMG = 4

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#      MG Control Parameters
# Relative multigrid error
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
depsRelMG = 1e-3

# Absolute multigrid error
depsAbsMG = 1E-5

# Max. number of iterations
nmaxItsMG = 2

# Min. number of iterations
nminItsMG = 1

# Type of stopping criterion.
# =0: Relative AND absolute stopping criterion must hold.
# =1: Relative OR absolute stopping criterion must hold.
istoppingCriterionMG = 0

# Multigrid output level
# = 2:extended output
# = 1:minimal output
# = 0:no output except for warning messages 
# =-1:no output (standard)
ioutputLevelMG = -1


#-------------------------------------------------------
# Interlevel projection to obtain deferred velocities
# on all levels during a multigrid solver.
# Velocity Projection is "hard-coded projection"
#-------------------------------------------------------
[PROLREST]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Order of the prolongation/restriction to use for velocity components.
#  -1=default   0=constant
#   1=linear    2=quadratic
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iinterpolationOrderVel   = -1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Prolongation/restriction variant for nonconforming elements 
# E030/EM30/E031/EM31 for the velocity.
# = 0: Use default prol/rest,
# = 1: Use standard prol/rest, equally weighted (1/2 from left, 1/2 from right),
# = 2: Use extended prol/rest, equally weighted (1/2 from left, 1/2 from right),
# = 3: Use extended prol/rest, weighted by element size (L2 projection),
# = 4: Use extended prol/rest, weighted by element size of neighbour element
# To activate extended prol/rest, set this to >= 2 after initialising the
# interlevel projection structure!
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iinterpolationVariantVel = 0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Configuration parameter for extended prolongation of E030/EM30/E031/EM31
# element for the velocity. Only valid if iinterpolationVariant >= 2.
# Aspect-ratio indicator; controls switching to constant prolongation.
# <=1: switch depending on aspect ratio of current element (standard),
#  =2: switch depending on aspect ratio of current element and
#      neighbour element
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
iintARIndicatorEX3YVel   = 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Configuration parameter for extended prolongation of E030/EM30/E031/EM31
# element for the velocity. Only valid if iprolEX3Yvariant >= 2.
# Upper bound aspect ratio; for all elements with higher AR
# the prolongation is switched to constant prol/rest.
# standard = 20.0
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dintARboundEX3YVel       = 20.0


#-------------------------------------------------------
# Zero Mean Value constraint on the Pressure
#-------------------------------------------------------
[ZMV]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Whether to apply this constraint or not
#  =0  not active
#  =1  active (Lumped Mass technique)
#      ONLY practical if a direct solver is invoked!
#  =2  active (L^2_0 shifting technique)
#      ONLY applicable to special elements
#       like QP1, P1, P0... :(
#  =3  active (One pressure DOF = 0)
#  =4  active (Combined technique) |NOT YET AVAILABLE|
#      this applies detZMV=1 
#      on coarse grid (UMFPACK) and
#      detZMV =2 on other levels  
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detZMV = 3

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Which row of the pressure matrix do you want to 
#  implement these changes
#  ONLY required for detZMV =1,3,4
#  FAC =33 outflow, =1 leading face of cylinder
#  =42 inflow, =102 symmetric line
#  StepFlow =131 outflow
#  Cavity, middle of lower edge = 5
#  Poiesuelle flow, outflow =6
#  Bolton step flow, outflow = 30
#  Split channel, outflow = 7
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
irow = 31


#-----------------------------------------------------
# Postprocessing the Results
#-----------------------------------------------------
[POST]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine the export type, VTK or GMV
#   =0 VTK  used in paraview
#   =1 GMV  used in GMV
#   =2 Binary GMV
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ExporType = 0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Determine to write the final solution on level NLMAX
#  to a file.
#   =0 don't write  :(
#   =1 please write :)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detWriteResult = 1

# The file name and path to write the solution
#  ONLY applicable if detWriteResult = 1
sFilenamePathResult = './files/ali.dat'

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the benchmark parameters in
#  Flow Around Cylinder Flow
#   =0  don't calculate
#   =1  yes, calculate
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
LiftDragASO = 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the Kinetic Energy
#  useful in Lid-Driven Cavity Flow
#  E = 1/2 \int{u^2}
#   =0  don't calculate
#   =1  yes calculate
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
KEnergy = 0

# How to calculate the Kinetic energy
#   =0  use the FEM definition and the Matrix-vector
#		E = 1/2 [u]^T[M][u]
#   =1  simply take the L^2 norm of velocity vector
#       E = 1/2||u||^2_{L^2}
detKEnergy = 1

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate the velocity divergence L^2-error
#  Div = \int{ (u_x + v_y)^2 dX}
#  And, the maximum norm of the divergence
#   =0  don't calculate
#   =1  yes calculate
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Div = 0

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate Global Mass Conservation (GMC)
#  This applies to the channel flows ONLY. The GMC
#  is the normalised difference between the input
#  and output velocity fluxes (mass flow rate) as defined:
#
#		  \int_{\Gamma_i}{n.v} - \int_{\Gamma_o}{n.v}
#  GMC =  ------------------------------------------- * 100
#				     \int_{\Gamma_i}{n.v}
#
#   =0 don't calculate
#   =1 pls calculate :)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
detGMC = 0

## Input line coordinates
#  the line defined by the two endpoints:
#       (xi,yi)_1 ---> (xi,yi)_2
#       xi_1 yi_1 xi_2 yi_2
#       0.0 0.0 0.0 0.41 
#       0.0 0.0 0.0 1.0
#       -2.0 0.0 -2.0 1.0
inputGMC = 0.0 0.0 0.0 0.41

# Output line coordinates
#  the line defined by the two endpoints:
#       (xo,yo)_1 ---> (xo,yo)_2
#       xo_1 yo_1 xo_2 yo_2
#       2.2 0.0 2.2 0.41
#       0.5 0.0 0.5 1.0
#       0.0 0.0 0.0 1.0
outputGMC = 0.05 0.0 0.05 0.41

# The number of elements (#elem) associated with the line
#  =0 Calculate the #elem automatically
#  =1,2,3 ... --->  #elem = 2^(1,2,3...)
nlevels = 12

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calculate L^2 and H^1 norms for the analytical
#  solution.
#  =0 Don't do it
#  =1 Please calculate
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
L2U = 0
H1U = 0

L2P = 0
H1P = 0

L2S = 0
StbblError = 0
