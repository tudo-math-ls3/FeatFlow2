

                           FEAT2 for Windows Readme

-------------------------------------------------------------------------------

Index
-----
I.   Prologue

II.  The combined BLAS/LAPACK library
     II.i.   Conventions
     II.ii.  The reference BLAS/LAPACK library
     II.iii. The GotoBLAS library
     II.iv.  The AMD Core Math Library (ACML)
     II.v.   The Intel Math Kernel Library (IMKL)

III. Compiling Win32 binaries

IV.  Compiling Win64 binaries

V.   Downgrading Solution/Project files

VI.  Troubleshooting

-------------------------------------------------------------------------------
I.   Prologue
-------------------------------------------------------------------------------
- todo -


-------------------------------------------------------------------------------
II.  The combined BLAS/LAPACK library
-------------------------------------------------------------------------------
Remark:
This section (currently) only applies to the Win64 version of FEAT2. If you
are compiling the Win32 version, you can skip this section (for now).


FEAT2 uses a combined BLAS/LAPACK library for most of its low-level linear
algebra operations. The combined BLAS/LAPACK library is simply a merge of the
single and double precision real routines from the reference BLAS and LAPACK
libraries.

The reason why BLAS and LAPACK have been merged into one library is to provide
compatibility for highly optimised, platform-dependent implementations which
(usually) provide both BLAS and LAPACK implementations.

Currently compatibility has only been tested with the reference netlib and the
GotoBLAS implementations, but basically any BLAS/LAPACK implementation which
satisfies the conventions in section II.i *should* work with FEAT2.

If you don't have an optimised implementation, check section II.ii for more
informations on how to compile the reference BLAS/LAPACK library.

If you want to use the GotoBLAS implementation (recommended), then check
section II.iii for more information.


II.i.   Conventions
-------------------
Any combined BLAS/LAPACK library that is to be used with FEAT2 is assumed to
fulfill the following conventions:

-> Naming Convention
BLAS/LAPACK routine and function names are assumed to be in lowercase decorated
with an underscore prefix. (Remark: The decorating underscore prefix is 
automatically set up by the compiler if the reference C calling convention is
selected.)

-> Calling Convention
The calling convention is reference C, i.e.:
1. Parameters are pushed onto the stack in reverse order (right to left), i.e.
   the first (left) parameter is on top of the stack.
2. The caller is responsible for cleaning up the stack.

-> Scalar Parameters
Scalar parameters are supposed to be passed as pointers (fortran-style).

-> Matrix order
Matrices are supposed to be stored in column major order (fortran-style).

-> integer type
An integer is assumed to be a 32-bit signed integer.


II.ii.  The reference BLAS/LAPACK library
-----------------------------------------
If you don't have an optimised BLAS/LAPACK library for your system (or if you
don't want to use it for whatever reason), then you have the possibility to
compile a combined BLAS/LAPACK based on the reference netlib libraries.
To do so, all you need to do is to open the "winblaslapack" project file in
the "libraries\winblaslapack" directory and compile it in "Release" or
"Release_IPO" mode.

The "Release_IPO" mode produces a much greater library (approx. 120 MB) and
takes longer to compile than the "Release" mode (approx. 5 MB), but the
resulting library *should* be faster due to excessive inlining, so if you
really need to use the reference BLAS/LAPACK implementation, it might be a good
idea to use the "Release_IPO" mode.


II.iii. The GotoBLAS library
----------------------------
To use the GotoBLAS library, you will first need one ;)
Check the readme in the "libraries\winlibgoto" directory for closer information
about pre-compiled GotoBLAS libraries shipped with FEAT2 or on how to compile
your own.

Once you have one, rename the corresponding lib-file to "winblasext.lib" or
"winblasext_x64.lib" (depending on whether you have a 32 bit or 64 bit version)
and place it directly into the "libraries" directory. Don't forget to copy the
corresponding DLL into a directory which is in you PATH environment, e.g.
"C:\Windows" or whereever you have Windows installed.


II.iv.  The AMD Core Math Library (ACML)
----------------------------------------
(currently not supported)


II.v.   The Intel Math Kernel Library (IMKL)
--------------------------------------------
(currently not supported)


-------------------------------------------------------------------------------
III. Compiling Win32 binaries
-------------------------------------------------------------------------------
To compile FEAT2 and its applications to 32-Bit binaries under Windows you
will need the following:

1. Microsoft Visual Studio .NET 2003 or newer
2. Intel Visual Fortran 9.1 or newer

- todo -


-------------------------------------------------------------------------------
IV.  Compiling Win64 binaries
-------------------------------------------------------------------------------
To compile FEAT2 and its applications to 64-Bit binaries under Windows you
will need the following:

1. Microsoft Visual Studio .NET 2008 or newer
2. Intel Visual Fortran 10.1 or newer

Please note that you will of course need 64-bit versions of the compilers.

Before you can compile the FEAT2 kernel or one of the example applications, you
will first need to compile the libraries.

First you will the combined BLAS/LAPACK library. Take a look at section II in
this file for more information on how to compile it or what alternatives are
accepted.

Once you have a corresponding "winblaslapack_x64.lib", you will need to compile
the other libraries that the FEAT2 kernel uses. To do this, open the 
'winlibraries_x64.sln' project file in the "libraries\winlibraries" directory,
and compile the complete solution in "Release" mode.

Now you should have 3 new files in your "libraries" directory:
1. winblaslapack_x64.lib
2. winlibamd_x64.lib
3. winlibumfpack4_x64.lib

Once these files exist, you can open a project file of an application (e.g.
"poisson_x64.sln" in the "applications/poisson/winpoisson" directory) and
compile it - that's it.


-------------------------------------------------------------------------------
V.   Downgrading Solution/Project files
-------------------------------------------------------------------------------
WARNING:
There is no guarantee that the methods described in this section work!
Try at your own risk and try only if you know what you are doing!


This section contains some informations about what needs to be done if you want
to downgrade the Visual Studio / Visual Fortran project files to an older
version.

The default project files for Win32 are designed to work with Microsoft Visual
Studio .NET 2003 and Intel Visual Fortran 9.1.

The default project files for Win64 are designed to work with Microsoft Visual
Studio .NET 2008 and Intel Visual Fortran 10.1.

Remark:
For the Win64 projects you will need at least Visual Studio .NET 2005, as the
previous versions do not have x64 compilers!


Downgrading Intel Visual Fortran Project Files
----------------------------------------------
Please note that the oldest supported version of Intel Visual Fortran is 9.1.
If you want to downgrade a version 10.0 or 10.1 file to version 9.1, there
shouldn't be anything to do, as the project files are mainly backward
compatible - you will just need to additionally specify the "/c" command
line parameter (see Troubleshooting).


Downgrading Microsoft Visual Studio Solution Files
--------------------------------------------------
If you want to downgrade a solution file (extension: .sln), then you will need
to open the solution file in a text editor (notepad will do the job).

At the very beginning of the solution file you will see the following line:

Microsoft Visual Studio Solution File, Format Version ***

where *** is the version of the solution file. Here's a list of the versions:

*** =  7.00 => Microsoft Visual Studio .NET (2002)
*** =  8.00 => Microsoft Visual Studio .NET 2003
*** =  9.00 => Microsoft Visual Studio .NET 2005
*** = 10.00 => Microsoft Visual Studio .NET 2008

Replace the *** with the corresponding version number of your Visual Studio
and save the file.


Downgrading Microsoft Visual C++ Project Files
----------------------------------------------
If you want to downgrade a C++ project file (extension: .vcproj), e.g. 
'winlibumfpack.vcproj', open the project file in a text editor.

In one of the first lines, you will see the following:

    Version="***"

where *** is the version of the project file. Here's a list of the versions:

*** =  7.00 => Microsoft Visual C++ .NET (2002)
*** =  7.10 => Microsoft Visual C++ .NET 2003
*** =  8.00 => Microsoft Visual C++ .NET 2005
*** =  9.00 => Microsoft Visual C++ .NET 2008

Replace the *** with the corresponding version number of your Visual C++
compiler and save the file.


-------------------------------------------------------------------------------
VI.  Troubleshooting
-------------------------------------------------------------------------------
This section provides help with some problems which appear frequently on an FAQ
basis.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Problem:
--------
When I try to run an application under Visual Studio, I get an "Error while 
opening file" error printed onto the screen.


Solution:
---------
This problem may have several reasons and therefore several solutions. Except
for the obvious reasons that a file does not exist (when trying to read it) or
is read-only (when trying to write it), it might also happen that the working 
directory is set wrong.

To check whether the working directory is set up correctly, perform the
following steps:

1. Right-click the project of the application (e.g. 'winpoisson') in the
   solution explorer in Visual Studio.

2. In the menu, click on 'Properties' (at the bottom of the menu).
   A dialog window will pop up.

3. In the dialog, select 'Debugging' under 'Configuration Properties'.

4. In the list there is an entry named 'Working Directory'.
   Make sure that 'Working Directory' is set to '$(ProjectDir)\..\'.

5. Click on 'OK' and re-start the application.


If the working directory was already set correctly, then you should check the
more obvious reasons:

When trying to read a file:
Does the file exist?

When trying to write a file:
Does the file already exist, and if yes, is it maybe opened by another
application or is it read-only?
Does the directory, where the file should be created, exist?


Details:
--------
The problem with the working directory arises from a somewhat stupid habit of
Intel Visual Fortran: Most of the properties of a project are stored directly
in the project file (e.g. 'winpoisson.vfproj') - except for the properties
which belong to the 'Debugging' section, these are stored in an external file
(e.g. 'winpoisson.vfproj.USERNAME.user', where USERNAME is your Windows logon
name). So if a developer updates a project file, Intel Visual Fortran removes
the working directory entry from the project file and saves it in the .user
file of the developer - which is not uploaded - and therefore the working
directory entry simply gets lost...


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Problem:
--------
When I try to compile an application under Visual Studio, I get dozens of
"error LNK2019: unresolved external symbol '***' referenced in function '***'"
errors.


Solution:
---------
There are mainly two reasons why this may happen:
1. The project file has the wrong version.
2. The project file is out-of-date.


Point 1 may only apply if two conditions are fulfilled:
a. You are using Intel Visual Fortran 9.1 (not 10.0 or newer!).
b. At least one of the error messages says:
   "error LNK2019: unresolved external symbol '_MAIN__' referenced in function
    '_main'"

In this case perform the following steps:
1. Right-click the project of the application (e.g. 'winpoisson') in the
   solution explorer in Visual Studio.

2. In the menu, click on 'Properties' (at the bottom of the menu).
   A dialog window will pop up.

3. In the dialog, select 'Fortran' under 'Configuration Properties'.

4. Select 'Command Line' under 'Fortran'

5. Under 'Additional Options', enter "/c" (without the quotation marks)
   Please make sure that you enter a lowercase "/c" and not an UPPERCASE "/C",
   as "/c" and "/C" have different meanings!

6. Click on 'OK' 

7. Eventually repeat steps 1 - 6 for the 'winlibkernel' project.

8. Re-compile the application.


If this did not work, then it is likely that point 2 applies, i.e. the project
file is out-of-date. This happens if a new module was added but it is not added
into the project file. Contact a FEAT2 developer in this case (or try to find
out which module is missing in your project files on your own).


Details:
--------
Some of the FEAT2 developers use Intel Visual Fortran 10.0 or newer, and
sometimes a developer accidentially uploads a version 10.0 (or newer) project
file. The project files of version 10.0 (and 10.1) are mainly backward
compatible to the version 9.1 project files with a few exceptions. Usually,
Intel Visual Fortran 9.1 will load a version 10 project file without
complaining, however, there are some differences between version 9.1 and 10.0.
The "/c" parameter specifies that each source file is to be compiled, but is
not to be linked. Now Intel Visual Fortran 10.0 (and newer) implicitly sets the
"/c" parameter, so it does not need to be specified explicitly - in contrast to
Intel Visual Fortran 9.1, which tries to compile an executable from each source
file if the "/c" parameter is not set, in which it miserably fails and spits
out dozens of LNK2019 errors.

-------------------------------------------------------------------------------
*End-Of-File*
