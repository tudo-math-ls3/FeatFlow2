# -------------------------------------------------------------------
# This optional master file is the entry point for all data
# which is processed by the software. The simportdatafiles(.) parameter
# below defines a list of 'child' data files which are read during
# the initialisation. All parameters and sections following
# this parameter overwrite data from the DAT files; this allows
# to centrally define crucial parameters in numeric tests while
# the data files specify the general setting.
#
# If simportdatafiles(.) is not present as first parameter in this
# file, all parameters of the software must be defined here. This
# allows to collect all parameters in one file.
#
# If this file is missing, the software will search for parameters in
# a standard set of data files.
# -------------------------------------------------------------------

# In the following we define some basic directories that can be used
# in all sub-data-files as path specifications for input/output
# files. This allows to run the application in a benchmark
# environment with different settings

# Directory of the application
sappdirectory = .

# Directory with data files
sdatadirectory = %{sappdirectory}/data

# Directory for log files
slogdirectory = %{sappdirectory}/log

# Directory for visualisation files
spostdirectory = %{sappdirectory}/gmv

# Directory containing/receiving plain solution files
ssolutiondirectory = %{sappdirectory}/ns

# Directory for preprocessing files
spredirectory = %{sappdirectory}/pre

# The following defines a list of data files to read. The files may optionally
# contain a path specification. If no path os specified, the files
# are searched for in the same subdirectory as the master.dat.
# By default, we specify the sdatadirectory variable here as path specifier.

simportdatafiles(8) = 
  "%{sdatadirectory}/discretisation.dat"
  "%{sdatadirectory}/linsol_cc2d.dat"
  "%{sdatadirectory}/nonlinsol_cc2d.dat"
  "%{sdatadirectory}/output.dat"
  "%{sdatadirectory}/paramtriang.dat"
  "%{sdatadirectory}/bdconditions.dat"
  "%{sdatadirectory}/timediscr.dat"
  "%{sdatadirectory}/postprocessing.dat"
  
# The following paragraph allows to define some global expressions
# which can be used as subexpressions in function parser definitions.
# For bein used, an "@" must be added to the variable name. So, e.g.,
# an expression "One" can be accessed via "@One".

globalExpressions(3) =
  'Zero'  '0.0'
  'One'   '1.0'
  'Two'   '2 * @One'

# From this point on, it's possible to additionally define 'alternative'
# parameter settings that overwrite settings in the DAT files. The
# parameters here must be introduced by the corresponding section
# to be overwritten. You can for example define:
#
# [CC-DISCRETISATION]
# NLMIN = 1
# NLMAX = 3
# RE = 1000
#
# which will overwrite the three parameters NLMIN, NLMAX and RE
# from the original set of DAT files read in simportdatafiles.

[CC-DISCRETISATION]
NLMIN = 1
NLMAX = 2
RE = 1000
ielementType = 4
iequation    = 0
dupsam = 0.0

ctypeInitialSolution = 2
iinitialSolutionlevel = 2
sinitialSolutionFilename = "bench1_lv2_q2_prjcorr_re1000_nonst.dat"

[TIME-DISCRETISATION]
itimedependence = 1
dtimeMax = 10.0
dtimeStep = 0.0175
niterations = 1

[BDEXPRESSIONS]
bdExpressions(6) =
  'AnalyticBC'    -2    ''
  'Umax'           0    0.3
  'Dirichlet0'     0    0.0
  'Dirichlet1'     0    1.0
  'ParProfile'     2    1.5 # 'Umax * 4.0*r*(1-r)'
  'ParProfExpr'   -1    '4.0*1.5*L*(1.0-L)'

[CC-POSTPROCESSING]
ioutputUCD = 3
sfilenameUCD = '%{spostdirectory}/u.vtk'

[CC-LINEARSOLVER]
ismootherType = 101
icoarseGridSolverType = 0

[CC2D-NONLINEAR]
nminIterations     = 1
nmaxIterations     = 1

[CC-MULTIGRIDSOLVER]
nminIterations     = 1
nmaxIterations     = 1

[CC-SMOOTHER]
nsmoothingSteps    = 1
domega             = 1.0

[CC-COARSEGRIDSOLVER]

[CC-COARSEGRID-PRECONDITIONER]
domega             = 1.0
