# ------------------------------------------------------------------------
# Postprocessing
#
# The parameters in this file specify the postprocessing of the solutions
# that come from the stationary or nonstationary solver.
# ------------------------------------------------------------------------

###################
[CC-POSTPROCESSING]
###################

# ------------------------------------------------------------------------
# UCD output (GMV, AVS, Paraview...)

# Type of output file to generate from solutions.
# 0=disabled
# 1=GMV
# 2=AVS
# 3=Paraview (VTK)
# 4=Matlab

ioutputUCD = 1

# Level where to write UCD output. Standard=0 = maximum level.
# =1,2,3,...  : Write on level ilevelUCD.
# =0,-1,-2,...: Write on level NLMAX - |ilevelUCD|
# Standard is =0 which writes the solution at the maximum level.
# For a value <> 0, the solution is projected down to the desired
# level and written out there (saves disc space).

ilevelUCD = 0

# Filename for UCD output.
# In a nonstationary simulation, a number '.0001','.0002',... is appended
# to this.
sfilenameUCD = 'gmv/u.gmv'

# ------------------------------------------------------------------------
# Nonstationary UCD output parameters

# Start time for UCD output.

dminTimeUCD = -1.0E100

# End time for UCD output.

dmaxTimeUCD = 1.0E100

# Time difference for UCD output.
# =0.0: generate UCD output for every timestep in the range 
#       dminTimeUCD..dmaxTimeUCD

dtimeDifferenceUCD = 0.0

# Start number for file suffix when writing UCD files (1='.0001',...).
# Whether this is used or not depends on the type of output
# (e.g. GMV uses this)

istartSuffixUCD = 0

# ------------------------------------------------------------------------
# Film output.
# In a nonstationary simulation, this writes the raw solution vectors 
# to a sequence of files. For stationary simulations, this has no effect.

# Type of output file to generate from solutions.
# 0=disabled (standard)
# 1=formatted film output
# 2=unformatted film output

ioutputFilm = 1

# Level where to write Film output. Standard = 0 = maximum level.
# =1,2,3,...  : Write on level ilevelFilm.
# =0,-1,-2,...: Write on level NLMAX - |ilevelFilm|
# Standard is =0 which writes the solution at the maximum level.
# For a value <> 0, the solution is projected down to the desired
# level and written out there (saves disc space).

ilevelFilm = 0

# Basic filename for Film output. A number '.0001','.0002',... is appended
# to this.
sfilenameFilm = 'ns/solution'

# Start time for Film output.

dminTimeFilm = -1.0E100

# End time for Film output.

dmaxTimeFilm = 1.0E100

# Time difference for Film output.
# =0.0: generate Film output for every timestep in the range 
#       dminTimeFilm..dmaxTimeFilm

dtimeDifferenceFilm = 0.0

# Start number for file suffix when writing Film files (1='.0001',...).

istartSuffixFilm = 0

# ------------------------------------------------------------------------
# Error analysis

# Calculate L2-error to reference solution.
# =0: Don't calculate
# =1: Calculate the error

ierrorAnalysisL2 = 1

# Calculate H1-error to reference solution.
# =0: Don't calculate
# =1: Calculate the error

ierrorAnalysisH1 = 0

# Calculate the kinetic energy.
# =0: Don't calculate
# =1: Calculate the energy

icalcKineticEnergy = 1

# ------------------------------------------------------------------------
# Body forces

# Calculate the body forces
# =0: Don't calculate
# =1: Calculate with standard FEAT-1 method
# =2: Calculate with extended method, supporting mixed meshes and general elements (standard)

icalcBodyForces = 2

# Specifies the tensor structure to use for the computation.
# =-1: automatic
# = 0: simple gradient tensor, constant nu
# = 1: full gradient tensor, constant nu
# = 2: deformation tensor, constant nu

ibodyForcesFormulation = -1

# Number of the boundary component where to calculate the body forces.
# For flow around cylinder, this is =2 e.g.

ibodyForcesBdComponent = 2

# 1st coefficient in the boundary integral of the drag coefficient.
# If this is commented out, 1/RE is assumed.

# dbdForcesCoeff1 = 0.001

# 2nd coefficient in the boundary integral of the drag coefficient.
# If this is commented out, 0.004 is assumed (corresonds to flow 
# around cylinder with RE=1000)

# dbdForcesCoeff2 = 0.004
