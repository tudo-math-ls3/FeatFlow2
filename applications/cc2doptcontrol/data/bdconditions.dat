###############
[BDEXPRESSIONS]
###############

# At first we define a list of expressions that can be evaluated
# on the boudary. The number in braces "(n)" specifies
# how many expressions are defined here. The following n lines define
# n constant values in the form
#   'name' type value
# with
#   'name' : an arbitrary name; case insensitive
#   type   : -2=name of a hardcoded expression realised by callback routines
#               in the code
#            -1=general text expression to be evaluated
#             0=double precision constant, 
#             1=integer constant
#             2=parabolic profile with given maximum value
#   value  : the value associated to the name
#
# The following variables are allowed in an expression:
#    L = local parameter value of an edge, [0..1].
#    R = parameter value on the boundary, 0-1 parametrisation,
#        relative to the segment (i.e. always starts with 0.0 an
#        ends with 1.0)
#    S = parameter value on the boundary, length parametrisation,
#        relative to the segment (i.e. starts with 0.0 and ends
#        with the segment length)
#    x = x-coordinate of the point on the boundary
#    y = y-coordinate of the point on the boundary

bdExpressions(19) =
  'pi'             0    3.14159265358979
  'Umax'           0    0.2
  'Dirichlet0'    -1    '0.0'
  'ParProfile'     2    0.3
  'ParProfileNeg'  2    -1.5
  'ParProfExpr'   -1    '(3.0/2.0)*Y*(0.1-Y)/((0.1/2.0)**2)'
  'pressure1'      0    1.0
  'DirichletSX'   -1    '-sin(3.0*3.14159265358979*X)*sin(3.0*3.14159265358979*Y)'
  'DirichletSY'   -1    '-cos(3.0*3.14159265358979*X)*cos(3.0*3.14159265358979*Y)'
  'DirichletX'    -1    'X'
  'DirichletY'    -1    'Y'
  'DirichletMY'   -1    '-Y'
  'DirichletMX'   -1    '-X'
  'DirichletDMY'  -1    '-Y'
  'DirichletDMX'  -1    '-X'
  'DirichletDTMX' -1    'IF(TIME<10, X*(TIME/50-1/5), _INFTY)'    # 'IF(TIME<10, -(X+1), _INFTY)'  #'X*(TIME/50-1/5)'
  'DirichletDTY'  -1    'IF(TIME<10, (-Y)*(TIME/50-1/5), _INFTY)' # 'IF(TIME<10, Y-1, _INFTY)'     #'(-Y)*(TIME/50-1/5)'
  'DirichletTX'   -1    'X*(-(TIME^2/100)+TIME/5)' #'TIME*X'    #'X*(-(TIME^2/100)+TIME/5)'
  'DirichletTMY'  -1    '-Y*(-(TIME^2/100)+TIME/5)' #'TIME*(-Y)' #'-Y*(-(TIME^2/100)+TIME/5)'
  

##############
[BDCONDITIONS]
##############

# For each boundary component, a bondary component specifier 
# 'bdComponentX' must exist. [n] defined the number of sub-segments
# that follow. A sub-segment either corresponds to an actual boundary
# segment or is a 'free' boundary segment anywhere on the boundary.
# To each sub-segment, a boundary condition is associated.
#
# Definition of boundary segments always start at parameter value 0.0.
# Each specified sub-segment allows either to specify the end parameter
# value of the segment or the number of a segment on the real boundary
# which end parameter should be used. Therefore, two forms are valid:
# a)    0  4.0  3  [bdcid] ...
#   Creates a boundary condition segment starting from the 'current' 
#   parameter value, ending at parameter value '4.0'. '3' specifies 
#   that both, starting and ending point should belong to the segment.
#   '1' is the number X of the boundary condition 'bdExpressionX'
#   defined above.
#   Using a parameter value which is larger than the maximum parameter
#   value will result in a 'wrap around', of the boundary condition
#   segment, letting it start at the beginning of the boundary component
#   again.
# b)    1  4  3  [bdcid] ...
#   Creates a boundary condition segment starting at the 'current' 
#   parameter value, ending at the endpoint of segment 4 on the real
#   boundary - which usually ends at parameter value 4.0. A value
#   of '0' here can be used to specify the rest of the boundary up 
#   to the maximum parameter value.
#   '3' specifies that both, starting and ending point should belong 
#   to the segment.
#   '1' is the number X of the boundary condition 'bdExpressionX'
#   defined above.
# Form a) allows to define 'free' boundary condition segments which
# may cover multiple real boundary segments.
# Form b) creates boundary segments that 'stick' to real boundary
# segments.
# The last values in the list "x y a [bdcid] ..." have the following 
# meaning:
#  a = 0: Start- and endpoint don't belong to the interval
#    = 1: Include startpoint of the interval
#    = 2: Include endpoint of the interval
#    = 3: Include start- and endpoint
#  [bdcid] = 0 : Do-nothing boundary condition for all directions
#          = 1 : Simple Dirichlet boundary condition for all
#                main solution components (e.g. velocity) component.
#                For every component, an expression identifier follows
#                that defines the value on that part of the boundary.
#                An expression identidier '' defines slip conditions
#                in that direction of the boundary.
#                Example: 0  1.0  3  1  ''  'Dirichlet0'
#                - Define parameter interval [current parameter,1.0].
#                - Include both endpoints
#                - Dirichlet boundary condition
#                - slip / do-nothing in X-direction
#                - Use expression 'Dirichlet0' for Y-direction.
#          = 2 : Pressure-drop / Normal-stress boundary condition.
#                "..." specifies the name of the expression that is
#                evaluated to give the normal stress.
#                Example: 0  1.0  3  2  'PressValue1'
#          = 3 : Slip boundary conditions. Like Neumann BC's this
#                does not use an expression.

#bdComponent1(1)=
#  0  4.0  3  1  'Dirichlet0'  'Dirichlet0'  'Dirichlet0'  'Dirichlet0'  # [0.0,1.0] : Dirichlet-0 boundary
#  0  1.0  3  1  'Dirichlet0'  'Dirichlet0'  'Dirichlet0'  'Dirichlet0'  # [0.0,1.0] : Dirichlet-0 boundary
#  0  4.0  3  1  'Dirichlet0'  'Dirichlet0'  'Dirichlet0'  'Dirichlet0'  # [0.0,1.0] : Dirichlet-0 boundary
#  0  2.0  0  0                                                          # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  3.0  3  1  'Dirichlet0'  'Dirichlet0' 'Dirichlet0'  'Dirichlet0'  # [2.0,3.0] : Dirichlet-0 boundary
#  0  4.0  0  0                                                          # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  4.0  3  1   'DirichletX'  'DirichletMY' 'DirichletDMX' 'DirichletDY'  # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  4.0  3  1   'DirichletX'  'DirichletMY' 'Dirichlet0' 'Dirichlet0'  # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  4.0  3  1   'DirichletTX'  'DirichletTMY' 'DirichletDTMX' 'DirichletDTY'  # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  4.0  0  0                                                          # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  4.0  3  1  'ParProfile'  'Dirichlet0' 'Dirichlet0'  'Dirichlet0'  # [3.0,4.0] : parabolic profile in X, 0.0 in Y


# For stationary Stokes reference:
bdComponent1(2)=
  0  4.0  3  1   'DirichletX'  'DirichletMY' 'Dirichlet0' 'Dirichlet0'  # ]1.0,2.0[ : Neumann boundary = do-nothing

# For stationary Navier-Stokes reference:
#bdComponent1(1)=
#  0  4.0  3  1   'DirichletX'  'DirichletMY' 'DirichletDMX' 'DirichletDMY'  # ]1.0,2.0[ : Neumann boundary = do-nothing

# For nonstationary Stokes reference:
#bdComponent1(1)=
#  0  4.0  3  1   'DirichletTX'  'DirichletTMY' 'DirichletDTMX' 'DirichletDTY'  # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  4.0  0  0                                                          # ]1.0,2.0[ : Neumann boundary = do-nothing


#bdComponent1(4)=
#  0  1.0  3  1  'Dirichlet0'  'Dirichlet0'   # [0.0,1.0] : Dirichlet-0 boundary
#  0  2.0  0  0                               # ]1.0,2.0[ : Neumann boundary = do-nothing
#  0  3.0  3  1  'Dirichlet0'  'Dirichlet0'   # [2.0,3.0] : Dirichlet-0 boundary
#  0  4.0  3  2  'pressure1'                  # [3.0,4.0] : Pressure drop

bdComponent2(1)=
 0  4.0  3  1  'Dirichlet0'  'Dirichlet0' 'Dirichlet0'  'Dirichlet0'  # Complete boundary component Dirichlet-0 boudary
