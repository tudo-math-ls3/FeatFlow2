#!/bin/sh
#
# This small shell script is used to create a default makefile
# for the application.
#

##############################################################################
# Don't let the perl configure script be confused by non-english messages from
# system information programs.
# (LC_ALL overrides the value of the LANG environment variable and the values
# of any other LC_* environment variables.)
LC_ALL=C
export LC_ALL


##############################################################################
# Change to the directory where this script resides (you might call this
# script via <some path>/configure, so change to <some path> first.
SCRIPTPATH=`dirname $0`
cd ${SCRIPTPATH}


##############################################################################
# Default behaviour:
# Do not store object files to home directory, but to some scratch area
# without quota restrictions. Try to come up with a reasonable name for the
# object file directories (per application and one for the libraries which are
# shared among all FEAT2 applications).
#
# Note: this default behaviour can always be overridden by explicitly setting
# --objdir=<some path> on the command line when invoking this script!
#
# Specify its directory prefix here.
BASEDIR_OBJFILES=${HOME}/nobackup/feat2obj

# To support multiple working copies of FEAT2 which all store their object
# files beneath ${BASEDIR_OBJFILES}, but which should not interfere which each
# other, duplicate the hierarchy of these FEAT2 installations beneath
# ${BASEDIR_OBJFILES}. The procedure can be explained most easily with an
# example:
# Consider you have two FEAT2 installations, one in $HOME/Featflow2 and
# another in $HOME/Featflow2-testing, then the object files should go to
# ${BASEDIR_OBJFILES}/Featflow2 and ${BASEDIR_OBJFILES}/Featflow2-testing,
# respectively.
CWD=`/bin/pwd`

# Try to shorten the directory hierarchy below ${BASEDIR_OBJFILES}. Why?
# Because it is used to create the object directory and some compilers enforce
# (silently) restrictions on include and module directories (e.g. PGI). Do not
# let the path to object directory become too long!

# Step 1:
#   try to cut off the leading part ending in your username.
FEAT2INSTDIR=${CWD}
# $USER is used later on, but not all Unix systems define
# this environment variable, Sun Solaris e.g. does not.
test -z "$USER" && USER="$LOGNAME"
# Username contained in path name?
FEAT2INSTDIR=`echo ${FEAT2INSTDIR} | perl -pe "s,^.*/$USER/,/,;"`;

# Step 2:
#   remove "Featflow2/" and "Featflow2.gitsvn", case-insensitively
FEAT2INSTDIR=`echo ${FEAT2INSTDIR} | perl -pe "s,/Featflow2/,/,i; s,/Featflow2.gitsvn/,/,i;"`;

# Concatenate directory strings to come up with a directory name
# for FEAT2 application object files
OBJDIRPREFIX=${BASEDIR_OBJFILES}${FEAT2INSTDIR}

# Create a likewise directory for all libraries which should
# be shared among all FEAT2 applications as - being a library -
# they have no dependency on the FEAT2 kernel or a FEAT2y application
# and are all compiled with identical settings.
OBJDIRLIBPREFIX=`dirname \`dirname ${OBJDIRPREFIX}\``


################################################################
# Specify header files which should be copied to the object directory
HEADER_FILES_TO_COPY="src/flagship.h
 src/models/hydro/hydro.h
 src/models/hydro/hydro_callback.h
 src/models/mhd/mhd.h
 src/models/mhd/mhd_callback.h
 src/kernel/thermodynamics.h
 src/kernel/magnetohydrodynamics.h"

################################################################
# Specify list of application source files
# (disable any ls alias setting)
SRCLIST_APP="`\ls src/*.f90 src/models/*/*.f90 src/kernel/*.f90 2>/dev/null` "
SRCEXTRA_APP=" "

################################################################
# Clear application specific flags 
APPONLYFLAGS="-Isrc"

################################################################
# Define global memory layout and index addressing
APPONLYFLAGS="$APPONLYFLAGS,-DMEMORY_LAYOUT=COLUMN_MAJOR_ORDER -DIDXADDR=IDXADDR_F"

################################################################
# Enable auto-tuning using genetic algorithms.
if ([ -n "${AUTOTUNE+x}" ] && [ "$AUTOTUNE" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DENABLE_AUTOTUNE"
fi

################################################################
# Enable use of coprocessor support (if available)
if ([ -n "${COPROC+x}" ]); then
if ([ "$COPROC" = "CUDA20" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DUSE_C_PTR_STORAGE=C_PTR_STORAGE_COPROC"
SRCEXTRA_APP="$SRCEXTRA_APP `\ls src/*.c src/*.h src/models/*/*.h src/kernel/*.h src/models/*/*.cu 2>/dev/null` "
COPROC="--coproc=cuda20"
else
if ([ "$COPROC" = "CUDA21" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DUSE_C_PTR_STORAGE=C_PTR_STORAGE_COPROC"
SRCEXTRA_APP="$SRCEXTRA_APP `\ls src/*.c src/*.h src/models/*/*.h src/kernel/*.h src/models/*/*.cu 2>/dev/null` "
COPROC="--coproc=cuda21"
else
if ([ "$COPROC" = "CUDA30" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DUSE_C_PTR_STORAGE=C_PTR_STORAGE_COPROC"
SRCEXTRA_APP="$SRCEXTRA_APP `\ls src/*.c src/*.h src/models/*/*.h src/kernel/*.h src/models/*/*.cu 2>/dev/null` "
COPROC="--coproc=cuda30"
else
if ([ "$COPROC" = "CUDA35" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DUSE_C_PTR_STORAGE=C_PTR_STORAGE_COPROC"
SRCEXTRA_APP="$SRCEXTRA_APP `\ls src/*.c src/*.h src/models/*/*.h src/kernel/*.h src/models/*/*.cu 2>/dev/null` "
COPROC="--coproc=cuda35"
else
if ([ "$COPROC" = "CUDA50" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DUSE_C_PTR_STORAGE=C_PTR_STORAGE_COPROC"
SRCEXTRA_APP="$SRCEXTRA_APP `\ls src/*.c src/*.h src/models/*/*.h src/kernel/*.h src/models/*/*.cu 2>/dev/null` "
COPROC="--coproc=cuda50"
else
COPROC=""
fi
fi
fi
fi
fi
else
COPROC=""
fi

################################################################
# Enable AGMG library.
if ([ -n "${AGMG+x}" ] && [ "$AGMG" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DENABLE_AGMG"
fi

################################################################
# Enable external coloring library library.
if ([ -n "${COLORINGTEST+x}" ] && [ "$COLORINGTEST" = "YES" ]); then
APPONLYFLAGS="$APPONLYFLAGS,-DENABLE_COLORINGTEST"
SRCEXTRA_APP="$SRCEXTRA_APP src/coloring.c"
fi

##############################################################################
# Finally, invoke the real work horse, FEAT2's configure, and pass all
# configuration settings determined above to it. Command-line parameters given
# when invoking this script are passed to the 'real' configure script as well
# (via "$@"). They can be used to override settings hard coded here.
../../bin/configure \
  --appname=flagship-\$\(ID\) \
  --programfile=src/flagship.f90 \
  --srclist_app="${SRCLIST_APP}" \
  --srcextra_app="${SRCEXTRA_APP}" \
  --header-files-to-copy="${HEADER_FILES_TO_COPY}" \
  --objdir-prefix=${OBJDIRPREFIX} \
  --objdir-lib-prefix=${OBJDIRLIBPREFIX} \
  --apponlyflags="${APPONLYFLAGS}" \
  "${COPROC}" \
  "$@"
