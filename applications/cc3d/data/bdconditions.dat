###############
[BDEXPRESSIONS]
###############

# At first we define a list of expressions that can be evaluated
# on the boundary. The number in braces "(n)" specifies
# how many expressions are defined here. The following n lines define
# n constant values in the form
#   'name' type value
# with
#   'name' : an arbitrary name; case insensitive
#   type   : -2=name of a hardcoded expression realised by callback routines
#               in the code
#            -1=general text expression to be evaluated
#             0=double precision constant, 
#             1=integer constant
#             2=parabolic profile with given maximum value
#   value  : the value associated to the name
#
# The following variables are allowed in an expression:
#    x = x-coordinate of the point on the boundary
#    y = y-coordinate of the point on the boundary
#    z = z-coordinate of the point on the boundary
#    t = current simulation time (=0 for stationary simulations)
#
# The following constants are defined:
#
#    _PI    = The number Pi
#    _EXP   = The natural number E
#    _INFTY = infinity
#
# Moreover, all commands from the fparser.f90 are possible here,
# e.g. if, min, max, sin, cos, tan, ceil, floor, exp, log, log10, sqrt,...
#
# Note: An expression defining Dirichlet boundary conditions may return
# _INFTY at some points (x,y,z) on the boundary. This return value will
# make the corresponding part on the boundary be treated as Neumann
# boundary! Thus by defining an expression relative to a parameter
# value and the time, it's possible to create moving boundary conditions.

bdExpressions(5) =
  'pi'             0    3.14159265358979
  'Umax'           0    0.3
  'Dirichlet0'     0    0.0
  'Dirichlet1'     0    1.0
  'ParProfile'     2    0.45
  

##############
[BDCONDITIONS]
##############

# Whether there are Neumann boundary components in the domain.
# =-1 : automatic detection (standard; does not work for moving boundary conditions!)
# =0  : The boundary is pure Dirichlet.
# =1  : There are Neumann or pressure drop boundary segments on the domain.

ineumannBoundary = -1

# TODO: Write Documentation

# Benchmark configuration:
bdRegion(7)=
  1 'Dirichlet0'  'Dirichlet0'  'Dirichlet0'   # Bottom face: Dirichlet-0 boundary
  1 'Dirichlet0'  'Dirichlet0'  'Dirichlet0'   # Front  face: Dirichlet-0 boundary
  0                                            # Right  face: Neumann boundary
  1 'Dirichlet0'  'Dirichlet0'  'Dirichlet0'   # Back   face: Dirichlet-0 boundary
  1 'ParProfile'  'Dirichlet0'  'Dirichlet0'   # Left   face: Dirichlet-0 boundary 
                                               # for Y- and Z-velocity, parabolic
                                               # profile for X-velocity
  1 'Dirichlet0'  'Dirichlet0'  'Dirichlet0'   # Top    face: Dirichlet-0 boundary
  1 'Dirichlet0'  'Dirichlet0'  'Dirichlet0'   # Obstacle   : Dirichlet-0 boundary
