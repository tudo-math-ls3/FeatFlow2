#!/usr/bin/env gmake
## -*- makefile -*-

########################################################################
# This file contains compiler settings for CPUID: x86_64
########################################################################

# Standard compiler settings for pc64 systems
ifeq ($(call match,$(ID),pc64-*),yes)
CC=gcc
CPP=g++
FC=g95
OPTFLAGS  = -O3 -m64 -ffast-math -fexpensive-optimizations
FCFLAGS   = -pipe -fmod=$(MODDIR)
CCFLAGS   = -pipe
CPPFLAGS   = -pipe
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 1
endif

########################################################################
# AMD64 /w GNU compiler
########################################################################

ifeq ($(call match,$(ID),pc64-(athlon64|opteron)-(linux|cygwin_nt?.?)),yes)
CC=gcc
CPP=g++
FC=g95
OPTFLAGS  = -O3 -m64 -ffast-math -fexpensive-optimizations
FCFLAGS   = -pipe -fmod=$(MODDIR)
CCFLAGS   = -pipe
CPPFLAGS   = -pipe
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 1

# Try to find more sophisticated compiler settings
ifeq ($(FFCPU),athlon64)
OPTFLAGS  += -mmmx -msse -msse2 -m3dnow -ffinite-math-only -fgcse \
-floop-optimize -fmove-all-movables -foptimize-register-move \
-foptimize-sibling-calls -frename-registers -freorder-blocks \
-fomit-frame-pointer -funroll-loops -fprefetch-loop-arrays \
-fsched-interblock -frerun-loop-opt -frerun-cse-after-loop \
-freorder-functions
FCFLAGS   += -march=athlon64
CCFLAGS   += -march=athlon64
CPPFLAGS   += -march=athlon64
GENERIC   = 0
endif

ifeq ($(FFCPU),opteron)
OPTFLAGS  += -mmmx -msse -msse2 -m3dnow -mfpmath=sse -ffinite-math-only \
-fgcse -floop-optimize -foptimize-register-move -foptimize-sibling-calls \
-frename-registers -freorder-blocks -fomit-frame-pointer -funroll-loops \
-fprefetch-loop-arrays -fsched-interblock -frerun-loop-opt \
-frerun-cse-after-loop -freorder-functions
FCFLAGS   += -march=opteron
CCFLAGS   += -march=opteron
CPPFLAGS   += -march=opteron
GENERIC   = 0
endif
endif


########################################################################
# AMD64 /w Intel compiler
########################################################################

ifeq ($(call match,$(ID),pc64-(athlon64|opteron)-(linux|cygwin_nt?.?)-ifc),yes)
CC=icc
CPP=icpc
FC=ifort
AR=xiar
OPTFLAGS  = -O3 -ipo
FCFLAGS   = -cm -fpe0 -vec-report0 -module $(MODDIR)
CCFLAGS   = -vec-report0
CPPFLAGS   = -vec-report0
LDFLAGS   = -lsvml
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 1

# Try to find more sophisticated compiler settings
ifeq ($(FFCPU),athlon64)
OPTFLAGS  += -tpp7 -xW -us -pad -funroll-loops
GENERIC   = 0
endif

ifeq ($(FFCPU),opteron)
OPTFLAGS  += -mtune=pentiumpro -march=pentium4
LDFLAGS   += -i-dynamic
GENERIC   = 0
endif
endif


########################################################################
# AMD64 /w PGI compiler
########################################################################

ifeq ($(call match,$(ID),pc64-(athlon64|opteron)-(linux|cygwin_nt?.?)-pgi),yes)
CC=pgcc
CPP=pgcc
FC=pgf95
OPTFLAGS  = -fastsse -O4
FCFLAGS   = -module $(MODDIR)
CCFLAGS   = 
CPPFLAGS   = 
LDFLAGS   = -lpgftnrtl -lm
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 1

# Try to find more sophisticated compiler settings
ifeq ($(FFCPU),opteron)
OPTFLAGS  += -tp k8-64 -Mipa -mcmodel=medium -Mlarge_arrays
GENERIC   = 0
endif
endif


########################################################################
# AMD64 /w Pathscale compiler
########################################################################

ifeq ($(call match,$(ID),pc64-(athlon64|opteron)-(linux|cygwin_nt?.?)-path),yes)
CC=pathcc
CPP=pathcc
FC=pathf90
OPTFLAGS  = -Ofast
FCFLAGS   = -pipe
CCFLAGS   = -pipe
CPPFLAGS   = -pipe
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 1

# Try to find more sophisticated compiler settings
ifeq ($(FFCPU),opteron)
FCFLAGS   += -march=opteron
CCFLAGS   += -march=opteron
CPPFLAGS   += -march=opteron
GENERIC   = 1
endif
endif


########################################################################
# AMD64 /w SUN compiler
########################################################################

ifeq ($(call match,$(ID),pc64-(athlon64|opteron)-(linux|cygwin_nt?.?)-sun),yes)
CC=suncc
CPP=suncc
FC=sunf90
OPTFLAGS  = -fast -O5 
FCFLAGS   = -moddir=$(MODDIR)
CCFLAGS   =
CPPFLAGS   =
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 0
endif


########################################################################
# AMD64 special user definitions
########################################################################

ifeq ($(ID),pc64-opteron-linux-gcc4)
CC=gcc
CPP=g++
FC=gfortran
OPTFLAGS  = -O3 -ffast-math -fexpensive-optimizations
FCFLAGS   = -march=opteron -pipe -J$(MODDIR) -I$(MODDIR)
CCFLAGS   = -march=opteron -pipe
CPPFLAGS   = -march=opteron -pipe
LDFLAGS   = -Wl
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 0
endif

# IFORT compiler, standard BLAS, large arrays > 2GB
ifeq ($(ID),pc64-opteron-linux-ifclarge)
CC=/usr/local/icce/bin/icc
CPP=/usr/local/icce/bin/icpc
FC=/usr/local/ifce/bin/ifort
OPTFLAGS  = 
FCFLAGS   = -mcmodel=medium  -module $(MODDIR)
CCFLAGS   = -mcmodel=medium 
CPPFLAGS   = -mcmodel=medium 
LDFLAGS   = -i-dynamic
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 0
endif

# IFORT compiler, standard BLAS, large arrays > 2GB
# High precision: 128 bit double, 64 bit integer
ifeq ($(ID),pc64-opteron-linux-ifclargeprec)
CC=/usr/local/icce/bin/icc
CPP=/usr/local/icce/bin/icpc
FC=/usr/local/ifce/bin/ifort
OPTFLAGS  = 
FCFLAGS   = -mcmodel=large -integer_size 64 -double_size 128 -real_size 64 -module $(MODDIR)
CCFLAGS   = -mcmodel=large -integer_size 64 -double_size 128 -real_size 64 
CPPFLAGS   = -mcmodel=large -integer_size 64 -double_size 128 -real_size 64 
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 0
endif

# GCC compiler, standard BLAS, large arrays > 2GB
ifeq ($(ID),pc64-opteron-linux-gcclarge)
CC=gcc
CPP=g++
FC=g95
OPTFLAGS  = 
FCFLAGS   = -mcmodel=medium -m64 -fmod=$(MODDIR)
CCFLAGS   = -mcmodel=medium -m64
CPPFLAGS   = -mcmodel=medium -m64
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 0
endif

########################################################################
# Intel /w GNU compiler
########################################################################

ifeq ($(call match,$(ID),pc64-core2-(linux|cygwin_nt?.?)),yes)
CC=gcc
CPP=g++
FC=g95
OPTFLAGS  = -O3 -m64 -ffast-math -fexpensive-optimizations -fprefetch-loop-arrays
FCFLAGS   = -pipe -fmod=$(MODDIR)
CCFLAGS   = -pipe
CPPFLAGS   = -pipe
BLASLIB   =
LAPACKLIB =
GENERIC   = 0 

# Try to find more sophisticated compiler settings
ifeq ($(FFCPU),core2)
OPTFLAGS  += -mmmx -msse -msse2 -msse3
FCFLAGS   += -march=nocona
CCFLAGS   += -march=nocona
CPPFLAGS   += -march=nocona
endif
endif

########################################################################
# Intel /w Intel compiler
########################################################################

ifeq ($(call match,$(ID),pc64-core2-(linux|cygwin_nt?.?)-ifc),yes)
CC=icc
CPP=icc
FC=ifort
AR=xiar
OPTFLAGS  = -O3 -ipo
FCFLAGS   = -cm -fpe0 -vec-report0 -module $(MODDIR)
CCFLAGS   = -vec-report0
CPPFLAGS   = -vec-report0
LDFLAGS   = -lsvml
BLASLIB   =
LAPACKLIB =
GENERIC   = 1

# Try to find more sophisticated compiler settings
ifeq ($(FFCPU),core2)
OPTFLAGS  += -xT
GENERIC   = 0
endif
endif


########################################################################
# Intel /w SUN compiler
########################################################################

ifeq ($(call match,$(ID),pc64-core2-(linux|cygwin_nt?.?)-sun),yes)
CC=suncc
CPP=suncc
FC=sunf90
OPTFLAGS  = -fast -O5 
FCFLAGS   = -moddir=$(MODDIR)
CCFLAGS   =
CPPFLAGS   =
BLASLIB   = 
LAPACKLIB = 
GENERIC   = 0
endif